--- patch-3.10-ck1	2014-10-10 00:31:55.180735873 +0100
+++ patch-3.10.99-ck1	2014-10-10 00:37:11.694744349 +0100
@@ -1030,30 +1030,24 @@
 ===================================================================
 --- linux-3.10-ck1.orig/drivers/cpufreq/cpufreq_ondemand.c	2013-07-09 17:28:57.214502080 +1000
 +++ linux-3.10-ck1/drivers/cpufreq/cpufreq_ondemand.c	2013-07-09 17:29:00.841501924 +1000
-@@ -29,8 +29,8 @@
+@@ -29,7 +29,7 @@
  #include "cpufreq_governor.h"
  
  /* On-demand governor macros */
--#define DEF_FREQUENCY_DOWN_DIFFERENTIAL		(10)
 -#define DEF_FREQUENCY_UP_THRESHOLD		(80)
-+#define DEF_FREQUENCY_DOWN_DIFFERENTIAL		(26)
 +#define DEF_FREQUENCY_UP_THRESHOLD		(63)
  #define DEF_SAMPLING_DOWN_FACTOR		(1)
  #define MAX_SAMPLING_DOWN_FACTOR		(100000)
- #define MICRO_FREQUENCY_DOWN_DIFFERENTIAL	(3)
-@@ -160,10 +160,10 @@
+ #define MICRO_FREQUENCY_UP_THRESHOLD		(95)
+@@ -158,7 +158,7 @@
  }
  
  /*
 - * Every sampling_rate, we check, if current idle time is less than 20%
 + * Every sampling_rate, we check, if current idle time is less than 37%
-  * (default), then we try to increase frequency. Every sampling_rate, we look
-  * for the lowest frequency which can sustain the load while keeping idle time
-- * over 30%. If such a frequency exist, we try to decrease to this frequency.
-+ * over 63%. If such a frequency exist, we try to decrease to this frequency.
-  *
-  * Any frequency increase takes it to the maximum frequency. Frequency reduction
-  * happens at minimum steps of 5% (default) of current frequency
+  * (default), then we try to increase frequency. Else, we adjust the frequency
+  * proportional to load.
+  */
 Index: linux-3.10-ck1/kernel/sched/bfs.c
 ===================================================================
 --- /dev/null	1970-01-01 00:00:00.000000000 +0000
