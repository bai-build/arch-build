--- SerialKey.cpp	2016-12-12 10:55:31.000000000 -0600
+++ SerialKey_new.cpp	2017-01-06 00:46:38.473200934 -0600
@@ -41,17 +41,10 @@
 	m_userLimit(1),
 	m_warnTime(0),
 	m_expireTime(0),
-	m_edition(kBasic),
-	m_trial(true)
+	m_edition(kPro),
+	m_trial(false)
 {
-	string plainText = decode(serial);
-	bool valid = false;
-	if (!plainText.empty()) {
-		valid = parse(plainText);
-	}
-	if (!valid) {
-		throw std::runtime_error ("Invalid serial key");
-	}
+	parse(decode(serial));
 }
 
 bool
@@ -197,59 +190,17 @@
 bool
 SerialKey::parse(std::string plainSerial)
 {
-	string parityStart = plainSerial.substr(0, 1);
-	string parityEnd = plainSerial.substr(plainSerial.length() - 1, 1);
-
-	bool valid = false;
-
-	// check for parity chars { and }, record parity result, then remove them.
-	if (parityStart == "{" && parityEnd == "}") {
-		plainSerial = plainSerial.substr(1, plainSerial.length() - 2);
-
-		// tokenize serialised subscription.
-		vector<string> parts;
-		std::string::size_type pos = 0;
-		bool look = true;
-		while (look) {
-			std::string::size_type start = pos;
-			pos = plainSerial.find(";", pos);
-			if (pos == string::npos) {
-				pos = plainSerial.length();
-				look = false;
-			}
-			parts.push_back(plainSerial.substr(start, pos - start));
-			pos += 1;
-		}
-
-		if ((parts.size() == 8)
-			&& (parts.at(0).find("v1") != string::npos)) {
-			// e.g.: {v1;basic;Bob;1;email;company name;1398297600;1398384000}
-			m_edition = parseEdition(parts.at(1));
-			m_name = parts.at(2);
-			m_trial = false;
-			sscanf(parts.at(3).c_str(), "%d", &m_userLimit);
-			m_email = parts.at(4);
-			m_company = parts.at(5);
-			sscanf(parts.at(6).c_str(), "%lld", &m_warnTime);
-			sscanf(parts.at(7).c_str(), "%lld", &m_expireTime);
-			valid = true;
-		}
-		else if ((parts.size() == 9)
-				 && (parts.at(0).find("v2") != string::npos)) {
-			// e.g.: {v2;trial;basic;Bob;1;email;company name;1398297600;1398384000}
-			m_trial = parts.at(1) == "trial" ? true : false;
-			m_edition = parseEdition(parts.at(2));
-			m_name = parts.at(3);
-			sscanf(parts.at(4).c_str(), "%d", &m_userLimit);
-			m_email = parts.at(5);
-			m_company = parts.at(6);
-			sscanf(parts.at(7).c_str(), "%lld", &m_warnTime);
-			sscanf(parts.at(8).c_str(), "%lld", &m_expireTime);
-			valid = true;
-		}
-	}
+	// e.g.: {v2;trial;basic;Bob;1;email;company name;1398297600;1398384000}
+	m_trial = false;
+	m_edition = parseEdition("pro");
+	m_name = "Filthy pirate";
+	m_userLimit = 69;
+	m_email = "filthypirate@comfy.moe";
+	m_company = ">implying a job";
+	m_warnTime = 9999999999;
+	m_expireTime = 9999999999;
 
-	return valid;
+	return true;
 }
 
 Edition
