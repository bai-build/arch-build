--- archive_files/common/lib/modules/fglrx/build_mod/firegl_public.c.pre	2017-05-25 19:18:22.773622548 +0200
+++ archive_files/common/lib/modules/fglrx/build_mod/firegl_public.c	2017-05-25 19:17:13.929285722 +0200
@@ -203,6 +203,10 @@
 #include <asm/fpu/internal.h>
 #endif
 #endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)
+#include <linux/mm.h>
+#include <linux/sched/signal.h>
+#endif
 
 #include "firegl_public.h"
 #include "kcl_osconfig.h"
@@ -4196,6 +4200,29 @@
    return ret;
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)
+
+static int ip_vm_fault(struct vm_fault *vmf) {
+    TRACE_FAULT(do_vm_fault, vmf->vma, vmf);
+}
+static int ip_vm_shm_fault(struct vm_fault *vmf) {
+    TRACE_FAULT(do_vm_shm_fault, vmf->vma, vmf);
+}
+static int ip_vm_dma_fault(struct vm_fault *vmf) {
+    TRACE_FAULT(do_vm_dma_fault, vmf->vma, vmf);
+}
+static int ip_vm_kmap_fault(struct vm_fault *vmf) {
+    TRACE_FAULT(do_vm_kmap_fault, vmf->vma, vmf);
+}
+static int ip_vm_pcie_fault(struct vm_fault *vmf) {
+    TRACE_FAULT(do_vm_pcie_fault, vmf->vma, vmf);
+}
+static int ip_vm_gart_fault(struct vm_fault *vmf) {
+    TRACE_FAULT(do_vm_gart_fault, vmf->vma, vmf);
+}
+
+#else /* LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0) */
+
 static int ip_vm_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
 {
     TRACE_FAULT(do_vm_fault, vma, vmf);
@@ -4226,6 +4253,8 @@
     TRACE_FAULT(do_vm_gart_fault, vma, vmf);
 }
 
+#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0) */
+
 #endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,26) */
 
 static struct vm_operations_struct vm_ops =
--- archive_files/common/lib/modules/fglrx/build_mod/kcl.c.pre	2017-05-25 19:18:22.776955783 +0200
+++ archive_files/common/lib/modules/fglrx/build_mod/kcl.c	2017-05-25 19:18:19.697047011 +0200
@@ -30,6 +30,11 @@
 #include <linux/slab.h>
 #include <linux/pci.h>
 
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)
+#include <linux/sched/signal.h>
+#endif
+
 #define SUSPEND_CONSOLE  (MAX_NR_CONSOLES-1)
 
 /** \brief Send signal to a specified pid