diff -ru a/configure b/configure
--- a/configure	2010-03-08 09:48:02.000000000 +0100
+++ b/configure	2018-06-07 17:10:03.463973564 +0200
@@ -34,7 +34,7 @@
 # The first step is to create a temporary file name using the method
 # from PerlFAQ.
 use IO::File;
-use POSIX qw(tmpnam);
+use File::Temp qw/ :POSIX /;
 my $name;
 do {
   $name = tmpnam();
diff -ru a/src/library.cc b/src/library.cc
--- a/src/library.cc	2010-03-08 08:52:25.000000000 +0100
+++ b/src/library.cc	2018-06-07 17:10:04.340666721 +0200
@@ -164,7 +164,7 @@
 
   for (i=0; i < nargs; i++) {
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_PLUS, ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_PLUS, ERR_ARGUMENT, args[i]);
 
     result += args[i];
   }
@@ -175,25 +175,25 @@
 long int_exp(int nargs, long *args )
 {
   if (nargs != 2) {
-    runtime_error(FUN_EXP, ERR_NUMARGS, 2);
+    ::runtime_error(FUN_EXP, ERR_NUMARGS, 2);
   }
   long base = args[0];
   long power = args[1];
   long result = 1;
   
   if (IS_CONSTANT(args[0])) 
-    runtime_error(FUN_EXP, ERR_ARGUMENT, args[0]);
+    ::runtime_error(FUN_EXP, ERR_ARGUMENT, args[0]);
 
   if (IS_CONSTANT(args[1])) 
-    runtime_error(FUN_EXP, ERR_ARGUMENT, args[1]);
+    ::runtime_error(FUN_EXP, ERR_ARGUMENT, args[1]);
 
   if (power < 0)
-    runtime_error(FUN_EXP, ERR_ARGUMENT, args[1]);
+    ::runtime_error(FUN_EXP, ERR_ARGUMENT, args[1]);
   
   while (power--) {
     result *= base;
     if (IS_CONSTANT(result))
-      runtime_error(FUN_EXP, ERR_OVERFLOW, 0);
+      ::runtime_error(FUN_EXP, ERR_OVERFLOW, 0);
   }
   return result;
 }
@@ -201,16 +201,16 @@
 long int_norm(int nargs, long *args)
 {
   if (nargs != 1) {
-    runtime_error(FUN_NORM, ERR_NUMARGS, 1);
+    ::runtime_error(FUN_NORM, ERR_NUMARGS, 1);
   }
   
   if (args[0] < 0 || args[0] > predicate_table->Size())
-    runtime_error(FUN_NORM, ERR_RANGE, args[0]);
+    ::runtime_error(FUN_NORM, ERR_RANGE, args[0]);
 
   long p = args[0];
 
   if (!predicates[p]->DomainPredicate())
-    runtime_error(FUN_NORM, ERR_NONFIXED_EXTENSION, args[0]);
+    ::runtime_error(FUN_NORM, ERR_NONFIXED_EXTENSION, args[0]);
   
   if (predicates[p]->atoms)
     return predicates[p]->atoms->Size();
@@ -258,11 +258,11 @@
   result = args[0];
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_MINUS, ERR_ARGUMENT, args[i]);
+    ::runtime_error(FUN_MINUS, ERR_ARGUMENT, args[i]);
  
   for (i = 1; i < nargs; i++) { // '1' intentional
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_MINUS, ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_MINUS, ERR_ARGUMENT, args[i]);
 
     result -= args[i];
   }
@@ -277,7 +277,7 @@
   result = args[0];
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_ABS, ERR_ARGUMENT, result);
+    ::runtime_error(FUN_ABS, ERR_ARGUMENT, result);
       
   
   if (result < 0)
@@ -300,7 +300,7 @@
 
   for (i = 1 ; i < nargs; i++ ) { // '1' intentional
     if (IS_CONSTANT(args[i]))
-      runtime_error(FUN_LE, ERR_INVALID_COMPARE, args[0], args[i]);
+      ::runtime_error(FUN_LE, ERR_INVALID_COMPARE, args[0], args[i]);
     
     if (args[i] < prior_value) {
       result = 0;
@@ -324,7 +324,7 @@
   
   for (i = 1 ; i < nargs; i++ ) { // '1' intentional
     if (IS_CONSTANT(args[i]))
-      runtime_error(FUN_GE, ERR_INVALID_COMPARE, args[0],args[i]);
+      ::runtime_error(FUN_GE, ERR_INVALID_COMPARE, args[0],args[i]);
 
     
     if (args[i] > prior_value) {
@@ -349,7 +349,7 @@
   
   for (i = 1 ; i < nargs; i++ ) { // '1' intentional
     if (IS_CONSTANT(args[i]))
-      runtime_error(FUN_GT, ERR_INVALID_COMPARE, args[0],args[i]);
+      ::runtime_error(FUN_GT, ERR_INVALID_COMPARE, args[0],args[i]);
 
     if (args[i] >= prior_value) {
       result = 0;
@@ -373,7 +373,7 @@
   
   for (i = 1 ; i < nargs; i++ ) { // '1' intentional
     if (IS_CONSTANT(args[i]))
-      runtime_error(FUN_LT, ERR_INVALID_COMPARE, args[0], args[i]);
+      ::runtime_error(FUN_LT, ERR_INVALID_COMPARE, args[0], args[i]);
 
     if (args[i] <= prior_value) {
       result = 0;
@@ -408,11 +408,11 @@
   int i = 0;
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_TIMES, ERR_ARGUMENT, args[i]);
+    ::runtime_error(FUN_TIMES, ERR_ARGUMENT, args[i]);
 
   for (i = 0; i < nargs; i++) {
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_TIMES, ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_TIMES, ERR_ARGUMENT, args[i]);
 
     result *= args[i];
   }
@@ -425,14 +425,14 @@
   int i = 0;
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_DIV, ERR_ARGUMENT, args[i]);
+    ::runtime_error(FUN_DIV, ERR_ARGUMENT, args[i]);
 
   for (i = 1; i < nargs; i++) { // '1' intentional
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_DIV,ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_DIV,ERR_ARGUMENT, args[i]);
     
     if (args[i] == 0) {
-      runtime_error(FUN_DIV,ERR_DIVIDE_BY_ZERO, 0); 
+      ::runtime_error(FUN_DIV,ERR_DIVIDE_BY_ZERO, 0); 
     } else {
       result /= args[i];
     }
@@ -446,14 +446,14 @@
   int i = 0;
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_MOD, ERR_ARGUMENT, args[i]);
+    ::runtime_error(FUN_MOD, ERR_ARGUMENT, args[i]);
 
   for (i = 1; i < nargs; i++) { // '1' intentional
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_MOD, ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_MOD, ERR_ARGUMENT, args[i]);
 
     if (args[i] == 0) {
-      runtime_error(FUN_MOD, ERR_DIVIDE_BY_ZERO, 0); 
+      ::runtime_error(FUN_MOD, ERR_DIVIDE_BY_ZERO, 0); 
     } else {
       result %= args[i];
       if (result < 0)
@@ -469,11 +469,11 @@
   int i = 0;
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_AND, ERR_ARGUMENT, args[i]);
+    ::runtime_error(FUN_AND, ERR_ARGUMENT, args[i]);
   
   for (i = 1; i < nargs; i++) { // '1' intentional
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_AND, ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_AND, ERR_ARGUMENT, args[i]);
     
     result &= args[i];
   }
@@ -486,11 +486,11 @@
   int i = 0;
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_OR, ERR_ARGUMENT, args[i]);
+    ::runtime_error(FUN_OR, ERR_ARGUMENT, args[i]);
 
   for (i = 1; i < nargs; i++) { // '1' intentional
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_OR, ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_OR, ERR_ARGUMENT, args[i]);
 
     result |= args[i];
   }
@@ -503,11 +503,11 @@
   int i = 0;
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_XOR, ERR_ARGUMENT, args[i]);
+    ::runtime_error(FUN_XOR, ERR_ARGUMENT, args[i]);
 
   for (i = 1; i < nargs; i++) { // '1' intentional
     if (IS_CONSTANT(args[i])) 
-      runtime_error(FUN_XOR, ERR_ARGUMENT, args[i]);
+      ::runtime_error(FUN_XOR, ERR_ARGUMENT, args[i]);
 
     result ^= args[i];
   }
@@ -520,7 +520,7 @@
   long result = args[0];
 
   if (IS_CONSTANT(result)) 
-    runtime_error(FUN_NOT, ERR_ARGUMENT, result);
+    ::runtime_error(FUN_NOT, ERR_ARGUMENT, result);
   
   result = ~result;
   return result;
@@ -540,7 +540,7 @@
   for (int i = 1; i < nargs; i++) {
     second = constant_table->LookupByValue(args[i]);
     if (!second)
-      runtime_error(FUN_LT, ERR_INVALID_COMPARE, args[0], args[i]);
+      ::runtime_error(FUN_LT, ERR_INVALID_COMPARE, args[0], args[i]);
 
     if (strcmp(first, second) >= 0) {
       result = 0;
@@ -564,7 +564,7 @@
   for (int i = 1; i < nargs; i++) {
     second = constant_table->LookupByValue(args[i]);
     if (!second)
-      runtime_error(FUN_LE, ERR_INVALID_COMPARE,args[0], args[i]);
+      ::runtime_error(FUN_LE, ERR_INVALID_COMPARE,args[0], args[i]);
 
     if (strcmp(first, second) > 0) {
       result = 0;
@@ -589,7 +589,7 @@
   for (int i = 1; i < nargs; i++) {
     second = constant_table->LookupByValue(args[i]);
     if (!second)
-      runtime_error(FUN_GT, ERR_INVALID_COMPARE, args[0],args[i]);
+      ::runtime_error(FUN_GT, ERR_INVALID_COMPARE, args[0],args[i]);
 
     if (strcmp(first, second) <= 0) {
       result = 0;
@@ -614,7 +614,7 @@
   for (int i = 1; i < nargs; i++) {
     second = constant_table->LookupByValue(args[i]);
     if (!second)
-      runtime_error(FUN_GE, ERR_INVALID_COMPARE,args[0], args[i]);
+      ::runtime_error(FUN_GE, ERR_INVALID_COMPARE,args[0], args[i]);
 
     if (strcmp(first, second) < 0) {
       result = 0;
