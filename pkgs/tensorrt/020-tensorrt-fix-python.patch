--- a/python/CMakeLists.txt
+++ b/python/CMakeLists.txt
@@ -39,7 +39,7 @@ set(CMAKE_CXX_STANDARD ${CPP_STANDARD})
 
 if (NOT MSVC)
     # This allows us to use TRT libs shipped with standalone wheels.
-    set(CMAKE_SHARED_LINKER_FLAGS -Wl,-rpath=$ORIGIN)
+    #set(CMAKE_SHARED_LINKER_FLAGS -Wl,-rpath=$ORIGIN)
 endif()
 
 set(PY_MODULE_NAME tensorrt)
@@ -78,7 +78,7 @@ if (MSVC)
     find_path(PY_LIB_DIR ${PYTHON_LIB_NAME}.lib HINTS ${WIN_EXTERNALS}/${PYTHON} ${EXT_PATH}/${PYTHON} PATH_SUFFIXES lib)
     message(STATUS "PY_LIB_DIR: ${PY_LIB_DIR}")
 else()
-    find_path(PY_INCLUDE Python.h HINTS ${EXT_PATH}/${PYTHON} PATH_SUFFIXES include)
+    find_path(PY_INCLUDE Python.h HINTS /usr/lib PATH_SUFFIXES ${PYTHON})
 endif()
 
 message(STATUS "PY_INCLUDE: ${PY_INCLUDE}")
@@ -98,7 +98,7 @@ message(STATUS "PY_CONFIG_INCLUDE: ${PY_
 # -------- GLOBAL COMPILE OPTIONS --------
 
 include_directories(${TENSORRT_ROOT}/include ${PROJECT_SOURCE_DIR}/include ${CUDA_INCLUDE_DIRS} ${PROJECT_SOURCE_DIR}/docstrings ${ONNX_INC_DIR} ${PYBIND11_DIR})
-link_directories(${TENSORRT_BUILD})
+link_directories(${TENSORRT_BUILD} $ENV{TRT_NONOSS_ROOT}/lib)
 
 if (MSVC)
     include_directories(${MSVC_COMPILER_DIR}/include ${MSVC_COMPILER_DIR}/../ucrt/include ${NV_WDKSDK_INC}/um ${NV_WDKSDK_INC}/shared)
--- a/python/build.sh
+++ b/python/build.sh
@@ -35,8 +35,9 @@ cmake .. -DCMAKE_BUILD_TYPE=Release \
          -DEXT_PATH=${EXT_PATH} \
          -DCUDA_INCLUDE_DIRS=${CUDA_ROOT}/include \
          -DTENSORRT_ROOT=${ROOT_PATH} \
-         -DTENSORRT_BUILD=${ROOT_PATH}/build/
-make -j12
+         -DTENSORRT_BUILD=${ROOT_PATH}/build/ \
+         -DCMAKE_SKIP_RPATH=YES
+make
 
 # Generate wheel
 TRT_MAJOR=$(awk '/^\#define NV_TENSORRT_MAJOR/ {print $3}' ${ROOT_PATH}/include/NvInferVersion.h)
