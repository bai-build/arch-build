diff --git a/doc/rtorrent.rc b/doc/rtorrent.rc
index 3680b85..228c83d 100644
--- a/doc/rtorrent.rc
+++ b/doc/rtorrent.rc
@@ -82,3 +82,6 @@
 # Enable peer exchange (for torrents not marked private)
 #
 # peer_exchange = yes
+
+# Set Downlad List layout (default - 0, compact - 1)
+#download_list_layout = 1
diff --git a/src/command_ui.cc b/src/command_ui.cc
index 2456ca7..e60aba9 100644
--- a/src/command_ui.cc
+++ b/src/command_ui.cc
@@ -518,6 +518,8 @@ void
 initialize_command_ui() {
   CMD2_VAR_STRING("keys.layout", "qwerty");
 
+  CMD2_VAR_VALUE("download.list.layout", 1);
+
   CMD2_ANY_STRING("view.add", object_convert_void(tr1::bind(&core::ViewManager::insert_throw, control->view_manager(), tr1::placeholders::_2)));
 
   CMD2_ANY_L   ("view.list",          tr1::bind(&apply_view_list));
diff --git a/src/display/utils.cc b/src/display/utils.cc
index 2ab4c1a..640a722 100644
--- a/src/display/utils.cc
+++ b/src/display/utils.cc
@@ -183,6 +183,110 @@ print_download_info(char* first, char* last, core::Download* d) {
 }
 
 char*
+print_download_info2(char* first, char* last, core::Download* d) {
+  //Name
+  std::string name = "Name";
+  if(d) name = d->info()->name();
+  name.resize(64,' ');
+  first = print_buffer(first, last, " %s", name.c_str());
+
+  //Status
+  first = print_buffer(first, last, "|");
+  if (!d)
+    first = print_buffer(first, last, " Status ");
+  else if (!d->download()->info()->is_open())
+    first = print_buffer(first, last, " CLOSED ");
+  else if (!d->download()->info()->is_active())
+    first = print_buffer(first, last, " OPEN   ");
+  else
+    first = print_buffer(first, last, "        ");
+
+  //Downloaded
+  first = print_buffer(first, last, "|");
+  if (!d)
+    first = print_buffer(first, last, " Downloaded ");
+  else
+    first = print_buffer(first, last, " %7.1f MB ", (double)d->download()->bytes_done() / (double)(1 << 20));
+
+  //Size
+  first = print_buffer(first, last, "|");
+  if (!d)
+    first = print_buffer(first, last, " Size       ");
+  else
+    first = print_buffer(first, last, " %7.1f MB ", (double)d->download()->file_list()->size_bytes() / (double)(1 << 20));
+
+  //Done
+  first = print_buffer(first, last, "|");
+  if (!d)
+    first = print_buffer(first, last, " Done ");
+  else if (d->is_done())
+    first = print_buffer(first, last, " 100%% ");
+  else if (d->is_open())
+    first = print_buffer(first, last, "  %2u%% ",(d->download()->file_list()->completed_chunks() * 100) / d->download()->file_list()->size_chunks());
+  else
+    first = print_buffer(first, last, "      ");
+
+  //Rate Up
+  first = print_buffer(first, last, "|");
+  if (!d)
+    first = print_buffer(first, last, " Up Rate   ");
+  else
+    first = print_buffer(first, last, " %6.1f KB ", (double)d->info()->up_rate()->rate() / (1 << 10));
+
+  //Rate Down
+  first = print_buffer(first, last, "|");
+  if (!d)
+    first = print_buffer(first, last, " Down Rate ");
+  else
+    first = print_buffer(first, last, " %6.1f KB ", (double)d->info()->down_rate()->rate() / (1 << 10));
+
+  //Uploaded
+  first = print_buffer(first, last, "|");
+  if (!d)
+    first = print_buffer(first, last, " Uploaded   ");
+  else
+    first = print_buffer(first, last, " %7.1f MB ", (double)d->info()->up_rate()->total() / (1 << 20));
+
+  //ETA
+  first = print_buffer(first, last, "| ");
+  if (!d)
+    first = print_buffer(first, last, " ETA     ");
+  else if (d->download()->info()->is_active() && !d->is_done())
+    first = print_download_time_left(first, last, d);
+  else
+    first = print_buffer(first, last, "         ");
+
+  //Ratio
+  first = print_buffer(first, last, " |");
+  if (!d)
+    first = print_buffer(first, last, " Ratio");
+  else
+    first = print_buffer(first, last, " %4.2f ", (double)rpc::call_command_value("d.ratio", rpc::make_target(d)) / 1000.0);
+
+  //Misc
+  first = print_buffer(first, last, "|");
+  if (!d) {
+    first = print_buffer(first, last, " Misc ");
+  } else {
+    first = print_buffer(first, last, " %c%c",
+                         rpc::call_command_string("d.tied_to_file", rpc::make_target(d)).empty() ? ' ' : 'T',
+                         rpc::call_command_value("d.ignore_commands", rpc::make_target(d)) == 0 ? ' ' : 'I',
+                         (double)rpc::call_command_value("d.ratio", rpc::make_target(d)) / 1000.0);
+
+    if (d->priority() != 2)
+      first = print_buffer(first, last, " %s", rpc::call_command_string("d.priority_str", rpc::make_target(d)).c_str());
+
+    if (!d->bencode()->get_key("rtorrent").get_key_string("throttle_name").empty())
+      first = print_buffer(first, last , " %s", rpc::call_command_string("d.throttle_name", rpc::make_target(d)).c_str());
+  }
+
+  if (first > last)
+    throw torrent::internal_error("print_download_info(...) wrote past end of the buffer.");
+
+  return first;
+}
+
+char*
 print_download_status(char* first, char* last, core::Download* d) {
   if (d->is_active())
     ;
diff --git a/src/display/utils.h b/src/display/utils.h
index 7f75425..ccb392d 100644
--- a/src/display/utils.h
+++ b/src/display/utils.h
@@ -67,6 +67,7 @@ char*       print_ddmmyyyy(char* first, char* last, time_t t);
 
 char*       print_download_title(char* first, char* last, core::Download* d);
 char*       print_download_info(char* first, char* last, core::Download* d);
+char*       print_download_info2(char* first, char* last, core::Download* d);
 char*       print_download_status(char* first, char* last, core::Download* d);
 char*       print_download_time_left(char* first, char* last, core::Download* d);
 char*       print_download_percentage_done(char* first, char* last, core::Download* d);
diff --git a/src/display/window_download_list.cc b/src/display/window_download_list.cc
index ead4ddd..8908fbd 100644
--- a/src/display/window_download_list.cc
+++ b/src/display/window_download_list.cc
@@ -40,6 +40,7 @@
 
 #include "core/download.h"
 #include "core/view.h"
+#include "rpc/parse_commands.h"
 
 #include "canvas.h"
 #include "globals.h"
@@ -73,6 +74,8 @@ WindowDownloadList::set_view(core::View* l) {
 
 void
 WindowDownloadList::redraw() {
+  const int layout = rpc::call_command_value("download.list.layout");
+
   m_slotSchedule(this, (cachedTime + rak::timer::from_seconds(1)).round_seconds());
 
   m_canvas->erase();
@@ -90,7 +93,7 @@ WindowDownloadList::redraw() {
   Range range = rak::advance_bidirectional(m_view->begin_visible(),
                                            m_view->focus() != m_view->end_visible() ? m_view->focus() : m_view->begin_visible(),
                                            m_view->end_visible(),
-                                           m_canvas->height() / 3);
+                                           m_canvas->height()/(layout ? 1 : 3));
 
   // Make sure we properly fill out the last lines so it looks like
   // there are more torrents, yet don't hide it if we got the last one
@@ -99,20 +102,30 @@ WindowDownloadList::redraw() {
     ++range.second;
 
   int pos = 1;
+  char buffer[m_canvas->width() + 1];
+  char* last = buffer + m_canvas->width() - 2 + 1;
 
-  while (range.first != range.second) {
-    char buffer[m_canvas->width() + 1];
-    char* last = buffer + m_canvas->width() - 2 + 1;
-
-    print_download_title(buffer, last, *range.first);
-    m_canvas->print(0, pos++, "%c %s", range.first == m_view->focus() ? '*' : ' ', buffer);
-    
-    print_download_info(buffer, last, *range.first);
-    m_canvas->print(0, pos++, "%c %s", range.first == m_view->focus() ? '*' : ' ', buffer);
-
-    print_download_status(buffer, last, *range.first);
-    m_canvas->print(0, pos++, "%c %s", range.first == m_view->focus() ? '*' : ' ', buffer);
+  if(layout) {
+    print_download_info2(buffer, last, NULL);
+    m_canvas->set_default_attributes(A_BOLD);
+    m_canvas->print(0, pos++, "  %s", buffer);
+  }
 
+  while (range.first != range.second) {
+    if(layout) {
+      print_download_info2(buffer, last, *range.first);
+      m_canvas->set_default_attributes(range.first == m_view->focus() ? A_REVERSE : A_NORMAL);
+      m_canvas->print(0, pos++, "%c %s", range.first == m_view->focus() ? '*' : ' ', buffer);
+    } else {
+      print_download_title(buffer, last, *range.first);
+      m_canvas->print(0, pos++, "%c %s", range.first == m_view->focus() ? '*' : ' ', buffer);
+
+      print_download_info(buffer, last, *range.first);
+      m_canvas->print(0, pos++, "%c %s", range.first == m_view->focus() ? '*' : ' ', buffer);
+
+      print_download_status(buffer, last, *range.first);
+      m_canvas->print(0, pos++, "%c %s", range.first == m_view->focus() ? '*' : ' ', buffer);
+    }
     ++range.first;
   }    
 }
diff --git a/src/main.cc b/src/main.cc
index 5e826bb..d8f623e 100644
--- a/src/main.cc
+++ b/src/main.cc
@@ -399,6 +399,8 @@ main(int argc, char** argv) {
 
     CMD2_REDIRECT        ("key_layout", "keys.layout.set");
 
+    CMD2_REDIRECT        ("download_list_layout", "download.list.layout.set");
+
     // Deprecated commands. Don't use these anymore.
 
     if (rpc::call_command_value("method.use_intermediate") == 1) {
diff --git a/src/ui/element_download_list.cc b/src/ui/element_download_list.cc
index 7d6aff0..7771eac 100644
--- a/src/ui/element_download_list.cc
+++ b/src/ui/element_download_list.cc
@@ -99,6 +99,8 @@ ElementDownloadList::ElementDownloadList() :
 
   m_bindings[KEY_UP]   = m_bindings['P' - '@'] = std::tr1::bind(&ElementDownloadList::receive_prev, this);
   m_bindings[KEY_DOWN] = m_bindings['N' - '@'] = std::tr1::bind(&ElementDownloadList::receive_next, this);
+
+  m_bindings['L']           = std::tr1::bind(&ElementDownloadList::toggle_layout, this);
 }
 
 void
@@ -221,4 +223,8 @@ ElementDownloadList::receive_change_view(const std::string& name) {
   set_view(*itr);
 }
 
+void
+ElementDownloadList::toggle_layout() {
+  rpc::call_command("download.list.layout.set", (rpc::call_command_value("download.list.layout") + 1)%2);
+}
 }
diff --git a/src/ui/element_download_list.h b/src/ui/element_download_list.h
index 20185b5..5bf4f08 100644
--- a/src/ui/element_download_list.h
+++ b/src/ui/element_download_list.h
@@ -77,6 +77,8 @@ public:
 
   void                receive_change_view(const std::string& name);
 
+  void                toggle_layout();
+
 private:
   WDownloadList*      m_window;
   core::View*         m_view;
