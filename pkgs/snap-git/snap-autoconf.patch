diff --git a/Makefile.am b/Makefile.am
new file mode 100644
index 0000000..779a633
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,32 @@
+SUBDIRS= glib-core snap-core snap-adv examples # snap-exp glib-adv
+
+#DOC_FILES= \
+#    $(top_srcdir)/doc/attrtype.htm \
+#    $(NULL)
+
+noinst_HEADERS= \
+    autoclean.sh \
+    autogen.sh \
+    $(DOC_FILES) \
+    $(NULL)
+
+EXTRA_DIST = libsnap.pc.in
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = libsnap.pc
+
+EXT_FLAGS=
+@MK@GITNUMTMP=$(shell cd "$(top_srcdir)"; A=$$(git show | head -n 1 | awk '{print $$2}'); echo $${A:0:7}; cd - > /dev/null )
+#@MK@SVNNUMTMP=$(shell cd "$(top_srcdir)"; LC_ALL=C svn info | grep -i Revision | awk '{print $$2}'; cd - > /dev/null )
+#@MK@ifeq ($(SVNNUMTMP),)
+#EXT_FLAGS= -DSVN_VERSION="${GITNUMTMP}"
+#@MK@else
+#EXT_FLAGS= -DSVN_VERSION="${SVNNUMTMP}"
+#@MK@endif
+@MK@ifeq ($(GITNUMTMP),)
+@MK@else
+EXT_FLAGS+= -DSVN_VERSION="${GITNUMTMP}"
+@MK@endif
+CFLAGS+=$(EXT_FLAGS)
+CXXFLAGS+=$(EXT_FLAGS)
+
diff --git a/autoclean.sh b/autoclean.sh
new file mode 100755
index 0000000..070ef85
--- /dev/null
+++ b/autoclean.sh
@@ -0,0 +1,25 @@
+#!/bin/sh
+
+chmod 755 $0 autogen.sh config.guess config.rpath config.status config.sub configure depcomp install-sh missing
+
+make -C palmos distclean
+rm -rf palmos/Debug/
+rm -rf palmos/Device/
+rm -f palmos/.dependencies*
+rm -f src/sections.h
+
+make clean
+make distclean
+
+rm -f *.o
+
+rm -f autoscan.log
+rm -f config.log
+rm -f config.status
+rm -f config.h
+rm -f Makefile
+rm -rf ./autom4te.cache/
+rm -f gmon.out
+
+#rm -f ./src/Makefile.in
+#rm -f ./Makefile.in
diff --git a/autogen.sh b/autogen.sh
new file mode 100755
index 0000000..eb759ab
--- /dev/null
+++ b/autogen.sh
@@ -0,0 +1,38 @@
+#!/bin/sh
+
+./autoclean.sh
+
+rm -f configure
+
+rm -f Makefile.in
+
+rm -f config.guess
+rm -f config.sub
+rm -f install-sh
+rm -f missing
+rm -f depcomp
+
+if [ 0 = 1 ]; then
+autoscan
+else
+
+touch NEWS
+touch README
+touch AUTHORS
+touch ChangeLog
+touch config.h.in
+
+#libtoolize --copy --force
+aclocal
+automake -a -c
+autoconf
+autoreconf -f -i -Wall,no-obsolete
+autoreconf -f -i -Wall,no-obsolete
+
+#./configure --enable-debug
+#./configure --prefix=/usr --includedir=/usr/include/libsnap/blank/
+
+#make clean
+#make
+
+fi
diff --git a/configure.ac b/configure.ac
new file mode 100644
index 0000000..8d370a7
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,94 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.61])
+AC_INIT(snap, 2.4, [BUG-REPORT-ADDRESS])
+AC_CONFIG_SRCDIR([snap-core/alg.cpp])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE(-Wall subdir-objects foreign color-tests dist-bzip2 parallel-tests)
+
+#magic for conditional check in Makefile:
+MK=''; AC_SUBST(MK)
+SED=sed
+
+# Checks for programs.
+AM_PROG_AR
+AC_PROG_CXX
+AC_PROG_CC
+AC_PROG_LN_S
+AC_PROG_CPP
+AC_PROG_INSTALL
+AC_PROG_MAKE_SET
+AC_PROG_LIBTOOL
+
+# Checks for libraries.
+LT_PREREQ([2.2])
+#LT_INIT([shared static])
+LT_INIT([disable-static])
+
+
+# FIXME: Replace `main' with a function in `-lgtest':
+AC_CHECK_LIB([gtest], [main])
+
+# debug
+AC_ARG_ENABLE([debug],
+	AS_HELP_STRING([--enable-debug],[Compile the debug version (default: disabled)]),
+	[enable_debug=$enableval],
+	[enable_debug=no])
+AM_CONDITIONAL([DEBUG], [test $enable_debug = "yes"])
+if test "x$enable_debug" = "xyes"; then
+  changequote({,})
+  CFLAGS=`echo "$CFLAGS" | $SED -e 's/-O[0-9s]*//g'`
+  CXXFLAGS=`echo "$CXXFLAGS" | $SED -e 's/-O[0-9s]*//g'`
+  changequote([,])
+  dnl add -O0 only if GCC or ICC is used
+  if test "$GCC" = "yes" || test "$ICC" = "yes"; then
+    CFLAGS="$CFLAGS -O0"
+    CXXFLAGS="$CXXFLAGS -O0"
+  fi
+else
+  changequote({,})
+  CFLAGS=`echo "$CFLAGS" | $SED -e 's/-g//g'`
+  CXXFLAGS=`echo "$CXXFLAGS" | $SED -e 's/-g//g'`
+  changequote([,])
+fi
+
+# Checks for header files.
+AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h limits.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h string.h sys/file.h sys/ioctl.h sys/mount.h sys/param.h sys/socket.h sys/time.h unistd.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_CHECK_HEADER_STDBOOL
+AC_C_INLINE
+AC_TYPE_INT32_T
+AC_TYPE_INT64_T
+AC_TYPE_MODE_T
+AC_TYPE_OFF_T
+AC_TYPE_PID_T
+AC_C_RESTRICT
+AC_TYPE_SIZE_T
+AC_TYPE_SSIZE_T
+AC_TYPE_UINT32_T
+AC_TYPE_UINT64_T
+AC_TYPE_UINT8_T
+AC_CHECK_TYPES([ptrdiff_t])
+
+# Checks for library functions.
+AC_FUNC_FORK
+AC_FUNC_MALLOC
+AC_FUNC_MKTIME
+AC_FUNC_MMAP
+AC_FUNC_REALLOC
+AC_FUNC_STRERROR_R
+AC_FUNC_STRTOD
+AC_CHECK_FUNCS([clock_gettime dup2 fdatasync floor ftruncate getcwd gethostbyaddr gethostbyname gettimeofday localtime_r memchr memmove memset mkdir munmap pow putenv socket sqrt strchr strdup strerror strrchr strstr strtol])
+
+AC_CONFIG_FILES([Makefile
+                 libsnap.pc \
+                 examples/Makefile
+                 glib-core/Makefile
+                 glib-adv/Makefile
+                 snap-core/Makefile
+                 snap-adv/Makefile
+                 snap-exp/Makefile
+                ])
+AC_OUTPUT
diff --git a/examples/Makefile.am b/examples/Makefile.am
new file mode 100644
index 0000000..ec5c194
--- /dev/null
+++ b/examples/Makefile.am
@@ -0,0 +1,243 @@
+
+AM_LDFLAGS=
+AM_CPPFLAGS=
+
+DEFS+= \
+    -I$(top_srcdir)/glib-core \
+    -I$(top_srcdir)/glib-adv \
+    -I$(top_srcdir)/snap-core \
+    -I$(top_srcdir)/snap-adv \
+    -I$(top_srcdir)/snap-exp \
+    -I$(top_builddir)/ \
+    `getconf LFS_CFLAGS` \
+    `getconf LFS64_CFLAGS` \
+    -D_GNU_SOURCE \
+    -D_FILE_OFFSET_BITS=64 \
+    -DHAVE_MMAP64=1 \
+    -DUSE_FINDHTML=1 \
+    $(NULL)
+
+AM_CPPFLAGS+= \
+    $(NULL)
+
+AM_LDFLAGS += \
+    -L$(top_builddir)/glib-core \
+    -L$(top_builddir)/glib-adv \
+    -L$(top_builddir)/snap-core \
+    -L$(top_builddir)/snap-adv \
+    -L$(top_builddir)/snap-exp \
+    -lsnap-adv -lsnap-core -lglib-core
+    #-lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+
+#AM_CPPFLAGS += `pkg-config --cflags libxml-2.0`
+#AM_LDFLAGS += `pkg-config --libs libxml-2.0`
+AM_CPPFLAGS += $(LIBXML2_CFLAGS)
+AM_LDFLAGS += $(LIBXML2_LDFLAGS) $(LIBXML2_LIBS)
+
+#AM_CPPFLAGS += `pkg-config --cflags libxslt`
+#AM_LDFLAGS += `pkg-config --libs libxslt`
+AM_CPPFLAGS += $(LIBXSLT_CFLAGS)
+AM_LDFLAGS += $(LIBXSLT_LDFLAGS) $(LIBXSLT_LIBS)
+
+#AM_LDFLAGS += -pthread
+
+if DEBUG
+# use "valgrind --tool=memcheck --leak-check=yes" to check memory leak, MemWatch will drag the program.
+#DEFS+=-DMEMWATCH
+DEFS+= -DDEBUG=1
+DEFS+= -DNDEBUG=1
+
+AM_LDFLAGS += -lbfd
+AM_CPPFLAGS+=-g -Wall
+
+else
+AM_CPPFLAGS+=-O3 -Wall
+endif
+
+#AM_CPPFLAGS+=-fpermissive
+
+
+EXT_FLAGS=
+@MK@GITNUMTMP=$(shell cd "$(top_srcdir)"; A=$$(git show | head -n 1 | awk '{print $$2}'); echo $${A:0:7}; cd - > /dev/null )
+#@MK@SVNNUMTMP=$(shell cd "$(top_srcdir)"; LC_ALL=C svn info | grep -i Revision | awk '{print $$2}'; cd - > /dev/null )
+#@MK@ifeq ($(SVNNUMTMP),)
+#EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+#@MK@else
+#EXT_FLAGS+= -DSVN_VERSION='"${SVNNUMTMP}"'
+#@MK@endif
+@MK@ifeq ($(GITNUMTMP),)
+@MK@else
+EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+@MK@endif
+DEFS+=$(EXT_FLAGS)
+
+#AM_CPPFLAGS+=$(EXT_FLAGS)
+
+
+
+bin_PROGRAMS=snapagmgen snapgraphgen snapkrongen
+
+OTHER_BIN=snaplshtest snapmultimodal snaptestconv snapzygote
+
+noinst_PROGRAMS=snapagmfit snapbigclam snapcascades snapcentrality snapcesna snapcircles snapcliques snapcoda snapcommunity snapconcomp snapflows snapforestfire snapgraphhash snapinfopath snapkcores snapkronem snapkronfit snapmagfit snapmaggen snapmkdatasets snapmotifs snapncpplot snapnetevol snapnetinf snapnetstat snaprandwalk snaprolx snaptestgraph
+
+snapagmfit_SOURCES= \
+    agmfit/agmfitmain.cpp \
+    $(NULL)
+
+snapagmgen_SOURCES= \
+    agmgen/agmgen.cpp \
+    $(NULL)
+
+snapbigclam_SOURCES= \
+    bigclam/bigclam.cpp \
+    $(NULL)
+
+snapcascades_SOURCES= \
+    cascades/cascades.cpp \
+    $(NULL)
+
+snapcentrality_SOURCES= \
+    centrality/centrality.cpp \
+    $(NULL)
+
+snapcesna_SOURCES= \
+    cesna/cesna.cpp \
+    $(NULL)
+
+snapcircles_SOURCES= \
+    circles/circles.cpp \
+    $(NULL)
+
+snapcliques_SOURCES= \
+    cliques/cliquesmain.cpp \
+    $(NULL)
+
+snapcoda_SOURCES= \
+    coda/coda.cpp \
+    $(NULL)
+
+snapcommunity_SOURCES= \
+    community/community.cpp \
+    $(NULL)
+
+snapconcomp_SOURCES= \
+    concomp/concomp.cpp \
+    $(NULL)
+
+
+snapflows_SOURCES= \
+    flows/flows.cpp \
+    $(NULL)
+
+#snapflows_CPPFLAGS =
+snapflows_LDFLAGS = $(DEFS) -fopenmp
+snapflows_LDADD = $(AM_LDFLAGS)
+
+
+
+snapforestfire_SOURCES= \
+    forestfire/forestfire.cpp \
+    #dummy.cpp \
+    $(NULL)
+
+# force the autoconf use g++ to link the c program with c++ lib
+dummy.cpp:
+	touch $@
+
+#snapforestfire_LDADD = $(top_builddir)/src/libsnap-core.la -lbfd -liberty -ldl
+snapforestfire_LDADD = $(AM_LDFLAGS)
+
+snapforestfire_CPPFLAGS = $(AM_CPPFLAGS)
+snapforestfire_LDFLAGS = $(AM_LDFLAGS)
+#snapforestfire_LDFLAGS = -lchsetdet -lcrc -lpf -lz
+#$(LIBPF_LDFLAGS) $(LIBCHSETDET_LDFLAGS) $(HUNSPELL_LDFLAGS) $(LIBXML2_LDFLAGS) $(LIBXSLT_LDFLAGS) $(LIBCRC_LDFLAGS) $(ZLIB_LDFLAGS)
+
+
+snapgraphgen_SOURCES= \
+    graphgen/graphgen.cpp \
+    $(NULL)
+
+snapgraphhash_SOURCES= \
+    graphhash/graphhash.cpp \
+    $(NULL)
+
+snapinfopath_SOURCES= \
+    infopath/infopath.cpp \
+    $(NULL)
+
+snapkcores_SOURCES= \
+    kcores/kcores.cpp \
+    $(NULL)
+
+snapkronem_SOURCES= \
+    kronem/kronem.cpp \
+    $(NULL)
+
+snapkronfit_SOURCES= \
+    kronfit/kronfit.cpp \
+    $(NULL)
+
+snapkrongen_SOURCES= \
+    krongen/krongen.cpp \
+    $(NULL)
+
+#snaplshtest_SOURCES= \
+    #lshtest/lshtest.cpp \
+    #$(NULL)
+
+snapmagfit_SOURCES= \
+    magfit/magfit.cpp \
+    $(NULL)
+
+snapmaggen_SOURCES= \
+    maggen/maggen.cpp \
+    $(NULL)
+
+snapmkdatasets_SOURCES= \
+    mkdatasets/mkdatasets.cpp \
+    $(NULL)
+
+snapmotifs_SOURCES= \
+    motifs/motifs.cpp \
+    $(NULL)
+
+#snapmultimodal_SOURCES= \
+    #multimodal/subgraph-exp.cpp \
+    #$(NULL)
+
+snapncpplot_SOURCES= \
+    ncpplot/ncpplot.cpp \
+    $(NULL)
+
+snapnetevol_SOURCES= \
+    netevol/netevol.cpp \
+    $(NULL)
+
+snapnetinf_SOURCES= \
+    netinf/netinf.cpp \
+    $(NULL)
+
+snapnetstat_SOURCES= \
+    netstat/netstat.cpp \
+    $(NULL)
+
+snaprandwalk_SOURCES= \
+    randwalk/randwalk.cpp \
+    $(NULL)
+
+snaprolx_SOURCES= \
+    rolx/testrolx.cpp \
+    $(NULL)
+
+#snaptestconv_SOURCES= \
+    #testconv/convtest.cpp \
+    #$(NULL)
+
+snaptestgraph_SOURCES= \
+    testgraph/testgraph.cpp \
+    $(NULL)
+
+#snapzygote_SOURCES= \
+    #zygote/zydemo.cpp \
+    #$(NULL)
diff --git a/glib-adv/Makefile.am b/glib-adv/Makefile.am
new file mode 100644
index 0000000..bf68ebd
--- /dev/null
+++ b/glib-adv/Makefile.am
@@ -0,0 +1,385 @@
+
+AM_CPPFLAGS=
+AM_LDFLAGS=
+
+# public headers
+# it will be moved to include/Makefile.am
+include_HEADERS = \
+    acquis.h \
+    adox.h \
+    aest.h \
+    amazon.h \
+    appsrv.h \
+    bde.h \
+    biling.h \
+    bix.h \
+    book.h \
+    bowactlearn.h \
+    bowbs.h \
+    bowclust.h \
+    bowfl.h \
+    bowflx.h \
+    bowlearn.h \
+    bowlinalg.h \
+    bowmatrix.h \
+    bowmd.h \
+    btalarms.h \
+    btaServer.h \
+    cache.h \
+    casino.h \
+    ccar.h \
+    cfyres.h \
+    cgi.h \
+    ciawfb.h \
+    conjgrad.h \
+    cordis.h \
+    corrgr.h \
+    cpdoc.h \
+    crawler.h \
+    cyc.h \
+    dm.h \
+    dmhd.h \
+    dmine.h \
+    dmoz.h \
+    dnet.h \
+    dzs.h \
+    email.h \
+    euproj.h \
+    exset.h \
+    fa.h \
+    flx.h \
+    ftrgen.h \
+    geoip.h \
+    gix.h \
+    gks.h \
+    gksmfc.h \
+    gksvcl.h \
+    gksvml.h \
+    gkswf.h \
+    google.h \
+    googlex.h \
+    graph.h \
+    gridvcl.h \
+    gsearch.h \
+    guid.h \
+    hashgenericmp.h \
+    hc.h \
+    hldoc.h \
+    infonet.h \
+    kernelmethods.h \
+    logreg.h \
+    lsionto.h \
+    md.h \
+    mdtr.h \
+    medline.h \
+    mg.h \
+    mindset.h \
+    mine.h \
+    mkcca.h \
+    mte.h \
+    mtr.h \
+    net.h \
+    netobj.h \
+    nlpwinlf.h \
+    nmen.h \
+    nmobj.h \
+    nntp.h \
+    nyta.h \
+    nytngrams.h \
+    odbc.h \
+    ontolight.h \
+    pest.h \
+    phrase.h \
+    pi.h \
+    postag.h \
+    prolog.h \
+    prologparser.h \
+    proxy.h \
+    rdbms.h \
+    roget.h \
+    sappsrv.h \
+    sch.h \
+    semspace.h \
+    sgraph.h \
+    skygrid.h \
+    smtp.h \
+    soap.h \
+    sock.h \
+    sock-new.h \
+    sqlite3.h \
+    sqlitedb.h \
+    ssch.h \
+    sskj.h \
+    ssqldm.h \
+    ssql.h \
+    stemming.h \
+    stopword.h \
+    strkernel.h \
+    strut.h \
+    subprocess.h \
+    svmbasic.h \
+    svmmodels.h \
+    svmPrLoqo.h \
+    tagcloud.h \
+    tb.h \
+    tbhc.h \
+    tbval.h \
+    term.h \
+    tmine.h \
+    tnt.h \
+    tql.h \
+    ts.h \
+    txtbs.h \
+    ultra.h \
+    valds.h \
+    valret.h \
+    vizmapgks.h \
+    vizmap.h \
+    wbmp.h \
+    webbsfetch.h \
+    webmb.h \
+    webnetobj.h \
+    webold.h \
+    webpgfetch.h \
+    websrv.h \
+    webtrv.h \
+    webtxtbs.h \
+    wikipedia.h \
+    wixexp.h \
+    wix.h \
+    wmine.h \
+    wordco.h \
+    wordnet.h \
+    xql.h \
+    yahoobs.h \
+    yahoodm.h \
+    yahooex.h \
+    zipcode.h \
+    $(NULL)
+
+# libglib:
+lib_LTLIBRARIES=libglib-adv.la
+
+OTHER_SOURCES= \
+    dmine.cpp \
+    tmine.cpp \
+    wmine.cpp \
+    acquis.cpp \
+    adox.cpp \
+    aest.cpp \
+    amazon.cpp \
+    appsrv.cpp \
+    bde.cpp \
+    biling.cpp \
+    bix.cpp \
+    book.cpp \
+    bowactlearn.cpp \
+    bowbs.cpp \
+    bowclust.cpp \
+    bowfl.cpp \
+    bowflx.cpp \
+    bowlearn.cpp \
+    bowlinalg.cpp \
+    bowmatrix.cpp \
+    bowmd.cpp \
+    btalarms.cpp \
+    btaserver.cpp \
+    casino.cpp \
+    ccar.cpp \
+    cfyres.cpp \
+    cgi.cpp \
+    ciawfb.cpp \
+    cordis.cpp \
+    corrgr.cpp \
+    cpdoc.cpp \
+    crawler.cpp \
+    cyc.cpp \
+    dm.cpp \
+    dmhd.cpp \
+    dmoz.cpp \
+    dnet.cpp \
+    dzs.cpp \
+    email.cpp \
+    euproj.cpp \
+    exset.cpp \
+    fa.cpp \
+    flx.cpp \
+    ftrgen.cpp \
+    geoip.cpp \
+    gix.cpp \
+    gks.cpp \
+    gksmfc.cpp \
+    gksvcl.cpp \
+    gksvml.cpp \
+    gkswf.cpp \
+    google.cpp \
+    googlex.cpp \
+    graph.cpp \
+    gridvcl.cpp \
+    gsearch.cpp \
+    guid.cpp \
+    hc.cpp \
+    hldoc.cpp \
+    infonet.cpp \
+    kernelmethods.cpp \
+    logreg.cpp \
+    lsionto.cpp \
+    md.cpp \
+    mdtr.cpp \
+    medline.cpp \
+    mg.cpp \
+    mkcca.cpp \
+    mte.cpp \
+    mtr.cpp \
+    net.cpp \
+    netobj.cpp \
+    nlpwinlf.cpp \
+    nmen.cpp \
+    nmobj.cpp \
+    nntp.cpp \
+    nyta.cpp \
+    nytngrams.cpp \
+    odbc.cpp \
+    ontolight.cpp \
+    pest.cpp \
+    phrase.cpp \
+    pi.cpp \
+    postag.cpp \
+    prolog.cpp \
+    prologparser.cpp \
+    proxy.cpp \
+    pww.cpp \
+    rdbms.cpp \
+    roget.cpp \
+    sappsrv.cpp \
+    sch.cpp \
+    semspace.cpp \
+    sgraph.cpp \
+    skygrid.cpp \
+    smtp.cpp \
+    soap.cpp \
+    sock.cpp \
+    sock-new.cpp \
+    sqlitedb.cpp \
+    ssch.cpp \
+    sskj.cpp \
+    ssql.cpp \
+    ssqldm.cpp \
+    stemming.cpp \
+    stopword.cpp \
+    strkernel.cpp \
+    strut.cpp \
+    subprocess.cpp \
+    svmbasic.cpp \
+    svmmodels.cpp \
+    svmPrLoqo.cpp \
+    tagcloud.cpp \
+    tb.cpp \
+    tbhc.cpp \
+    tbval.cpp \
+    term.cpp \
+    tnt.cpp \
+    tql.cpp \
+    ts.cpp \
+    txtbs.cpp \
+    ultra.cpp \
+    valds.cpp \
+    valret.cpp \
+    vizmap.cpp \
+    vizmapgks.cpp \
+    wbmp.cpp \
+    webbsfetch.cpp \
+    webmb.cpp \
+    webnetobj.cpp \
+    webold.cpp \
+    webpgfetch.cpp \
+    websrv.cpp \
+    webtrv.cpp \
+    webtxtbs.cpp \
+    wikipedia.cpp \
+    wix.cpp \
+    wixexp.cpp \
+    wordco.cpp \
+    wordnet.cpp \
+    xql.cpp \
+    yahoobs.cpp \
+    yahoodm.cpp \
+    yahooex.cpp \
+    zipcode.cpp \
+    $(NULL)
+
+libglib_adv_la_SOURCES= \
+    mine.cpp \
+    $(NULL)
+
+libglib_adv_la_CPPFLAGS=
+
+AM_CPPFLAGS+= \
+    $(NULL)
+
+DEFS+= \
+    -I$(top_srcdir)/glib-core \
+    -I$(top_srcdir)/glib-adv \
+    -I$(top_builddir)/ \
+    `getconf LFS_CFLAGS` \
+    `getconf LFS64_CFLAGS` \
+    -D_GNU_SOURCE \
+    -DHAVE_MMAP64=1 \
+    -I/usr/include/libiberty \
+    $(NULL)
+
+if DEBUG
+# use "valgrind --tool=memcheck --leak-check=yes" to check memory leak, MemWatch will drag the program.
+#DEFS+=-DMEMWATCH=1
+DEFS+= -DDEBUG=1
+DEFS+= -DNDEBUG=1
+
+AM_CPPFLAGS+=-g -Wall
+
+else
+AM_CPPFLAGS+=-O3
+endif
+
+AM_LDFLAGS += \
+    -L$(top_builddir)/glib-core \
+    -L$(top_builddir)/glib-adv \
+    $(top_builddir)/glib-core/libglib-core.la \
+    $(top_builddir)/glib-adv/libglib-adv.la \
+    #-lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+
+bin_PROGRAMS=testbase
+
+testbase_SOURCES= \
+    testBase.cpp \
+    base.cpp \
+    mine.cpp \
+    #dummy.cpp \
+    $(NULL)
+
+# force the autoconf use g++ to link the c program with c++ lib
+dummy.cpp:
+	touch $@
+
+#testbase_LDADD = -lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+testbase_LDADD = $(AM_LDFLAGS)
+
+testbase_CPPFLAGS = $(AM_CPPFLAGS)
+testbase_LDFLAGS = $(AM_LDFLAGS)
+#testbase_LDFLAGS = -lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+
+
+EXT_FLAGS=
+@MK@GITNUMTMP=$(shell cd "$(top_srcdir)"; A=$$(git show | head -n 1 | awk '{print $$2}'); echo $${A:0:7}; cd - > /dev/null )
+#@MK@SVNNUMTMP=$(shell cd "$(top_srcdir)"; LC_ALL=C svn info | grep -i Revision | awk '{print $$2}'; cd - > /dev/null )
+#@MK@ifeq ($(SVNNUMTMP),)
+#EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+#@MK@else
+#EXT_FLAGS+= -DSVN_VERSION='"${SVNNUMTMP}"'
+#@MK@endif
+@MK@ifeq ($(GITNUMTMP),)
+@MK@else
+EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+@MK@endif
+DEFS+=$(EXT_FLAGS)
+
+
diff --git a/glib-core/Makefile.am b/glib-core/Makefile.am
new file mode 100644
index 0000000..3a97a11
--- /dev/null
+++ b/glib-core/Makefile.am
@@ -0,0 +1,125 @@
+
+AM_CPPFLAGS=
+AM_LDFLAGS=
+
+# public headers
+# it will be moved to include/Makefile.am
+nobase_include_HEADERS = \
+    $(top_srcdir)/glib-core/base.h \
+    $(top_srcdir)/glib-core/bd.h \
+    $(top_srcdir)/glib-core/bits.h \
+    $(top_srcdir)/glib-core/blobbs.h \
+    $(top_srcdir)/glib-core/ds.h \
+    $(top_srcdir)/glib-core/dt.h \
+    $(top_srcdir)/glib-core/env.h \
+    $(top_srcdir)/glib-core/fl.h \
+    $(top_srcdir)/glib-core/gnuplot.h \
+    $(top_srcdir)/glib-core/hash.h \
+    $(top_srcdir)/glib-core/hashmp.h \
+    $(top_srcdir)/glib-core/html.h \
+    $(top_srcdir)/glib-core/http.h \
+    $(top_srcdir)/glib-core/json.h \
+    $(top_srcdir)/glib-core/linalg.h \
+    $(top_srcdir)/glib-core/lx.h \
+    $(top_srcdir)/glib-core/md5.h \
+    $(top_srcdir)/glib-core/os.h \
+    $(top_srcdir)/glib-core/priorityqueue.h \
+    $(top_srcdir)/glib-core/shash.h \
+    $(top_srcdir)/glib-core/ss.h \
+    $(top_srcdir)/glib-core/ssmp.h \
+    $(top_srcdir)/glib-core/stdafx.h \
+    $(top_srcdir)/glib-core/tm.cpp \
+    $(top_srcdir)/glib-core/tm.h \
+    $(top_srcdir)/glib-core/unicode.h \
+    $(top_srcdir)/glib-core/unicodestring.h \
+    $(top_srcdir)/glib-core/url.h \
+    $(top_srcdir)/glib-core/ut.h \
+    $(top_srcdir)/glib-core/wch.h \
+    $(top_srcdir)/glib-core/xfl.h \
+    $(top_srcdir)/glib-core/xmath.h \
+    $(top_srcdir)/glib-core/xml.h \
+    $(top_srcdir)/glib-core/xmlser.h \
+    $(top_srcdir)/glib-core/zipfl.h \
+    $(NULL)
+
+# libglib:
+lib_LTLIBRARIES=libglib-core.la
+#libglib_core_la_SOURCES= \
+    base.cpp \
+    bd.cpp \
+    bits.cpp \
+    blobbs.cpp \
+    dt.cpp \
+    env.cpp \
+    fl.cpp \
+    gnuplot.cpp \
+    hash.cpp \
+    html.cpp \
+    http.cpp \
+    json.cpp \
+    linalg.cpp \
+    lx.cpp \
+    md5.cpp \
+    os.cpp \
+    ss.cpp \
+    ssmp.cpp \
+    unicode.cpp \
+    unicodestring.cpp \
+    url.cpp \
+    ut.cpp \
+    wch.cpp \
+    xfl.cpp \
+    xmath.cpp \
+    xml.cpp \
+    zipfl.cpp \
+    $(NULL)
+libglib_core_la_SOURCES= \
+    base.cpp \
+    $(NULL)
+
+libglib_core_la_CPPFLAGS=
+
+AM_CPPFLAGS+= \
+    $(NULL)
+
+DEFS+= \
+    -I$(top_srcdir)/glib-core \
+    -I$(top_srcdir)/glib-adv \
+    -I$(top_srcdir)/snap-core \
+    -I$(top_srcdir)/snap-adv \
+    -I$(top_srcdir)/snap-exp \
+    -I$(top_builddir)/ \
+    `getconf LFS_CFLAGS` \
+    `getconf LFS64_CFLAGS` \
+    -D_GNU_SOURCE \
+    -DHAVE_MMAP64=1 \
+    -I/usr/include/libiberty \
+    $(NULL)
+
+if DEBUG
+# use "valgrind --tool=memcheck --leak-check=yes" to check memory leak, MemWatch will drag the program.
+#DEFS+=-DMEMWATCH=1
+DEFS+= -DDEBUG=1
+DEFS+= -DNDEBUG=1
+
+AM_CPPFLAGS+=-g -Wall
+
+else
+AM_CPPFLAGS+=-O3
+endif
+
+EXT_FLAGS=
+@MK@GITNUMTMP=$(shell cd "$(top_srcdir)"; A=$$(git show | head -n 1 | awk '{print $$2}'); echo $${A:0:7}; cd - > /dev/null )
+#@MK@SVNNUMTMP=$(shell cd "$(top_srcdir)"; LC_ALL=C svn info | grep -i Revision | awk '{print $$2}'; cd - > /dev/null )
+#@MK@ifeq ($(SVNNUMTMP),)
+#EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+#@MK@else
+#EXT_FLAGS+= -DSVN_VERSION='"${SVNNUMTMP}"'
+#@MK@endif
+@MK@ifeq ($(GITNUMTMP),)
+@MK@else
+EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+@MK@endif
+DEFS+=$(EXT_FLAGS)
+
+
diff --git a/libsnap.pc.in b/libsnap.pc.in
new file mode 100644
index 0000000..afad347
--- /dev/null
+++ b/libsnap.pc.in
@@ -0,0 +1,13 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libsnap
+URL: https://github.com/snap-stanford/snap.git
+Description: Stanford Network Analysis Platform (SNAP) is a general purpose, high performance system for analysis and manipulation of large networks
+Version: @PACKAGE_VERSION@
+Requires: 
+#Libs: -L${libdir} -lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+Libs: -L${libdir} -lsnap-adv -lsnap-core -lglib-core
+Cflags: -I${includedir}
diff --git a/snap-adv/Makefile.am b/snap-adv/Makefile.am
new file mode 100644
index 0000000..a879fa0
--- /dev/null
+++ b/snap-adv/Makefile.am
@@ -0,0 +1,89 @@
+
+AM_CPPFLAGS=
+AM_LDFLAGS=
+
+# public headers
+# it will be moved to include/Makefile.am
+nobase_include_HEADERS = \
+    $(top_srcdir)/snap-adv/agmattr.h \
+    $(top_srcdir)/snap-adv/agmdirected.h \
+    $(top_srcdir)/snap-adv/agmfast.h \
+    $(top_srcdir)/snap-adv/agmfit.h \
+    $(top_srcdir)/snap-adv/agm.h \
+    $(top_srcdir)/snap-adv/cascdynetinf.h \
+    $(top_srcdir)/snap-adv/cascnetinf.h \
+    $(top_srcdir)/snap-adv/circles.h \
+    $(top_srcdir)/snap-adv/cliques.h \
+    $(top_srcdir)/snap-adv/graphcounter.h \
+    $(top_srcdir)/snap-adv/kronecker.h \
+    $(top_srcdir)/snap-adv/mag.h \
+    $(top_srcdir)/snap-adv/ncp.h \
+    $(top_srcdir)/snap-adv/rolx.h \
+    $(top_srcdir)/snap-adv/subgraphenum.h \
+    $(NULL)
+
+# libsnap:
+lib_LTLIBRARIES=libsnap-adv.la
+libsnap_adv_la_SOURCES= \
+    agmattr.cpp \
+    agm.cpp \
+    agmdirected.cpp \
+    agmfast.cpp \
+    agmfit.cpp \
+    cascdynetinf.cpp \
+    cascnetinf.cpp \
+    cliques.cpp \
+    graphcounter.cpp \
+    kronecker.cpp \
+    mag.cpp \
+    ncp.cpp \
+    rolx.cpp \
+    subgraphenum.cpp \
+    $(NULL)
+
+libsnap_adv_la_CPPFLAGS=
+
+AM_CPPFLAGS+= \
+    $(NULL)
+
+DEFS+= \
+    -I$(top_srcdir)/glib-core \
+    -I$(top_srcdir)/glib-adv \
+    -I$(top_srcdir)/snap-core \
+    -I$(top_srcdir)/snap-adv \
+    -I$(top_srcdir)/snap-exp \
+    -I$(top_builddir)/ \
+    `getconf LFS_CFLAGS` \
+    `getconf LFS64_CFLAGS` \
+    -D_GNU_SOURCE \
+    -DHAVE_MMAP64=1 \
+    -I/usr/include/libiberty \
+    $(NULL)
+
+if DEBUG
+# use "valgrind --tool=memcheck --leak-check=yes" to check memory leak, MemWatch will drag the program.
+#DEFS+=-DMEMWATCH=1
+DEFS+= -DDEBUG=1
+DEFS+= -DNDEBUG=1
+
+AM_CPPFLAGS+=-g -Wall
+
+else
+AM_CPPFLAGS+=-O3
+endif
+
+EXT_FLAGS=
+@MK@GITNUMTMP=$(shell cd "$(top_srcdir)"; A=$$(git show | head -n 1 | awk '{print $$2}'); echo $${A:0:7}; cd - > /dev/null )
+#@MK@SVNNUMTMP=$(shell cd "$(top_srcdir)"; LC_ALL=C svn info | grep -i Revision | awk '{print $$2}'; cd - > /dev/null )
+#@MK@ifeq ($(SVNNUMTMP),)
+#EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+#@MK@else
+#EXT_FLAGS+= -DSVN_VERSION='"${SVNNUMTMP}"'
+#@MK@endif
+@MK@ifeq ($(GITNUMTMP),)
+@MK@else
+EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+@MK@endif
+DEFS+=$(EXT_FLAGS)
+
+
diff --git a/snap-core/Makefile.am b/snap-core/Makefile.am
new file mode 100644
index 0000000..818da9f
--- /dev/null
+++ b/snap-core/Makefile.am
@@ -0,0 +1,159 @@
+
+AM_CPPFLAGS=
+AM_LDFLAGS=
+
+# public headers
+# it will be moved to include/Makefile.am
+nobase_include_HEADERS = \
+    $(top_srcdir)/snap-core/alg.h \
+    $(top_srcdir)/snap-core/anf.h \
+    $(top_srcdir)/snap-core/attr.h \
+    $(top_srcdir)/snap-core/bfsdfs.h \
+    $(top_srcdir)/snap-core/bignet.h \
+    $(top_srcdir)/snap-core/centr.h \
+    $(top_srcdir)/snap-core/cmty.h \
+    $(top_srcdir)/snap-core/cncom.h \
+    $(top_srcdir)/snap-core/conv.h \
+    $(top_srcdir)/snap-core/coreper.h \
+    $(top_srcdir)/snap-core/ff.h \
+    $(top_srcdir)/snap-core/flow.h \
+    $(top_srcdir)/snap-core/gbase.h \
+    $(top_srcdir)/snap-core/ggen.h \
+    $(top_srcdir)/snap-core/ghash.h \
+    $(top_srcdir)/snap-core/gio.h \
+    $(top_srcdir)/snap-core/graph.h \
+    $(top_srcdir)/snap-core/graphmp.h \
+    $(top_srcdir)/snap-core/gstat.h \
+    $(top_srcdir)/snap-core/gsvd.h \
+    $(top_srcdir)/snap-core/gviz.h \
+    $(top_srcdir)/snap-core/kcore.h \
+    $(top_srcdir)/snap-core/network.h \
+    $(top_srcdir)/snap-core/networkmp.h \
+    $(top_srcdir)/snap-core/numpy.h \
+    $(top_srcdir)/snap-core/randwalk.h \
+    $(top_srcdir)/snap-core/Snap.h \
+    $(top_srcdir)/snap-core/statplot.h \
+    $(top_srcdir)/snap-core/stdafx.h \
+    $(top_srcdir)/snap-core/subgraph.h \
+    $(top_srcdir)/snap-core/table.h \
+    $(top_srcdir)/snap-core/timenet.h \
+    $(top_srcdir)/snap-core/triad.h \
+    $(top_srcdir)/snap-core/util.h \
+    $(NULL)
+
+# libsnap:
+lib_LTLIBRARIES=libsnap-core.la
+
+OTHER_SOURCES= \
+    alg.cpp \
+    anf.cpp \
+    attr.cpp \
+    centr.cpp \
+    cmty.cpp \
+    cncom.cpp \
+    coreper.cpp \
+    ff.cpp \
+    flow.cpp \
+    gbase.cpp \
+    ggen.cpp \
+    ghash.cpp \
+    gio.cpp \
+    graph.cpp \
+    graphmp.cpp \
+    gstat.cpp \
+    gsvd.cpp \
+    gviz.cpp \
+    network.cpp \
+    networkmp.cpp \
+    numpy.cpp \
+    statplot.cpp \
+    subgraph.cpp \
+    testSnap.cpp \
+    timenet.cpp \
+    table.cpp \
+    triad.cpp \
+    util.cpp \
+    $(NULL)
+
+libsnap_core_la_SOURCES= \
+    Snap.cpp \
+    $(NULL)
+
+libsnap_core_la_CPPFLAGS=
+
+AM_CPPFLAGS+= \
+    $(NULL)
+
+DEFS+= \
+    -I$(top_srcdir)/glib-core \
+    -I$(top_srcdir)/glib-adv \
+    -I$(top_srcdir)/snap-core \
+    -I$(top_srcdir)/snap-adv \
+    -I$(top_srcdir)/snap-exp \
+    -I$(top_builddir)/ \
+    `getconf LFS_CFLAGS` \
+    `getconf LFS64_CFLAGS` \
+    -D_GNU_SOURCE \
+    -DHAVE_MMAP64=1 \
+    -I/usr/include/libiberty \
+    $(NULL)
+
+if DEBUG
+# use "valgrind --tool=memcheck --leak-check=yes" to check memory leak, MemWatch will drag the program.
+#DEFS+=-DMEMWATCH=1
+DEFS+= -DDEBUG=1
+DEFS+= -DNDEBUG=1
+
+AM_CPPFLAGS+=-g -Wall
+
+else
+AM_CPPFLAGS+=-O3
+endif
+
+noinst_PROGRAMS=testsnap
+
+testsnap_SOURCES= \
+    testSnap.cpp \
+    #dummy.cpp \
+    $(NULL)
+
+# force the autoconf use g++ to link the c program with c++ lib
+dummy.cpp:
+	touch $@
+
+#testsnap_LDADD = -lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+testsnap_LDADD = $(AM_LDFLAGS)
+
+testsnap_CPPFLAGS = $(AM_CPPFLAGS)
+testsnap_LDFLAGS = $(AM_LDFLAGS)
+#testsnap_LDFLAGS = -lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+
+testsnap_LDFLAGS += \
+    -L$(top_builddir)/glib-core \
+    -L$(top_builddir)/glib-adv \
+    -L$(top_builddir)/snap-core \
+    -L$(top_builddir)/snap-adv \
+    -L$(top_builddir)/snap-exp \
+    $(top_builddir)/glib-core/libglib-core.la \
+    $(top_builddir)/snap-core/libsnap-core.la \
+    #$(top_builddir)/snap-adv/libsnap-adv.la \
+    #$(top_builddir)/snap-exp/libsnap-exp.la \
+    #$(top_builddir)/glib-adv/libglib-adv.la \
+    #-lsnap-exp -lsnap-adv -lsnap-core -lglib-adv -lglib-core
+
+
+EXT_FLAGS=
+@MK@GITNUMTMP=$(shell cd "$(top_srcdir)"; A=$$(git show | head -n 1 | awk '{print $$2}'); echo $${A:0:7}; cd - > /dev/null )
+#@MK@SVNNUMTMP=$(shell cd "$(top_srcdir)"; LC_ALL=C svn info | grep -i Revision | awk '{print $$2}'; cd - > /dev/null )
+#@MK@ifeq ($(SVNNUMTMP),)
+#EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+#@MK@else
+#EXT_FLAGS+= -DSVN_VERSION='"${SVNNUMTMP}"'
+#@MK@endif
+@MK@ifeq ($(GITNUMTMP),)
+@MK@else
+EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+@MK@endif
+DEFS+=$(EXT_FLAGS)
+
+
diff --git a/snap-exp/Makefile.am b/snap-exp/Makefile.am
new file mode 100644
index 0000000..4bb8f5b
--- /dev/null
+++ b/snap-exp/Makefile.am
@@ -0,0 +1,98 @@
+
+AM_CPPFLAGS=
+AM_LDFLAGS=
+
+# public headers
+# it will be moved to include/Makefile.am
+include_HEADERS = \
+    alternativetable.h \
+    arxiv.h \
+    centr-exp.h \
+    dblp.h \
+    imdbnet.h \
+    linkpred.h \
+    lsh.h \
+    memenet.h \
+    memes.h \
+    mmgraph-exp.h \
+    mxdag.h \
+    signnet.h \
+    sir.h \
+    spinn3r.h \
+    trawling.h \
+    wgtnet.h \
+    wikinet.h \
+    $(NULL)
+
+# libsnap:
+lib_LTLIBRARIES=libsnap-exp.la
+
+OHTER_SOURCES= \
+    alternativetable.cpp \
+    $(NULL)
+
+libsnap_exp_la_SOURCES= \
+    arxiv.cpp \
+    centr-exp.cpp \
+    dblp.cpp \
+    imdbnet.cpp \
+    linkpred.cpp \
+    lsh.cpp \
+    memenet.cpp \
+    memes.cpp \
+    mmgraph-exp.cpp \
+    mxdag.cpp \
+    signnet.cpp \
+    sir.cpp \
+    spinn3r.cpp \
+    trawling.cpp \
+    wgtnet.cpp \
+    wikinet.cpp \
+    $(NULL)
+
+libsnap_exp_la_CPPFLAGS=
+
+AM_CPPFLAGS+= \
+    $(NULL)
+
+DEFS+= \
+    -I$(top_srcdir)/glib-core \
+    -I$(top_srcdir)/glib-adv \
+    -I$(top_srcdir)/snap-core \
+    -I$(top_srcdir)/snap-adv \
+    -I$(top_srcdir)/snap-exp \
+    -I$(top_builddir)/ \
+    `getconf LFS_CFLAGS` \
+    `getconf LFS64_CFLAGS` \
+    -D_GNU_SOURCE \
+    -DHAVE_MMAP64=1 \
+    -I/usr/include/libiberty \
+    $(NULL)
+
+if DEBUG
+# use "valgrind --tool=memcheck --leak-check=yes" to check memory leak, MemWatch will drag the program.
+#DEFS+=-DMEMWATCH=1
+DEFS+= -DDEBUG=1
+DEFS+= -DNDEBUG=1
+
+AM_CPPFLAGS+=-g -Wall
+
+else
+AM_CPPFLAGS+=-O3
+endif
+
+EXT_FLAGS=
+@MK@GITNUMTMP=$(shell cd "$(top_srcdir)"; A=$$(git show | head -n 1 | awk '{print $$2}'); echo $${A:0:7}; cd - > /dev/null )
+#@MK@SVNNUMTMP=$(shell cd "$(top_srcdir)"; LC_ALL=C svn info | grep -i Revision | awk '{print $$2}'; cd - > /dev/null )
+#@MK@ifeq ($(SVNNUMTMP),)
+#EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+#@MK@else
+#EXT_FLAGS+= -DSVN_VERSION='"${SVNNUMTMP}"'
+#@MK@endif
+@MK@ifeq ($(GITNUMTMP),)
+@MK@else
+EXT_FLAGS+= -DSVN_VERSION='"${GITNUMTMP}"'
+@MK@endif
+DEFS+=$(EXT_FLAGS)
+
+
