diff --git a/configure b/configure
index b42989b..ea48217 100755
--- a/configure
+++ b/configure
@@ -867,6 +867,9 @@ Optional Features:
   --disable-mailcheck     disable mail checking
   --enable-mailcheck=DIR  enable checking for mail in directory DIR
                           (needed only if configure guesses incorrectly)
+  --enable-atcp           enable ATCP support
+  --enable-gmcp           enable GMCP support
+  --enable-option102      enable telnet option 102 support
   --disable-history       disable /recall and other history features
   --disable-process       disable /quote and /repeat
   --disable-float         disable floating point arithmetic and functions
@@ -1409,6 +1412,30 @@ else
   enable_mailcheck=yes
 fi;
 
+# Check whether --enable-atcp or --disable-atcp was given.
+if test "${enable_atcp+set}" = set; then
+  enableval="$enable_atcp"
+
+else
+  enable_atcp=no
+fi;
+
+# Check whether --enable-gmcp or --disable-gmcp was given.
+if test "${enable_gmcp+set}" = set; then
+  enableval="$enable_gmcp"
+
+else
+  enable_gmcp=no
+fi;
+
+# Check whether --enable-option102 or --disable-option102 was given.
+if test "${enable_option102+set}" = set; then
+  enableval="$enable_option102"
+
+else
+  enable_option102=no
+fi;
+
 # User feature options
 # Check whether --enable-history or --disable-history was given.
 if test "${enable_history+set}" = set; then
@@ -8771,6 +8798,18 @@ fi
 
 if test "$enable_inet6"   = "yes"; then cat >>confdefs.h <<\_ACEOF
 #define ENABLE_INET6 1
+_ACEOF
+  fi
+if test "$enable_atcp"   = "yes"; then cat >>confdefs.h <<\_ACEOF
+#define ENABLE_ATCP 1
+_ACEOF
+  fi
+if test "$enable_gmcp"   = "yes"; then cat >>confdefs.h <<\_ACEOF
+#define ENABLE_GMCP 1
+_ACEOF
+  fi
+if test "$enable_option102"   = "yes"; then cat >>confdefs.h <<\_ACEOF
+#define ENABLE_OPTION102 1
 _ACEOF
   fi
 if test "$enable_history" = "no"; then cat >>confdefs.h <<\_ACEOF
diff --git a/configure.in b/configure.in
index 1e347e3..40fdc1a 100644
--- a/configure.in
+++ b/configure.in
@@ -74,6 +74,15 @@ AC_ARG_ENABLE(mailcheck,
   --enable-mailcheck=DIR  enable checking for mail in directory DIR
                           (needed only if configure guesses incorrectly)],
     , enable_mailcheck=yes)
+AC_ARG_ENABLE(atcp,
+[  --enable-atcp     enable ATCP support,
+    , enable_atcp=no)
+AC_ARG_ENABLE(gmcp,
+[  --enable-gmcp     enable GMCP support,
+    , enable_gmcp=no)
+AC_ARG_ENABLE(option102,
+[  --enable-option102     enable 102 option support,
+    , enable_option102=no)
 
 # User feature options
 AC_ARG_ENABLE(history,
@@ -705,6 +714,9 @@ fi
 dnl ### write variables
 
 if test "$enable_inet6"   = "yes"; then AC_DEFINE(ENABLE_INET6)  fi
+if test "$enable_atcp"    = "yes"; then AC_DEFINE(ENABLE_ATCP)  fi
+if test "$enable_gmcp"    = "yes"; then AC_DEFINE(ENABLE_GMCP)  fi
+if test "$enable_option102"  = "yes"; then AC_DEFINE(ENABLE_OPTION102)  fi
 if test "$enable_history" = "no"; then AC_DEFINE(NO_HISTORY)  fi
 if test "$enable_process" = "no"; then AC_DEFINE(NO_PROCESS)  fi
 if test "$enable_float"   = "no"; then AC_DEFINE(NO_FLOAT)    fi
diff --git a/configure.in.orig b/configure.in.orig
new file mode 100644
index 0000000..1e347e3
--- /dev/null
+++ b/configure.in.orig
@@ -0,0 +1,744 @@
+dnl
+dnl  TinyFugue - programmable mud client
+dnl  Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2002, 2003, 2004, 2005, 2006-2007 Ken Keys
+dnl
+dnl  TinyFugue (aka "tf") is protected under the terms of the GNU
+dnl  General Public License.  See the file "COPYING" for details.
+dnl
+dnl  DO NOT EDIT THIS FILE.
+dnl  Any configuration changes should be made to the unix/Config file.
+dnl
+
+AC_REVISION($Id: configure.in,v 35000.61 2007/01/13 23:12:35 kkeys Exp $)
+
+dnl Note: autoconf uses <<EOF, so we use <<END instead.
+
+dnl ### Initialization variables.
+
+AC_INIT(src/tf.h)
+
+SOCKS=''
+OTHER_OBJS=""
+TFVER=`sed -ne 's/^TFVER=\(.*\)/\1/p' src/vars.mak`
+TFVERSION=`sed -n -e '/Fugue version/s/^.*"\(.*\)".*$/\1/p' src/main.c`
+
+AC_CONFIG_HEADER(src/tfconfig.h)
+
+AC_PREFIX_DEFAULT(`
+    if test -w /usr/local/bin && test -w /usr/local/share; then
+	echo "/usr/local"
+    elif uname -s | egrep BeOS >/dev/null 2>&1; then
+	# prefix according to Steven Black <steven@be.com>
+	echo "$HOME/config"
+    else
+	echo "$HOME"
+    fi
+`)
+
+AC_SUBST(TFVERSION)
+AC_MSG_NOTICE([Configuring $TFVERSION])
+
+# User installation options
+AC_ARG_ENABLE(version,
+[  --enable-version        insert version number into names of installed files
+                          (equivalent to --program-suffix=\"-${TFVER}\")],
+    , enable_version=default)
+AC_ARG_ENABLE(symlink,
+[  --enable-symlink[=NAME] make a symlink NAME to the executable
+                          [NAME=BINDIR/tf]],
+    , enable_symlink=default)
+AC_ARG_ENABLE(core,
+[  --enable-core           enable debugging core files],
+    , enable_core=default)
+
+AC_ARG_ENABLE(ssl,
+[  --disable-ssl           disable SSL support],
+    , enable_ssl=yes)
+AC_ARG_ENABLE(getaddrinfo,
+[  --enable-getaddrinfo    enable getaddrinfo() (if configure complains)
+  --disable-getaddrinfo   disable getaddrinfo() (implies --disable-inet6)],
+    , enable_getaddrinfo=default)
+AC_ARG_ENABLE(inet6,
+[  --disable-inet6         disable IPv6 support],
+    , enable_inet6=yes)
+AC_ARG_ENABLE(termcap,
+[  --disable-termcap       use hardcoded vt100 codes instead of termcap
+  --enable-termcap=LIB    enable termcap with library LIB (e.g., "ncurses")
+                          (needed only if configure guesses incorrectly)],
+    , enable_termcap=default)
+AC_ARG_ENABLE(256colors,
+[  --disable-256colors     disable 256 color support (may reduce memory use)],
+    , enable_256colors=yes)
+AC_ARG_ENABLE(mailcheck,
+[  --disable-mailcheck     disable mail checking
+  --enable-mailcheck=DIR  enable checking for mail in directory DIR
+                          (needed only if configure guesses incorrectly)],
+    , enable_mailcheck=yes)
+
+# User feature options
+AC_ARG_ENABLE(history,
+[  --disable-history       disable /recall and other history features],
+    , enable_history=yes)
+AC_ARG_ENABLE(process,
+[  --disable-process       disable /quote and /repeat],
+    , enable_process=yes)
+AC_ARG_ENABLE(float,
+[  --disable-float         disable floating point arithmetic and functions],
+    , enable_float=yes)
+
+AC_ARG_WITH(incdirs,
+[  --with-incdirs=DIRS     search for include files in DIRS])
+AC_ARG_WITH(libdirs,
+[  --with-libdirs=DIRS     search for libraries in DIRS])
+AC_ARG_WITH(inclibdirs,
+[  --with-inclibdirs=DIRS  same as --with-incdirs=DIRS --with-libdirs=DIRS])
+AC_ARG_WITH(inclibpfx,
+[  --with-inclibpfx=DIRS   same, but appends '/include' and '/lib'])
+AC_ARG_WITH(incdir) dnl because I never remember if it's singular or plural
+AC_ARG_WITH(libdir) dnl because I never remember if it's singular or plural
+AC_ARG_WITH(inclibdir) dnl because I never remember if it's singular or plural
+
+
+# Developer options
+# --enable-development implies --enable-core --disable-symlink
+AC_ARG_ENABLE(development, , , enable_development=default)
+AC_ARG_ENABLE(dmalloc, , , enable_dmalloc=no)
+
+AC_MSG_NOTICE([])
+
+if test "$enable_development" = "default"; then
+    if test -d CVS; then
+	enable_development=yes
+    else
+	enable_development=no
+    fi
+fi
+
+if test "$enable_development" = "yes"; then
+    AC_MSG_NOTICE([Development version.])
+elif echo $TFVERSION | egrep "alpha" >/dev/null 2>&1; then
+cat <<END
+This is an alpha version, and so may not be fully tested on some platforms.
+With the new features comes the possibility of new bugs.  If you don't want
+to deal with this, get the latest stable or gamma version.
+
+END
+fi
+
+if test "$enable_core" = "default"; then
+    enable_core=$enable_development
+fi
+
+if test "$enable_version" = "default"; then
+    enable_version=$enable_development
+fi
+
+if test "$enable_development" = "yes"; then
+    if test "$enable_symlink" = "default"; then
+	enable_symlink=no
+    fi
+    if test -z "${CC}"; then
+	AC_CHECK_PROGS(CC, tfcc gcc-anal)
+    fi
+else
+    AC_DEFINE(NDEBUG)
+fi
+
+if test "$enable_core" = "yes"; then
+    AC_MSG_NOTICE([Core dumps enabled.])
+    CFLAGS="${CFLAGS} -g"
+    STRIP=":"
+else
+    AC_MSG_NOTICE([Core dumps disabled.])
+    AC_DEFINE(DISABLE_CORE)
+fi
+
+
+dnl XXX option: TTYDRIVER
+
+
+UNAME=`{ uname -s && uname -v && uname -r || uname -a; } 2>/dev/null`
+UNAME=`echo $UNAME`  # remove newlines
+AC_SUBST(UNAME)
+#AC_CYGWIN
+
+dnl ########### programs ############
+
+AC_PROG_CC
+AC_PROG_GCC_TRADITIONAL
+dnl XXX STD_C=1, if compiler is standard
+
+dnl XXX
+dnl ${CC} ${CCFLAGS} -c symtest.c >symtest.out 2>&1 || {
+dnl     echo
+dnl     cat symtest.out
+dnl     echo
+dnl     echo "## The messages above indicate one of these configuration problems:"
+dnl     echo "##   1. the compiler is not installed correctly;"
+dnl     echo "##   2. you do not have permission to execute the compiler; or"
+dnl     echo "##   3. CCFLAGS='${CCFLAGS}' in unix/Config is invalid."
+dnl     echo "## In any case, this is a local problem that can only be"
+dnl     echo "## solved by you or a system administrator, so don't ask me."
+dnl     echo
+dnl     exit 1
+dnl }
+
+dnl XXX AC_AIX
+
+AC_PROG_MAKE_SET
+
+##if test "$enable_core" = "no"; then
+##    AC_CHECK_PROG(STRIP, strip, strip, :)
+##fi
+AC_SUBST(STRIP)
+
+AC_CHECK_PROG(RANLIB, ranlib, ranlib, :)
+
+
+dnl ########### compiler characteristics ############
+
+AC_CHECK_SIZEOF(short)
+AC_CHECK_SIZEOF(int)
+AC_CHECK_SIZEOF(long)
+
+if test "$GCC" = "yes"; then
+    # gcc may generate a warning for "inline", so use "__inline__" instead.
+    AC_MSG_CHECKING([for inline])
+    AC_MSG_RESULT([yes])
+    AC_DEFINE(inline, __inline__)
+else
+    AC_C_INLINE
+fi
+
+
+dnl ########### libraries ############
+
+dnl ### Library testing.
+dnl # If libfoo.a make references to libbar.a, the order must be "-lfoo -lbar".
+dnl # So we test incrementally, building the list from right to left.
+dnl # Dynix/ptx needs: -lsocket -linet -lnsl
+dnl # SysV needs: -lsocket -lnsl
+
+
+dnl TF_DIRS(src, dst[, prefix[, suffix]])
+AC_DEFUN(TF_DIRS, [
+    if test "${$1}" != "no" && test "${$1}" != ""; then
+        for dir in ${$1}; do
+            $2="${$2} $3${dir}$4"
+        done
+    fi
+])
+
+TF_DIRS(with_incdirs, CPPFLAGS, -I)
+TF_DIRS(with_incdir, CPPFLAGS, -I)
+TF_DIRS(with_inclibdirs, CPPFLAGS, -I)
+TF_DIRS(with_inclibdir, CPPFLAGS, -I)
+TF_DIRS(with_inclibpfx, CPPFLAGS, -I, /include)
+
+LIBDIRS=""
+TF_DIRS(with_libdirs, LIBDIRS, -L)
+TF_DIRS(with_libdir, LIBDIRS, -L)
+TF_DIRS(with_inclibdirs, LIBDIRS, -L)
+TF_DIRS(with_inclibdir, LIBDIRS, -L)
+TF_DIRS(with_inclibpfx, LIBDIRS, -L, /lib)
+
+dnl Must append LIBDIRS to LDFLAGS now so it's present for AC_CHECK_LIB.
+dnl (LIBDIRS will not work in the OTHER-LIBRARIES argument of AC_CHECK_LIB
+dnl on all platforms since it will _follow_ the -l option for the library
+dnl being tested.)
+LDFLAGS="$LDFLAGS $LIBDIRS"
+
+
+AC_SEARCH_LIBS(select, bsd, ,
+    AC_MSG_ERROR([TF can not work without select().]))
+
+dnl # gethostbyname may not be in default libraries.
+dnl # QNX keeps gethostbyname in lsocket.
+AC_SEARCH_LIBS(gethostbyname, bsd nsl_s nsl resolv socket, ,
+    AC_MSG_WARN([Host name resolution will not be available.]))
+
+dnl ### If -linet exists, assume we need it.
+AC_CHECK_LIB(inet, main)
+
+dnl ### If -lnet exists, assume we need it.
+AC_CHECK_LIB(net, main)
+
+dnl ## If we haven't found connect(), look for -lsocket.
+dnl ## Note: on IRIX 5, -lsocket exists, but we mustn't use its gethostbyname().
+AC_SEARCH_LIBS(connect, socket)
+
+
+dnl XXX --enable-socks
+dnl if test "$enable_socks" != "no" ; then
+dnl     # SOCKS uses res_init(), so we need -lresolv if there is one.
+dnl     AC_SEARCH_LIBS(res_init, resolv)
+dnl     AC_SEARCH_LIBS(XXX, socks5 "-lsocks5 -L/usr/local/lib" \
+dnl 	socks "-lsocks -L/usr/local/lib")
+dnl     AC_CHECK_HEADERS(socks.h) dnl -I/usr/local/include
+dnl     echo "#define SOCKS ${SOCKS}" >&4
+dnl     if test -n "$SOCKS_NONBLOCK" ; then
+dnl         echo "#define SOCKS_NONBLOCK" >&4
+dnl     fi
+dnl fi
+
+
+dnl ### I'm guessing setlocale() is in libintl on some systems, if not in libc.
+AC_SEARCH_LIBS(setlocale, intl, ,
+    AC_MSG_WARN([Locales will not be supported.]))
+
+dnl ### OpenSSL
+if test "$enable_ssl" = "yes"; then
+    ok=0
+    old_LIBS="$LIBS"
+    old_CFLAGS="$CFLAGS"
+    old_CPPFLAGS="$CPPFLAGS"
+    while true; do
+	dnl -lssl needs -lcrypto
+	dnl Try in default locations first, then /usr/local/ssl
+	LIBS="$LIBS -lssl -lcrypto"
+	AC_MSG_CHECKING([for libcrypto and libssl])
+	AC_TRY_LINK_FUNC(SSL_new, AC_MSG_RESULT([yes]),
+	    CFLAGS="$CFLAGS -L/usr/local/ssl/lib";
+	    CPPFLAGS="-I/usr/local/ssl/include $CPPFLAGS";
+	    AC_TRY_LINK_FUNC(SSL_new, AC_MSG_RESULT([/usr/local/ssl]),
+		AC_MSG_RESULT([no]); break))
+	dnl Red Hat 9 and Yellow Dog Linux have ssl.h in a standard place,
+	dnl but it depends on krb5.h which isn't in a standard place.
+	AC_MSG_CHECKING(for ssl kerberos dependency)
+	if test -r /usr/kerberos/include/krb5.h; then
+	    AC_MSG_RESULT([yes])
+	    CPPFLAGS="-I/usr/kerberos/include $CPPFLAGS"
+	else
+	    AC_MSG_RESULT([no])
+	fi
+	AC_CHECK_HEADER(openssl/ssl.h, , break)
+	AC_DEFINE(HAVE_SSL)
+	ok=1
+	break
+    done
+    if test "$ok" = "0"; then
+	AC_MSG_RESULT([ssl support will not be enabled.])
+	LIBS="$old_LIBS"
+	CFLAGS="$old_CFLAGS"
+	CPPFLAGS="$old_CPPFLAGS"
+    fi
+fi
+
+dnl ### test termcap.
+dnl # At least one system (Red Hat Linux) has a broken ncurses and a working
+dnl # termcap, so we try termcap before ncurses.
+
+terminal_hardcode="TERM_vt100";
+
+dnl # Cygwin may not have termcap at all, but it only supports ANSI emulation
+dnl # anyway, so we hardcode that (unless it was overridden).
+if test "$CYGWIN" = "yes"; then
+    terminal_hardcode="TERM_ansi";
+    if test "$enable_termcap" = "default"; then
+	enable_termcap="no";
+    fi
+fi
+
+if test "$enable_termcap" = "default"; then
+    enable_termcap="yes";
+fi
+
+if test "$enable_termcap" = "no"; then
+    AC_DEFINE_UNQUOTED(HARDCODE, $terminal_hardcode)
+else
+    if test "$enable_termcap" = "yes"; then enable_termcap=""; fi
+    AC_SEARCH_LIBS(tgetent, $enable_termcap termcap ncurses curses,
+	AC_DEFINE(TERMCAP)
+    ,
+	AC_DEFINE_UNQUOTED(HARDCODE, $terminal_hardcode)
+	AC_MSG_WARN([Hardcoding terminal codes.]))
+fi
+dnl XXX check for debian linux's broken termcap
+
+
+if test "$enable_256colors" = "yes"; then
+    AC_DEFINE(NCOLORS, 256)
+fi
+
+
+if test "$enable_float" = "yes"; then
+    AC_SEARCH_LIBS(sqrt, m)
+fi
+
+AC_CHECK_LIB(z, inflate)
+
+AC_CHECK_LIB(pcre, pcre_compile, :, [
+    AC_MSG_NOTICE([Note: will use old copy of pcre distributed with tf]);
+    PCRE=pcre; LDFLAGS="${LDFLAGS} -Lpcre-2.08"; ])
+AC_SUBST(PCRE)
+
+
+dnl ########### headers ############
+
+AC_HEADER_STDC
+AC_CHECK_HEADERS(unistd.h memory.h sys/select.h)
+AC_HEADER_SYS_WAIT
+
+dnl ### For optional language support.
+AC_CHECK_HEADERS(locale.h, ,
+    AC_MSG_WARN([Locales will not be supported.]))
+
+dnl ### Find pwd.h
+AC_CHECK_HEADERS(pwd.h, ,
+AC_MSG_WARN([Filename '~user' expansion will not be supported.]))
+
+dnl ### Find zlib.h
+AC_CHECK_HEADERS(zlib.h)
+
+
+dnl TF_SEARCH_HEADERS(SYMBOL, HEADERS... [, DO-IF-FOUND [, DO-IF-NOT-FOUND]])
+dnl Searches for each header in HEADERS, and defines SYMBOL to the first one
+dnl found.
+AC_DEFUN(TF_SEARCH_HEADERS, [
+    found=0;
+    for f in $2; do
+	AC_CHECK_HEADERS($f,
+	    AC_DEFINE_UNQUOTED($1, <$f>)
+	    found=1
+	    break)
+	if test $found -eq 1; then break; fi
+    done
+    if test $found -eq 1; then
+	:; $3
+    else
+	:; $4
+    fi
+    unset found
+])
+
+
+dnl ### Find internet structure header
+TF_SEARCH_HEADERS(NETINET_IN_H, netinet/in.h sys/in.h sys/netinet/in.h, ,
+AC_MSG_WARN([I will use my own internet structures.  Good luck.]))
+
+dnl ### Find internet address header
+TF_SEARCH_HEADERS(ARPA_INET_H, arpa/inet.h sys/inet.h)
+
+dnl ### Find nameser header
+dnl TF_SEARCH_HEADERS(NAMESER_H, arpa/nameser.h nameser.h)
+
+dnl ### Find netdb header
+TF_SEARCH_HEADERS(NETDB_H, netdb.h sys/netdb.h, ,
+    AC_MSG_ERROR([can't find netdb.h]))
+
+AC_CACHE_CHECK([whether struct sockaddr has sa_len], tf_cv_sa_len,
+    AC_TRY_COMPILE([
+#include<sys/types.h>
+#include <sys/socket.h>],
+        [struct sockaddr sa; return sa.sa_len;],
+        tf_cv_sa_len=yes,
+	tf_cv_sa_len=no))
+
+if test "${tf_cv_sa_len}" = "yes"; then
+    AC_DEFINE(HAVE_SOCKADDR_SA_LEN)
+fi
+
+
+dnl ### Figure out which terminal driver to use.
+
+AC_CHECK_HEADERS(termios.h termio.h sgtty.h, break)
+
+dnl # Some brain damaged systems (Xenix) need <sys/ptem.h> for struct winsize.
+AC_EGREP_HEADER([struct winsize], sys/ptem.h, AC_DEFINE(NEED_PTEM_H))
+
+
+dnl ########### typedefs ############
+
+dnl TF_CHECK_TYPE(TYPE, DEFAULT [, OTHER_HEADERS])
+dnl ...because AC_CHECK_TYPE doesn't have OTHER_HEADERS
+AC_DEFUN(TF_CHECK_TYPE,
+[AC_REQUIRE([AC_HEADER_STDC])dnl
+AC_MSG_CHECKING(for $1)
+AC_CACHE_VAL(ac_cv_type_$1,
+[AC_EGREP_CPP(dnl
+changequote(<<,>>)dnl
+<<(^|[^a-zA-Z_0-9])$1[^a-zA-Z_0-9]>>dnl
+changequote([,]), [
+#if STDC_HEADERS
+#include <stdlib.h>
+#include <stddef.h>
+#endif
+$3
+], ac_cv_type_$1=yes, ac_cv_type_$1=no)])dnl
+AC_MSG_RESULT($ac_cv_type_$1)
+if test $ac_cv_type_$1 = no; then
+  AC_DEFINE($1, $2)
+fi
+])
+
+
+AC_TYPE_SIGNAL
+AC_TYPE_PID_T
+AC_TYPE_SIZE_T
+AC_CHECK_TYPE(time_t, long)
+TF_CHECK_TYPE(socklen_t, int, [
+#include <sys/types.h>
+#include <sys/socket.h>
+])
+
+
+dnl ########### structures ############
+
+
+dnl ########### functions ############
+
+dnl # SCO keeps strftime() in -lintl
+AC_FUNC_STRFTIME
+
+dnl # h_errno is a variable, not a function.  But AC_CHECK_FUNCS only checks
+dnl # that the symbol is defined, so this works.
+AC_CHECK_FUNCS(h_errno)
+
+dnl # required standard functions
+AC_CHECK_FUNCS(strstr strtol, ,
+    AC_MSG_ERROR([Missing required standard function.]))
+dnl # optional functions
+AC_CHECK_FUNCS(bcopy bzero connect fileno getcwd \
+    gethostname gethostbyname getipnodebyname \
+    getpwnam gettimeofday getwd hstrerror index inet_aton)
+
+if test "$enable_getaddrinfo" = "default"; then
+    if test `uname -s` = 'Darwin'; then
+	AC_MSG_WARN([getaddrinfo() may be broken, so IPv6 support is disabled.  Use --enable-getaddrinfo to override.])
+	enable_getaddrinfo=no
+    else
+	enable_getaddrinfo=yes
+    fi
+fi
+if test "$enable_getaddrinfo" = "no"; then
+    enable_inet6=no
+else
+    AC_CHECK_FUNCS(getaddrinfo gai_strerror)
+fi
+
+AC_CHECK_FUNCS(kill memcpy memset raise setlocale setrlimit sigaction \
+    srand srandom \
+    strcasecmp strchr strcmpi strcspn strerror stricmp strtod tzset waitpid)
+
+dnl # override a few values
+if test "$CYGWIN" = "yes"; then
+    AC_DEFINE(HAVE_H_ERRNO, [0  /* h_errno is broken in cygwin32 b18. */])
+fi
+
+if test "$enable_inet6" = "yes"; then
+    AC_MSG_CHECKING([for IPv6 address structure])
+    for type in in6_addr in_addr6; do
+	AC_TRY_COMPILE([
+#include <sys/types.h>
+#include <sys/socket.h>
+#include NETINET_IN_H
+],
+	    [
+#ifndef AF_INET6
+# error AF_INET6 not defined
+#endif
+	    struct ${type} foo;
+	    ],
+	    AC_DEFINE_UNQUOTED(IN6_ADDR, $type)
+	    AC_MSG_RESULT([$type])
+	    break)
+    done
+fi
+
+
+dnl ########### system services ############
+
+dnl # These should come after AC_PROG_CC.
+AC_EXEEXT
+AC_OBJEXT
+
+dnl ### Find mail directory by looking at $MAIL, then in the usual places.
+if test "$enable_mailcheck" = "no"; then
+    MAILDIR=""
+elif test "$enable_mailcheck" = "yes"; then
+    AC_MSG_CHECKING([location of mail directory])
+    if test -n "$MAIL" ; then
+        # Not every system has dirname.  sigh.
+        changequote(, )dnl We need brackets for the regexp.
+        MAILDIR=`echo $MAIL | sed 's;/[^/]*$;;'`
+        changequote([, ])dnl Restore bracket quotes.
+    elif test -d /usr/spool/mail ; then
+        MAILDIR="/usr/spool/mail"
+    elif test -d /var/spool/mail ; then
+        MAILDIR="/var/spool/mail"
+    elif test -d /usr/mail ; then
+        MAILDIR="/usr/mail"
+    elif test -d /var/mail ; then
+        MAILDIR="/var/mail"
+    else
+	MAILDIR=""
+    fi
+    AC_MSG_RESULT([${MAILDIR-(none)}])
+else
+    MAILDIR="$enable_mailcheck"
+fi
+if test -n "$MAILDIR"; then
+    AC_DEFINE_UNQUOTED(MAILDIR, "$MAILDIR")
+fi
+
+
+dnl ### Figure out names of executable, library directory, and symlink.
+
+if test "$enable_version" != "no" && test "$program_suffix" = "NONE"; then
+    program_suffix="-${TFVER}"
+fi
+
+dnl The "right" way of using program_transform_name, program_prefix, and
+dnl program_suffix expects you to use AC_ARG_PROGRAM here and do transformation
+dnl in the Makefile, but we want the values now, so we do it ourselves.
+EXENAME="tf" PROGNAME="tf"
+test "${program_prefix}" != "NONE" && EXENAME="${program_prefix}${EXENAME}"
+test "${program_suffix}" != "NONE" && EXENAME="${EXENAME}${program_suffix}"
+if test "${program_transform_name}" != "NONE"; then
+    EXENAME=`echo "${EXENAME}" | sed "${program_transform_name}"`
+fi
+LIBNAME="${PROGNAME}-lib"
+
+if test "$enable_symlink" = "no"; then
+    SYMLINK=""
+elif test "$enable_symlink" = "yes"; then
+    SYMLINK='${bindir}/tf'
+else
+    SYMLINK="$enable_symlink"
+fi
+
+AC_SUBST(EXENAME)
+AC_SUBST(PROGNAME)
+AC_SUBST(LIBNAME)
+AC_SUBST(SYMLINK)
+
+
+dnl ### man page
+
+dnl if test "$enable_manpage" = "yes"; then
+dnl     MANPAGE='${mandir}/man1/${EXENAME}.1'
+dnl     MANTYPE='nroff'
+dnl else
+dnl     MANPAGE=''
+dnl     MANTYPE=''
+dnl fi
+dnl AC_SUBST(MANPAGE)
+dnl AC_SUBST(MANTYPE) dnl XXX
+
+
+dnl ########### output ############
+
+
+dnl ########### end ############
+
+
+dnl # XXX
+dnl ### Sanity check for filenames (some people do pretty stupid things)
+dnl # The "${SYMLINK}/" is just to make the grep return false if SYMLINK is empty.
+dnl #
+dnl #if echo "$TF"          | egrep "^[^/]" >/dev/null 2>&1 ||
+dnl #   echo "$LIBDIR"      | egrep "^[^/]" >/dev/null 2>&1 ||
+dnl #   echo "${SYMLINK}/"  | egrep "^[^/]" >/dev/null 2>&1
+dnl #then
+dnl #   echo "Don't install files with relative paths or '~'."
+dnl #   echo "Edit unix/Config and try again."
+dnl #   exit 2
+dnl #fi
+dnl #
+dnl ## Don't allow installation in the build tree (people have actually tried this).
+dnl ## The cd;pwd is needed to normalize the directory name in case of links, etc.
+dnl #
+dnl #DIR1=`echo $TF      | sed 's;/[^/]*$;;'`
+dnl #DIR1=`cd $DIR1 && pwd`
+dnl #DIR2=`echo $LIBDIR  | sed 's;/[^/]*$;;'`
+dnl #DIR2=`cd $DIR2 && pwd`
+dnl #DIR3=`echo $SYMLINK | sed 's;/[^/]*$;;'`
+dnl #DIR3=`cd $DIR3 && pwd`
+dnl #
+dnl #if test -z "$DIR1"  || test -z "$DIR2"  || test -z "$DIR3" ; then
+dnl #    echo "Error in directory."
+dnl #    exit 1;
+dnl #fi
+dnl #
+dnl #DIR1=`cd $DIR1 && pwd || { echo "Error in directory $DIR1."; false; }`
+dnl #
+dnl #BUILDTREE=`cd .. && pwd`
+dnl #if echo "${DIR1}/" | egrep "^${BUILDTREE}/" >/dev/null 2>&1 ||
+dnl #   echo "${DIR2}/" | egrep "^${BUILDTREE}/" >/dev/null 2>&1 ||
+dnl #   echo "${DIR3}/" | egrep "^${BUILDTREE}/" >/dev/null 2>&1
+dnl #then
+dnl #    echo
+dnl #    echo 'You can not install files in the build tree,'
+dnl #    echo "${BUILDTREE}."
+dnl #    echo 'Edit unix/Config and try again.'
+dnl #    exit 2
+dnl #fi
+dnl #
+dnl # Too many people have renamed the distribution directory to "$HOME/tf", and
+dnl # then wondered why they couldn't install the executable as "$HOME/tf".
+dnl #if test -d "${TF}" ; then
+dnl #    echo "\"${TF}\" is a directory; you can not install the executable"
+dnl #    echo 'with the same name.  Either rename the directory, or choose a'
+dnl #    echo 'different name for the executable.'
+dnl #    exit 1
+dnl #fi
+
+
+MODE=755
+AC_SUBST(MODE)
+
+
+
+
+dnl ### Make sure the PATH is sane.
+dnl # Ideally, this should be done before the compiler check.  But a compiler
+dnl # found now in the extended PATH won't be found in src/Makefile, because it
+dnl # won't inherit this PATH.
+PATH="$PATH:/bin:/usr/bin:/usr/local/bin:/usr/ucb:/usr/local:/usr/lbin:/etc:/usr/new:/usr/new/bin:/usr/nbin:/usr/ccs/bin"
+
+
+if test "$enable_dmalloc" = "yes"; then
+    CPPFLAGS="$CPPFLAGS -DUSE_DMALLOC"
+    OTHER_OBJS="$OTHER_OBJS dmalloc.o"
+fi
+
+dnl ### write variables
+
+if test "$enable_inet6"   = "yes"; then AC_DEFINE(ENABLE_INET6)  fi
+if test "$enable_history" = "no"; then AC_DEFINE(NO_HISTORY)  fi
+if test "$enable_process" = "no"; then AC_DEFINE(NO_PROCESS)  fi
+if test "$enable_float"   = "no"; then AC_DEFINE(NO_FLOAT)    fi
+
+CPPFLAGS="${CPPFLAGS} -DDATADIR=\${datadir}"
+AC_SUBST(CFLAGS)
+AC_SUBST(CPPFLAGS)
+AC_SUBST(LIBS)
+AC_SUBST(OTHER_OBJS)
+
+AC_OUTPUT(Makefile unix/vars.mak src/tfdefs.h, [
+
+### Create src/Makefile from pieces.
+
+cat >src/Makefile <<END
+#### DO NOT EDIT THIS FILE.
+#### This src/Makefile was automatically generated by configure.  The correct
+#### installation precedure is to run ./configure in the top directory.  You
+#### should not edit this file; all configuration changes should be made
+#### via arguments to configure.
+
+END
+cat unix/vars.mak src/vars.mak unix/unix.mak src/rules.mak >> src/Makefile
+])
+
+AC_MSG_NOTICE([
+#####################################################
+## prefix: $prefix
+## exec_prefix: $exec_prefix
+## bindir: $bindir
+## datadir: $datadir
+## executable: \${bindir}/$EXENAME
+## library: \${datadir}/$LIBNAME
+##
+## TinyFugue configuration successful.
+## Use "make" to build.
+])
diff --git a/src/expr.c b/src/expr.c
index 6cb64b2..c9d4697 100644
--- a/src/expr.c
+++ b/src/expr.c
@@ -972,6 +972,24 @@ static Value *function_switch(const ExprFunc *func, int n, const char *parent)
 		(n>2 ? opdstd(n-2) : ""));
             return newint(i);
 
+#if ENABLE_ATCP
+        case FN_atcp:
+            i = handle_atcp_function(opdstr(n), (n>1 ? opdstd(n-1) : NULL));
+            return newint(i);
+#endif
+
+#if ENABLE_GMCP
+        case FN_gmcp:
+            i = handle_gmcp_function(opdstr(n), (n>1 ? opdstd(n-1) : NULL));
+            return newint(i);
+#endif
+
+#if ENABLE_OPTION102
+        case FN_option102:
+            i = handle_option102_function(opdstr(n), (n>1 ? opdstd(n-1) : NULL));
+            return newint(i);
+#endif
+
         case FN_fake_recv:
             i = handle_fake_recv_function(opdstr(n),
 		(n>1 ? opdstd(n-1) : NULL), (n>2 ? opdstd(n-2) : ""));
diff --git a/src/funclist.h b/src/funclist.h
index b3d505b..1267cc3 100644
--- a/src/funclist.h
+++ b/src/funclist.h
@@ -17,6 +17,9 @@ funccode(addworld,	0,	2,  9),
 funccode(ascii,		1,	1,  1),
 funccode(asin,		1,	1,  1),
 funccode(atan,		1,	1,  1),
+#if ENABLE_ATCP
+funccode(atcp,		0,	1,  2),
+#endif
 funccode(char,		1,	1,  1),
 funccode(columns,	0,	0,  0),
 funccode(cos,		1,	1,  1),
@@ -36,6 +39,9 @@ funccode(fwrite,	0,	2,  2),
 funccode(gethostname,	0,	0,  0),
 funccode(getopts,	0,	1,  2),
 funccode(getpid,	1,	0,  0),
+#if ENABLE_GMCP
+funccode(gmcp,		0,	1,  2),
+#endif
 funccode(idle,		0,	0,  1),
 funccode(is_connected,	0,	0,  1),
 funccode(is_open,	0,	0,  1),
@@ -62,6 +68,9 @@ funccode(nactive,	0,	0,  1),
 funccode(nlog,		0,	0,  0),
 funccode(nmail,		0,	0,  0),
 funccode(nread,		0,	0,  0),
+#if ENABLE_OPTION102
+funccode(option102,	0,	1,  2),
+#endif
 funccode(pad,		1,	1,  (unsigned)-1),
 funccode(pow,		1,	2,  2),
 funccode(prompt,	0,	1,  1),
diff --git a/src/globals.h b/src/globals.h
index a77e346..547d3af 100644
--- a/src/globals.h
+++ b/src/globals.h
@@ -158,6 +158,9 @@ enum Vars {
 #define TFMAILPATH	getstdvar(VAR_TFMAILPATH)
 #define alert_attr	getattrvar(VAR_alert_attr)
 #define alert_time	gettimevar(VAR_alert_time)
+#define atcp		getintvar(VAR_atcp)
+#define gmcp		getintvar(VAR_gmcp)
+#define OPTION102	getintvar(VAR_OPTION102)
 #define auto_fg		getintvar(VAR_auto_fg)
 #define background	getintvar(VAR_background)
 #define backslash	getintvar(VAR_backslash)
diff --git a/src/hooklist.h b/src/hooklist.h
index 197e18c..d961951 100644
--- a/src/hooklist.h
+++ b/src/hooklist.h
@@ -12,6 +12,9 @@
  */
 
 gencode(ACTIVITY,	HT_ALERT | HT_XSOCK),
+#if ENABLE_ATCP
+gencode(ATCP,		0),
+#endif
 gencode(BAMF,		HT_WORLD | HT_XSOCK),
 gencode(BGTEXT,		0),
 gencode(BGTRIG,		HT_ALERT | HT_XSOCK),
@@ -19,6 +22,9 @@ gencode(CONFAIL,	HT_WORLD | HT_XSOCK),
 gencode(CONFLICT,	0),
 gencode(CONNECT,	HT_WORLD | HT_XSOCK),
 gencode(DISCONNECT,	HT_WORLD | HT_XSOCK),
+#if ENABLE_GMCP
+gencode(GMCP,		0),
+#endif
 gencode(ICONFAIL,	HT_WORLD | HT_XSOCK),
 gencode(KILL,		0),
 gencode(LOAD,		0),
@@ -28,6 +34,9 @@ gencode(LOGIN,		0),
 gencode(MAIL,		HT_ALERT),
 gencode(MORE,		0),
 gencode(NOMACRO,	0),
+#if ENABLE_OPTION102
+gencode(OPTION102,	0),
+#endif
 gencode(PENDING,	HT_WORLD | HT_XSOCK),
 gencode(PREACTIVITY,	0),
 gencode(PROCESS,	0),
diff --git a/src/socket.c b/src/socket.c
index 6b671cf..b6e3e32 100644
--- a/src/socket.c
+++ b/src/socket.c
@@ -436,6 +436,12 @@ STATIC_BUFFER(telbuf);
 /* 85 & 86 are not standard.  See http://www.randomly.org/projects/MCCP/ */
 #define TN_COMPRESS	((char)85)	/* MCCP v1 */
 #define TN_COMPRESS2	((char)86)	/* MCCP v2 */
+/* 200 is not standard. See http://www.ironrealms.com/rapture/manual/files/FeatATCP-txt.html */
+#define TN_ATCP		((char)200)	/* ATCP */
+/* 201 is not standard. See http://www.aardwolf.com/wiki/index.php/Clients/GMCP */
+#define TN_GMCP		((char)201)	/* GMCP */
+/* 102 is not standard. See http://www.aardwolf.com/blog/category/technical */
+#define TN_102	((char)102)	/* Option 102 */
 
 #define UCHAR		unsigned char
 
@@ -608,6 +614,9 @@ void init_sock(void)
     telnet_label[(UCHAR)TN_CHARSET]	= "CHARSET";
     telnet_label[(UCHAR)TN_COMPRESS]	= "COMPRESS";
     telnet_label[(UCHAR)TN_COMPRESS2]	= "COMPRESS2";
+    telnet_label[(UCHAR)TN_ATCP]	= "ATCP";
+    telnet_label[(UCHAR)TN_GMCP]	= "GMCP";
+    telnet_label[(UCHAR)TN_102]		= "102";
     telnet_label[(UCHAR)TN_EOR]		= "EOR";
     telnet_label[(UCHAR)TN_SE]		= "SE";
     telnet_label[(UCHAR)TN_NOP]		= "NOP";
@@ -2439,6 +2448,45 @@ int handle_send_function(conString *string, const char *world,
     return result;
 }
 
+#if ENABLE_ATCP
+int handle_atcp_function(conString *string, const char *world)
+{
+   Sock *old_xsock = xsock;
+
+   xsock = (!world || !*world) ? xsock : find_sock(world);
+	Sprintf(telbuf, "%c%c%c%s%c%c", TN_IAC, TN_SB, TN_ATCP, string->data, TN_IAC, TN_SE);
+	telnet_send(telbuf);
+   xsock = old_xsock;
+	return 1;
+}
+#endif
+
+#if ENABLE_GMCP
+int handle_gmcp_function(conString *string, const char *world)
+{
+   Sock *old_xsock = xsock;
+
+   xsock = (!world || !*world) ? xsock : find_sock(world);
+	Sprintf(telbuf, "%c%c%c%s%c%c", TN_IAC, TN_SB, TN_GMCP, string->data, TN_IAC, TN_SE);
+	telnet_send(telbuf);
+   xsock = old_xsock;
+	return 1;
+}
+#endif
+
+#if ENABLE_OPTION102
+int handle_option102_function(conString *string, const char *world)
+{
+   Sock *old_xsock = xsock;
+
+   xsock = (!world || !*world) ? xsock : find_sock(world);
+	Sprintf(telbuf, "%c%c%c%s%c%c", TN_IAC, TN_SB, TN_102, string->data, TN_IAC, TN_SE);
+	telnet_send(telbuf);
+   xsock = old_xsock;
+	return 1;
+}
+#endif
+
 int handle_fake_recv_function(conString *string, const char *world,
     const char *flags)
 {
@@ -2825,6 +2873,21 @@ static void telnet_subnegotiation(void)
 	}
 	xsock->flags |= SOCKCOMPRESS;
 	break;
+#if ENABLE_ATCP
+    case TN_ATCP:
+	    do_hook(H_ATCP, NULL, "%s", xsock->subbuffer->data + 3);
+	    break;
+#endif
+#if ENABLE_GMCP
+    case TN_GMCP:
+	    do_hook(H_GMCP, NULL, "%s", xsock->subbuffer->data + 3);
+	    break;
+#endif
+#if ENABLE_OPTION102
+    case TN_102:
+	    do_hook(H_OPTION102, NULL, "%s", xsock->subbuffer->data + 3);
+	    break;
+#endif
     default:
 	no_reply("unknown option");
         break;
@@ -2967,6 +3030,7 @@ static int handle_socket_input(const char *simbuffer, int simlen)
 		case Z_STREAM_END:
 		    /* handle stuff inflated before stream end */
 		    count = (char*)xsock->zstream->next_out - outbuffer;
+		    if(count > 0)
 		    received += handle_socket_input(outbuffer, count);
 		    /* prepare to handle noncompressed stuff after stream end */
 		    buffer = (char*)xsock->zstream->next_in;
@@ -3072,7 +3136,7 @@ static int handle_socket_input(const char *simbuffer, int simlen)
                 continue;  /* avoid non-telnet processing */
 
             } else if (xsock->fsastate == TN_SB) {
-		if (xsock->subbuffer->len > 255) {
+		if (xsock->subbuffer->len > 1023) {
 		    /* It shouldn't take this long; server is broken.  Abort. */
 		    SStringcat(xsock->buffer, CS(xsock->subbuffer));
 		    Stringtrunc(xsock->subbuffer, 0);
@@ -3127,6 +3191,15 @@ static int handle_socket_input(const char *simbuffer, int simlen)
 #if HAVE_MCCP
 		    (rawchar == TN_COMPRESS && mccp) ||
 		    (rawchar == TN_COMPRESS2 && mccp) ||
+#endif
+#if ENABLE_ATCP
+		    (rawchar == TN_ATCP && atcp) ||
+#endif
+#if ENABLE_GMCP
+		    (rawchar == TN_GMCP && gmcp) ||
+#endif
+#if ENABLE_OPTION102
+		    (rawchar == TN_102 && 102) ||
 #endif
                     rawchar == TN_ECHO ||
                     rawchar == TN_SEND_EOR ||
diff --git a/src/socket.h b/src/socket.h
index 36dd90a..bfa9d67 100644
--- a/src/socket.h
+++ b/src/socket.h
@@ -45,6 +45,15 @@ extern void    transmit_window_size(void);
 extern int     local_echo(int flag);
 extern int     handle_send_function(conString *string, const char *world,
                      const char *flags);
+#if ENABLE_ATCP
+extern int     handle_atcp_function(conString *string, const char *world);
+#endif
+#if ENABLE_GMCP
+extern int     handle_gmcp_function(conString *string, const char *world);
+#endif
+#if ENABLE_OPTION102
+extern int     handle_option102_function(conString *string, const char *world);
+#endif
 extern int     handle_fake_recv_function(conString *string, const char *world,
 		    const char *flags);
 extern int     is_connected(const char *worldname);
diff --git a/src/tfconfig.h.in b/src/tfconfig.h.in
index ef9a245..4919e85 100644
--- a/src/tfconfig.h.in
+++ b/src/tfconfig.h.in
@@ -94,6 +94,9 @@
 #define NO_PROCESS 0
 #define NO_FLOAT 0
 #define NCOLORS 16
+#define ENABLE_ATCP 0
+#define ENABLE_GMCP 0
+#define ENABLE_OPTION102 0
 
 #define HAVE_MCCP (HAVE_ZLIB_H && HAVE_LIBZ)
 
diff --git a/src/varlist.h b/src/varlist.h
index cef1c61..96d84b5 100644
--- a/src/varlist.h
+++ b/src/varlist.h
@@ -43,6 +43,21 @@ varstr (VAR_TFPATH,	"TFPATH",	NULL,		NULL)
 varstrx(VAR_TZ,		"TZ",		NULL,		ch_timezone)
 varstr (VAR_alert_attr,	"alert_attr",	"Br",		ch_attr)
 vartime(VAR_alert_time,	"alert_time",	5,0,		NULL)
+#if ENABLE_ATCP
+varflag(VAR_atcp,	"atcp",		TRUE,		NULL)
+#else
+varenum(VAR_atcp,	"atcp",		FALSE,		NULL,	enum_off)
+#endif
+#if ENABLE_GMCP
+varflag(VAR_gmcp,	"gmcp",		TRUE,		NULL)
+#else
+varenum(VAR_gmcp,	"gmcp",		FALSE,		NULL,	enum_off)
+#endif
+#if ENABLE_OPTION102
+varflag(VAR_OPTION102,	"option102",	TRUE,		NULL)
+#else
+varenum(VAR_OPTION102,	"option102",	FALSE,		NULL,	enum_off)
+#endif
 #if 0
 varflag(VAR_auto_fg,	"auto_fg",	FALSE,		NULL)
 #endif
