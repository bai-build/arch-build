diff --git a/Makefile.am b/Makefile.am
index fc3ebe2..2b1d14f 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,3 +1,5 @@
+ACLOCAL_AMFLAGS=-I m4
+
 SUBDIRS = sensors-applet lib plugins pixmaps po help
 
 appletdir = $(LIBPANEL_APPLET_DIR)
@@ -31,11 +33,9 @@ CLEANFILES = $(applet_DATA) $(applet_DATA).in $(service_DATA) $(schemas_DATA)
 EXTRA_DIST 	= $(ui_DATA) \
 		  $(applet_in_files:.panel-applet.in=.panel-applet.in.in) \
 		  $(service_in_files) \
-		  intltool-merge.in intltool-extract.in intltool-update.in \
-		  gnome-doc-utils.make
+		  intltool-merge.in intltool-extract.in intltool-update.in
 
-DISTCLEANFILES	=	gnome-doc-utils.make \
-		   	intltool-extract \
+DISTCLEANFILES	=	intltool-extract \
 		   	intltool-merge \
 	   	   	intltool-update
 
diff --git a/SensorsApplet.xml b/SensorsApplet.xml
index 8b37a39..41e1d1f 100644
--- a/SensorsApplet.xml
+++ b/SensorsApplet.xml
@@ -1,3 +1,14 @@
-<menuitem name="Preferences Item" action="Preferences"/>
-<menuitem name="Help Item" action="Help"/>
-<menuitem name="About Item" action="About"/>
+<section>
+       <item>
+               <attribute name="label" translatable="yes">_Preferences</attribute>
+               <attribute name="action">sensorsapplet.preferences</attribute>
+       </item>
+       <item>
+               <attribute name="label" translatable="yes">_Help</attribute>
+               <attribute name="action">sensorsapplet.help</attribute>
+       </item>
+       <item>
+               <attribute name="label" translatable="yes">_About</attribute>
+               <attribute name="action">sensorsapplet.about</attribute>
+       </item>
+</section>
diff --git a/configure.ac b/configure.ac
index 55bcd42..5d689f6 100644
--- a/configure.ac
+++ b/configure.ac
@@ -7,7 +7,8 @@ AC_INIT([GNOME Sensors Applet], [3.0.0], [murray.alex@gmail.com],
 
 AC_CONFIG_SRCDIR([sensors-applet/main.c])
 AM_CONFIG_HEADER([sensors-applet/config.h])
-AM_INIT_AUTOMAKE
+AC_CONFIG_MACRO_DIRS([m4])
+AM_INIT_AUTOMAKE([ -Wno-portability])
 m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])
 AM_MAINTAINER_MODE
 
@@ -51,7 +52,7 @@ AC_CHECK_HEADERS(
 )
 
 GLIB_REQUIRED=2.22.0
-GTK_REQUIRED=3.0.0
+GTK_REQUIRED=3.4.0
 LIBPANEL_REQUIRED=3.0.0
 LIBNOTIFY_REQUIRED=0.3.0
 LIBCAIRO_REQUIRED=1.0.4
@@ -66,11 +67,11 @@ PKG_CHECK_MODULES(GTK, gtk+-3.0 >= $GTK_REQUIRED)
 AC_SUBST(GTK_CFLAGS)
 AC_SUBST(GTK_LIBS)
 
-PKG_CHECK_MODULES(GNOME, libpanelapplet-4.0 >= $LIBPANEL_REQUIRED)
+PKG_CHECK_MODULES(GNOME, libpanel-applet >= $LIBPANEL_REQUIRED)
 AC_SUBST(GNOME_CFLAGS)
 AC_SUBST(GNOME_LIBS)
 
-LIBPANEL_APPLET_DIR=`$PKG_CONFIG --variable=libpanel_applet_dir libpanelapplet-4.0`
+LIBPANEL_APPLET_DIR=`$PKG_CONFIG --variable=libpanel_applet_dir libpanel-applet`
 AC_SUBST(LIBPANEL_APPLET_DIR)
 
 PKG_CHECK_MODULES(CAIRO, cairo >= $LIBCAIRO_REQUIRED)
@@ -127,6 +128,7 @@ AM_CONDITIONAL(LIBNOTIFY, test -n "$LIBNOTIFY_LIBS")
 AC_SUBST(LIBNOTIFY_CFLAGS)
 AC_SUBST(LIBNOTIFY_LIBS)
 
+GLIB_GSETTINGS
 
 # allow user to specify libsensors support, but support it anyway if possible
 AC_ARG_WITH(libsensors,
@@ -252,8 +254,7 @@ fi
 
 GNOME_COMPILE_WARNINGS(maximum)
 
-# ================ gnome-doc-utils stuff ============= #
-GNOME_DOC_INIT
+YELP_HELP_INIT
 
 # ==================== plugin stuff ================== #
 PLUGIN_LIBTOOL_FLAGS="-module -avoid-version"
diff --git a/help/C/sensors-applet.xml b/help/C/sensors-applet.xml
index 6aaae92..b87e4f0 100644
--- a/help/C/sensors-applet.xml
+++ b/help/C/sensors-applet.xml
@@ -556,7 +556,7 @@ Alarms for individual sensors must also be enabled.
 
 		      For more information regarding Zenity please
 		      consult the Zenity <ulink type="help"
-			url="ghelp:zenity">documentation</ulink>.
+			url="help:zenity">documentation</ulink>.
 		    </para>
 		  </listitem>
 		  </varlistentry>
@@ -665,7 +665,7 @@ Alarms for individual sensors must also be enabled.
     </variablelist>
     <note>
       <para>These values can also be set using the <ulink type="help"
-	url="ghelp:gconf-editor">Configuration Editor</ulink>
+	url="help:gconf-editor">Configuration Editor</ulink>
 	application.
       </para>
       </note>
@@ -718,7 +718,7 @@ Alarms for individual sensors must also be enabled.
       Public license as published by the Free Software Foundation;
       either version 2 of the License, or (at your option) any later
       version. A copy of this license can be found at this <ulink
-	type="help" url="ghelp:gpl">link</ulink>, or in the file COPYING
+	type="help" url="help:gpl">link</ulink>, or in the file COPYING
       included with the source code of this program. 
     </para>
   </sect1> 
diff --git a/help/Makefile.am b/help/Makefile.am
index 11be928..d1b94b4 100644
--- a/help/Makefile.am
+++ b/help/Makefile.am
@@ -1,8 +1,8 @@
-include $(top_srcdir)/gnome-doc-utils.make
-dist-hook: doc-dist-hook
+@YELP_HELP_RULES@
 
-DOC_MODULE = sensors-applet
-DOC_ENTITIES = legal.xml
-DOC_FIGURES = figures/applet_in_panel.png
-DOC_INCLUDES = 
-DOC_LINGUAS =
+HELP_ID = sensors-applet
+HELP_FILES = legal.xml
+HELP_MEDIA = figures/applet_in_panel.png
+HELP_LINGUAS =
+
+-include $(top_srcdir)/git.mk
diff --git a/lib/Makefile.am b/lib/Makefile.am
index 83f3ea0..165813b 100644
--- a/lib/Makefile.am
+++ b/lib/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+AM_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
@@ -16,4 +16,4 @@ LIBS = $(GLIB_LIBS)
 lib_LTLIBRARIES = libsensors-applet-plugin.la
 
 libsensors_applet_plugin_la_SOURCES = sensors-applet-plugin.c 
-libsensors_applet_plugin_la_LDFLAGS = -export-dynamic
\ No newline at end of file
+libsensors_applet_plugin_la_LDFLAGS = -export-dynamic
diff --git a/lib/sensors-applet-plugin.c b/lib/sensors-applet-plugin.c
index 6217403..4c81183 100644
--- a/lib/sensors-applet-plugin.c
+++ b/lib/sensors-applet-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #include <sensors-applet/sensors-applet-plugin.h>
diff --git a/pixmaps/sensors-applet-gpu.png b/pixmaps/sensors-applet-gpu.png
index 9fc9463..3b02187 100644
Binary files a/pixmaps/sensors-applet-gpu.png and b/pixmaps/sensors-applet-gpu.png differ
diff --git a/plugins/acpi/Makefile.am b/plugins/acpi/Makefile.am
index 954214c..c67ce39 100644
--- a/plugins/acpi/Makefile.am
+++ b/plugins/acpi/Makefile.am
@@ -1,7 +1,7 @@
 # ACPI plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libacpi_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/acpi/acpi-plugin.c b/plugins/acpi/acpi-plugin.c
index 4c0189f..44c8d78 100644
--- a/plugins/acpi/acpi-plugin.c
+++ b/plugins/acpi/acpi-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/acpi/acpi-plugin.h b/plugins/acpi/acpi-plugin.h
index c6c8555..18adbbe 100644
--- a/plugins/acpi/acpi-plugin.h
+++ b/plugins/acpi/acpi-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef ACPI_PLUGIN_H
diff --git a/plugins/aticonfig/Makefile.am b/plugins/aticonfig/Makefile.am
index 6d2c2c9..1f5a02d 100644
--- a/plugins/aticonfig/Makefile.am
+++ b/plugins/aticonfig/Makefile.am
@@ -1,7 +1,7 @@
 # ATICONFIG plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libaticonfig_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/aticonfig/aticonfig-plugin.c b/plugins/aticonfig/aticonfig-plugin.c
index 45f5da8..48c6037 100644
--- a/plugins/aticonfig/aticonfig-plugin.c
+++ b/plugins/aticonfig/aticonfig-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/aticonfig/aticonfig-plugin.h b/plugins/aticonfig/aticonfig-plugin.h
index c71c5b4..4db5425 100644
--- a/plugins/aticonfig/aticonfig-plugin.h
+++ b/plugins/aticonfig/aticonfig-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef ATICONFIG_PLUGIN_H
diff --git a/plugins/eee/Makefile.am b/plugins/eee/Makefile.am
index 0187c91..661eefb 100644
--- a/plugins/eee/Makefile.am
+++ b/plugins/eee/Makefile.am
@@ -1,7 +1,7 @@
 # ACPI plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libeee_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/eee/eee-plugin.c b/plugins/eee/eee-plugin.c
index cfabebb..be6e179 100644
--- a/plugins/eee/eee-plugin.c
+++ b/plugins/eee/eee-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/eee/eee-plugin.h b/plugins/eee/eee-plugin.h
index 88f7add..335a20f 100644
--- a/plugins/eee/eee-plugin.h
+++ b/plugins/eee/eee-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef EEE_PLUGIN_H
diff --git a/plugins/hddtemp/Makefile.am b/plugins/hddtemp/Makefile.am
index da45fa2..d419f7b 100644
--- a/plugins/hddtemp/Makefile.am
+++ b/plugins/hddtemp/Makefile.am
@@ -1,7 +1,7 @@
 # HDDTEMP plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libhddtemp_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/hddtemp/hddtemp-plugin.c b/plugins/hddtemp/hddtemp-plugin.c
index ea7e091..a25a7ca 100644
--- a/plugins/hddtemp/hddtemp-plugin.c
+++ b/plugins/hddtemp/hddtemp-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
@@ -150,9 +150,9 @@ static void hddtemp_plugin_get_sensors(GList **sensors) {
 	pv = output_vector = g_strsplit(hddtemp_output, "|", -1);
 
 	while(pv[1] != NULL) {
-		if (strcmp(pv[2], "") != 0 &&
-		    strcmp(pv[3], "") != 0 &&
-		    strcmp(pv[4], "") != 0 &&
+		if (g_strcmp0(pv[2], "") != 0 &&
+		    g_strcmp0(pv[3], "") != 0 &&
+		    g_strcmp0(pv[4], "") != 0 &&
 		    (!(g_ascii_strcasecmp(pv[2], "???") == 0 ||
 		       g_ascii_strcasecmp(pv[3], "ERR") == 0 ||
 		       g_ascii_strcasecmp(pv[4], "*") == 0))) {
diff --git a/plugins/hddtemp/hddtemp-plugin.h b/plugins/hddtemp/hddtemp-plugin.h
index 7790e5a..579e7b1 100644
--- a/plugins/hddtemp/hddtemp-plugin.h
+++ b/plugins/hddtemp/hddtemp-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef HDDTEMP_PLUGIN_H
diff --git a/plugins/i2c-proc/Makefile.am b/plugins/i2c-proc/Makefile.am
index 8f7808c..d5fefcf 100644
--- a/plugins/i2c-proc/Makefile.am
+++ b/plugins/i2c-proc/Makefile.am
@@ -1,7 +1,7 @@
 # I2C-PROC plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libi2c_proc_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/i2c-proc/i2c-proc-plugin.c b/plugins/i2c-proc/i2c-proc-plugin.c
index 217654c..348b1f7 100644
--- a/plugins/i2c-proc/i2c-proc-plugin.c
+++ b/plugins/i2c-proc/i2c-proc-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/i2c-proc/i2c-proc-plugin.h b/plugins/i2c-proc/i2c-proc-plugin.h
index 818f196..85ee46d 100644
--- a/plugins/i2c-proc/i2c-proc-plugin.h
+++ b/plugins/i2c-proc/i2c-proc-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SENSORS_LIST_I2C_PROC_H
diff --git a/plugins/i2c-sys/Makefile.am b/plugins/i2c-sys/Makefile.am
index 1647f16..2f59ff0 100644
--- a/plugins/i2c-sys/Makefile.am
+++ b/plugins/i2c-sys/Makefile.am
@@ -1,7 +1,7 @@
 # I2C-SYS plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libi2c_sys_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/i2c-sys/i2c-sys-plugin.c b/plugins/i2c-sys/i2c-sys-plugin.c
index 17535aa..6665341 100644
--- a/plugins/i2c-sys/i2c-sys-plugin.c
+++ b/plugins/i2c-sys/i2c-sys-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/i2c-sys/i2c-sys-plugin.h b/plugins/i2c-sys/i2c-sys-plugin.h
index 9574fa8..d8e5e99 100644
--- a/plugins/i2c-sys/i2c-sys-plugin.h
+++ b/plugins/i2c-sys/i2c-sys-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef I2C_SYS_PLUGIN_H
diff --git a/plugins/i8k/Makefile.am b/plugins/i8k/Makefile.am
index 84044ec..0146f10 100644
--- a/plugins/i8k/Makefile.am
+++ b/plugins/i8k/Makefile.am
@@ -1,7 +1,7 @@
 # I8K plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libi8k_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/i8k/i8k-plugin.c b/plugins/i8k/i8k-plugin.c
index 25813c8..a145823 100644
--- a/plugins/i8k/i8k-plugin.c
+++ b/plugins/i8k/i8k-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/i8k/i8k-plugin.h b/plugins/i8k/i8k-plugin.h
index f9c39d1..d522fc7 100644
--- a/plugins/i8k/i8k-plugin.h
+++ b/plugins/i8k/i8k-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef I8K_PLUGIN_H
diff --git a/plugins/ibm-acpi/Makefile.am b/plugins/ibm-acpi/Makefile.am
index 0ed6ea4..b7c4790 100644
--- a/plugins/ibm-acpi/Makefile.am
+++ b/plugins/ibm-acpi/Makefile.am
@@ -1,7 +1,7 @@
 # IBM-ACPI plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libibm_acpi_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/ibm-acpi/ibm-acpi-plugin.c b/plugins/ibm-acpi/ibm-acpi-plugin.c
index 8bf2683..c24df88 100644
--- a/plugins/ibm-acpi/ibm-acpi-plugin.c
+++ b/plugins/ibm-acpi/ibm-acpi-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/ibm-acpi/ibm-acpi-plugin.h b/plugins/ibm-acpi/ibm-acpi-plugin.h
index 2ebe23e..c008763 100644
--- a/plugins/ibm-acpi/ibm-acpi-plugin.h
+++ b/plugins/ibm-acpi/ibm-acpi-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef IBM_ACPI_PLUGIN_H
diff --git a/plugins/libsensors/Makefile.am b/plugins/libsensors/Makefile.am
index 082257b..4c042bd 100644
--- a/plugins/libsensors/Makefile.am
+++ b/plugins/libsensors/Makefile.am
@@ -1,7 +1,7 @@
 plugindir = $(libdir)/sensors-applet/plugins
 
 # libsensors plugin
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+liblibsensors_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/libsensors/libsensors-plugin.c b/plugins/libsensors/libsensors-plugin.c
index 960c19f..9cb36d8 100644
--- a/plugins/libsensors/libsensors-plugin.c
+++ b/plugins/libsensors/libsensors-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/libsensors/libsensors-plugin.h b/plugins/libsensors/libsensors-plugin.h
index 6b03047..bcdfe2a 100644
--- a/plugins/libsensors/libsensors-plugin.h
+++ b/plugins/libsensors/libsensors-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef LIBSENSORS_SENSORS_INTERFACE_H
diff --git a/plugins/mbmon/Makefile.am b/plugins/mbmon/Makefile.am
index 13698bd..1d51054 100644
--- a/plugins/mbmon/Makefile.am
+++ b/plugins/mbmon/Makefile.am
@@ -1,7 +1,7 @@
 # MBMON plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libmbmon_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/mbmon/mbmon-plugin.c b/plugins/mbmon/mbmon-plugin.c
index c9d5fd3..ad0467a 100644
--- a/plugins/mbmon/mbmon-plugin.c
+++ b/plugins/mbmon/mbmon-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/mbmon/mbmon-plugin.h b/plugins/mbmon/mbmon-plugin.h
index 18471b6..266140a 100644
--- a/plugins/mbmon/mbmon-plugin.h
+++ b/plugins/mbmon/mbmon-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef MBMON_PLUGIN_H
diff --git a/plugins/nvidia/Makefile.am b/plugins/nvidia/Makefile.am
index 88c85b7..476f46c 100644
--- a/plugins/nvidia/Makefile.am
+++ b/plugins/nvidia/Makefile.am
@@ -1,7 +1,7 @@
 # NVIDIA plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libnvidia_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/nvidia/nvidia-plugin.c b/plugins/nvidia/nvidia-plugin.c
index 025ea56..781f1d3 100644
--- a/plugins/nvidia/nvidia-plugin.c
+++ b/plugins/nvidia/nvidia-plugin.c
@@ -12,9 +12,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/nvidia/nvidia-plugin.h b/plugins/nvidia/nvidia-plugin.h
index ac6e7a4..b277a4a 100644
--- a/plugins/nvidia/nvidia-plugin.h
+++ b/plugins/nvidia/nvidia-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef NVIDIA_PLUGIN_H
diff --git a/plugins/omnibook/Makefile.am b/plugins/omnibook/Makefile.am
index 0633b4b..1e62b61 100644
--- a/plugins/omnibook/Makefile.am
+++ b/plugins/omnibook/Makefile.am
@@ -1,7 +1,7 @@
 # OMNIBOOK plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libomnibook_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/omnibook/omnibook-plugin.c b/plugins/omnibook/omnibook-plugin.c
index 0772b0f..91eef4b 100644
--- a/plugins/omnibook/omnibook-plugin.c
+++ b/plugins/omnibook/omnibook-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/omnibook/omnibook-plugin.h b/plugins/omnibook/omnibook-plugin.h
index d856d0f..6b71a79 100644
--- a/plugins/omnibook/omnibook-plugin.h
+++ b/plugins/omnibook/omnibook-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef OMNIBOOK_PLUGIN_H
diff --git a/plugins/pmu-sys/Makefile.am b/plugins/pmu-sys/Makefile.am
index 4a70a1d..2ea49c3 100644
--- a/plugins/pmu-sys/Makefile.am
+++ b/plugins/pmu-sys/Makefile.am
@@ -1,7 +1,7 @@
 # PMU-SYS plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libpmu_sys_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/pmu-sys/pmu-sys-plugin.c b/plugins/pmu-sys/pmu-sys-plugin.c
index 72cc275..59a34a5 100644
--- a/plugins/pmu-sys/pmu-sys-plugin.c
+++ b/plugins/pmu-sys/pmu-sys-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/pmu-sys/pmu-sys-plugin.h b/plugins/pmu-sys/pmu-sys-plugin.h
index 9dac861..9561440 100644
--- a/plugins/pmu-sys/pmu-sys-plugin.h
+++ b/plugins/pmu-sys/pmu-sys-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef PMU_SYS_PLUGIN_H
diff --git a/plugins/smu-sys/Makefile.am b/plugins/smu-sys/Makefile.am
index b7477ce..eb9d0b4 100644
--- a/plugins/smu-sys/Makefile.am
+++ b/plugins/smu-sys/Makefile.am
@@ -1,7 +1,7 @@
 # SMU-SYS plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libsmu_sys_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/smu-sys/smu-sys-plugin.c b/plugins/smu-sys/smu-sys-plugin.c
index 76bf31c..7055fb9 100644
--- a/plugins/smu-sys/smu-sys-plugin.c
+++ b/plugins/smu-sys/smu-sys-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/smu-sys/smu-sys-plugin.h b/plugins/smu-sys/smu-sys-plugin.h
index 4a80b37..cfda8e4 100644
--- a/plugins/smu-sys/smu-sys-plugin.h
+++ b/plugins/smu-sys/smu-sys-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SMU_SYS_PLUGIN_H
diff --git a/plugins/sonypi/Makefile.am b/plugins/sonypi/Makefile.am
index 5f2f708..44bf9c5 100644
--- a/plugins/sonypi/Makefile.am
+++ b/plugins/sonypi/Makefile.am
@@ -1,7 +1,7 @@
 # SONYPI plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libsonypi_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/sonypi/sonypi-plugin.c b/plugins/sonypi/sonypi-plugin.c
index 5e53151..9fecbdb 100644
--- a/plugins/sonypi/sonypi-plugin.c
+++ b/plugins/sonypi/sonypi-plugin.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/sonypi/sonypi-plugin.h b/plugins/sonypi/sonypi-plugin.h
index d72c515..bd47f78 100644
--- a/plugins/sonypi/sonypi-plugin.h
+++ b/plugins/sonypi/sonypi-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SONYPI_PLUGIN_H
diff --git a/plugins/udisks/Makefile.am b/plugins/udisks/Makefile.am
index 8d5a3a3..8772824 100644
--- a/plugins/udisks/Makefile.am
+++ b/plugins/udisks/Makefile.am
@@ -1,7 +1,7 @@
 # UDisks plugin
 plugindir = $(libdir)/sensors-applet/plugins
 
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+libudisks_la_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)"\" \
diff --git a/plugins/udisks/udisks-plugin.c b/plugins/udisks/udisks-plugin.c
index 45500d9..f7915da 100644
--- a/plugins/udisks/udisks-plugin.c
+++ b/plugins/udisks/udisks-plugin.c
@@ -12,9 +12,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/plugins/udisks/udisks-plugin.h b/plugins/udisks/udisks-plugin.h
index c94b684..58892eb 100644
--- a/plugins/udisks/udisks-plugin.h
+++ b/plugins/udisks/udisks-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef UDISKS_PLUGIN_H
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 5848a47..a0843b0 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -16,4 +16,5 @@ sensors-applet/active-sensor.c
 sensors-applet/about-dialog.c
 sensors-applet/sensor-config-dialog.c
 sensors-applet/sensors-applet.c
-sensors-applet/sensors-applet-gconf.c
+sensors-applet/sensors-applet-conf.c
+[type: gettext/glade]SensorsApplet.xml
diff --git a/sensors-applet/Makefile.am b/sensors-applet/Makefile.am
index aee1e10..7b38f4e 100644
--- a/sensors-applet/Makefile.am
+++ b/sensors-applet/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-INCLUDES = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
+AM_CPPFLAGS = -DGNOMELOCALEDIR=\""$(datadir)/locale/"\" \
 	-DG_LOG_DOMAIN=\""Sensors Applet"\" \
 	-DPIXMAPS_DIR=\""$(datadir)/pixmaps/$(PACKAGE)/"\" \
 	-DDATADIR=\""$(datadir)/sensors-applet"\" \
@@ -36,8 +36,8 @@ sensors_applet_SOURCES = main.c \
 		sensors-applet-sensor.h \
 		sensors-applet-plugins.c \
 		sensors-applet-plugins.h \
-		sensors-applet-gconf.c \
-		sensors-applet-gconf.h \
+		sensors-applet-conf.c \
+		sensors-applet-conf.h \
 		$(libnotify_SRC) 
 
 # install headers for plugins to use
@@ -47,5 +47,18 @@ headerdir = $(prefix)/include/sensors-applet
 
 header_DATA = $(INST_H_FILES)
 
+gsettings_schemas_in_in = \
+	org.gnome.sensors-applet.gschema.xml.in.in
+
+@INTLTOOL_XML_NOMERGE_RULE@
+
+gsettings_schemas_in = $(gsettings_schemas_in_in:.xml.in.in=.xml.in)
+gsettings_SCHEMAS = $(gsettings_schemas_in:.xml.in=.xml)
+
+%.gschema.xml.in: %.gschema.xml.in.in Makefile
+	$(AM_V_GEN) $(SED) -e 's^\@GETTEXT_PACKAGE\@^$(GETTEXT_PACKAGE)^g' < $< > $@
+
+@GSETTINGS_RULES@
+
 # since it is separate
 EXTRA_DIST = sensors-applet-plugin.h
diff --git a/sensors-applet/about-dialog.c b/sensors-applet/about-dialog.c
index 00c436f..9e8e030 100644
--- a/sensors-applet/about-dialog.c
+++ b/sensors-applet/about-dialog.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/sensors-applet/about-dialog.h b/sensors-applet/about-dialog.h
index 01537e0..dedba7c 100644
--- a/sensors-applet/about-dialog.h
+++ b/sensors-applet/about-dialog.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef ABOUT_DIALOG_H
diff --git a/sensors-applet/active-sensor-libnotify.c b/sensors-applet/active-sensor-libnotify.c
index a944601..9c47f30 100644
--- a/sensors-applet/active-sensor-libnotify.c
+++ b/sensors-applet/active-sensor-libnotify.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
diff --git a/sensors-applet/active-sensor-libnotify.h b/sensors-applet/active-sensor-libnotify.h
index b614119..d31ba6d 100644
--- a/sensors-applet/active-sensor-libnotify.h
+++ b/sensors-applet/active-sensor-libnotify.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef ACTIVE_SESNOR_LIBNOTIFY_H
diff --git a/sensors-applet/active-sensor.c b/sensors-applet/active-sensor.c
index 3062932..8afb224 100644
--- a/sensors-applet/active-sensor.c
+++ b/sensors-applet/active-sensor.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
@@ -24,14 +24,13 @@
 #include <string.h>
 #endif /* HAVE_STRING_H */
 
-#include <gconf/gconf-client.h>
 #include <glib.h>
 #include <glib/gi18n.h>
 #include <gtk/gtk.h>
 
 #include "active-sensor.h"
 #include "sensors-applet-plugins.h"
-#include "sensors-applet-gconf.h"
+#include "sensors-applet-conf.h"
 
 typedef enum {
         VERY_LOW_SENSOR_VALUE = 0,
@@ -81,18 +80,21 @@ static gboolean active_sensor_execute_alarm(ActiveSensor *active_sensor,
 	GPid pid;
 
         sensors_applet_notify_active_sensor(active_sensor, notif_type);
-        g_debug("EXECUTING %s ALARM: %s",
-                (notif_type == LOW_ALARM ?
-                 "LOW" : "HIGH"),
-                active_sensor->alarm_command[notif_type]);
-	g_shell_parse_argv(active_sensor->alarm_command[notif_type],
-			   &argc, &argv, NULL);
-	ret = g_spawn_async(NULL, argv, NULL, G_SPAWN_SEARCH_PATH, NULL,
-			    NULL, &pid, NULL);
-	g_strfreev (argv);
-        g_debug("Command executed in shell with pid %d", pid);
-
-        return ret;
+	if (strlen(active_sensor->alarm_command[notif_type])) {
+		g_debug("EXECUTING %s ALARM: %s",
+			(notif_type == LOW_ALARM ?
+			"LOW" : "HIGH"),
+			active_sensor->alarm_command[notif_type]);
+		g_shell_parse_argv(active_sensor->alarm_command[notif_type],
+			&argc, &argv, NULL);
+		ret = g_spawn_async(NULL, argv, NULL, G_SPAWN_SEARCH_PATH, NULL,
+			NULL, &pid, NULL);
+		g_strfreev (argv);
+		g_debug("Command executed in shell with pid %d", pid);
+
+		return ret;
+	}
+	return FALSE;
 }
 
 static gboolean active_sensor_execute_low_alarm(ActiveSensor *active_sensor) {
@@ -438,6 +440,7 @@ ActiveSensor *active_sensor_new(SensorsApplet *sensors_applet,
 
 	active_sensor = g_new0(ActiveSensor, 1);
         active_sensor->sensors_applet = sensors_applet;
+	active_sensor->sensors_applet->settings = panel_applet_settings_new (sensors_applet->applet, SENSORS_APPLET_SCHEMA);
 
 	active_sensor->sensor_row = sensor_row;
 
@@ -461,8 +464,8 @@ ActiveSensor *active_sensor_new(SensorsApplet *sensors_applet,
 
         /* need to set size according to orientation */
         orient = panel_applet_get_orient(active_sensor->sensors_applet->applet);
-        graph_size = panel_applet_gconf_get_int(active_sensor->sensors_applet->applet,
-                                                GRAPH_SIZE, NULL);
+        graph_size = g_settings_get_double(active_sensor->sensors_applet->settings,
+                                                GRAPH_SIZE);
 
         horizontal = ((orient == PANEL_APPLET_ORIENT_UP) ||
                       (orient == PANEL_APPLET_ORIENT_DOWN));
@@ -496,7 +499,7 @@ static void active_sensor_update_sensor_value(ActiveSensor *as,
 void active_sensor_update(ActiveSensor *active_sensor,
                           SensorsApplet *sensors_applet) {
 
-        GtkTreeModel *model;
+	GtkTreeModel *model;
 	GtkTreeIter iter;
 	GtkTreePath *path;
 
@@ -529,13 +532,13 @@ void active_sensor_update(ActiveSensor *active_sensor,
         gchar *value_tooltip = NULL;
 
         /* hidden gconf options */
-        GConfClient *client;
+        GSettings *settings;
         gint font_size = 0;
         gboolean hide_units = FALSE;
 
 	g_assert(active_sensor);
 	g_assert(active_sensor->sensor_row);
-        g_assert(sensors_applet);
+	g_assert(sensors_applet);
 
 	model = gtk_tree_row_reference_get_model(active_sensor->sensor_row);
 	path = gtk_tree_row_reference_get_path(active_sensor->sensor_row);
@@ -560,8 +563,7 @@ void active_sensor_update(ActiveSensor *active_sensor,
                                    GRAPH_COLOR_COLUMN, &graph_color,
 				   -1);
 
-
-                SensorsAppletPluginGetSensorValue get_sensor_value;
+		SensorsAppletPluginGetSensorValue get_sensor_value;
 		/* only call function if is in hash table for plugin */
                 if ((get_sensor_value = sensors_applet_plugins_get_sensor_value_func(sensors_applet, sensor_interface)) != NULL) {
                         sensor_value = get_sensor_value(sensor_path,
@@ -581,38 +583,26 @@ void active_sensor_update(ActiveSensor *active_sensor,
 				g_error_free(error);
 				error = NULL;
 
-                                /* set sensor value to an error code -
+				/* set sensor value to an error code -
                                  * note this is not unique */
-                                sensor_value = -1;
+				sensor_value = -1;
 			} else {
-                                /* use hidden gconf key for hide_units */
-
-                                if ((client = gconf_client_get_default()) != NULL) {
-                                        hide_units = gconf_client_get_bool(client,
-                                                                          "/apps/sensors-applet/" HIDE_UNITS,
-                                                                          &error);
-                                        if (error) {
-                                                g_debug("Could not get hide units from GConf - assuming false");
-                                                hide_units = FALSE;
-                                                g_error_free(error);
-                                                error = NULL;
-                                        }
-
-                                        g_object_unref(client);
-                                }
+				/* use hidden config key for hide_units */
+				hide_units = g_settings_get_boolean(sensors_applet->settings, HIDE_UNITS);
 
-                                /* scale value and set text using this
+				/* scale value and set text using this
                                  * value */
 				switch (sensor_type) {
 				case TEMP_SENSOR:
 
-                                        scale = (TemperatureScale)panel_applet_gconf_get_int(sensors_applet->applet, TEMPERATURE_SCALE, NULL);
-                                        /* scale value */
+					scale = (TemperatureScale)g_settings_get_int(sensors_applet->settings, TEMPERATURE_SCALE);
+					/* scale value */
 					sensor_value = sensors_applet_convert_temperature(sensor_value,
-                                                                                          CELSIUS,
-                                                                                          scale);
+							CELSIUS,
+							scale);
 
-                                        sensor_value = (sensor_value * sensor_multiplier) + sensor_offset;
+
+					sensor_value = (sensor_value * sensor_multiplier) + sensor_offset;
                                         switch (scale) {
                                         case FAHRENHEIT:
                                                 value_text = g_strdup_printf("%2.0f %s", sensor_value, (hide_units ? "" : UNITS_FAHRENHEIT));
@@ -659,27 +649,15 @@ void active_sensor_update(ActiveSensor *active_sensor,
                         tooltip = g_strdup_printf("%s %s", sensor_label, value_tooltip);
                         g_free(value_tooltip);
 
-                        /* only do icons and labels / graphs if needed */
-                        display_mode = panel_applet_gconf_get_int(sensors_applet->applet,
-                                                                  DISPLAY_MODE,
-                                                                  NULL);
-
-                        /* most users wont have a font size set */
-                        if ((client = gconf_client_get_default()) != NULL) {
-                                font_size = gconf_client_get_int(client,
-                                                                 "/apps/sensors-applet/" FONT_SIZE,
-                                                                 &error);
-                                if (error) {
-                                        g_debug("Could not get font size from GConf - assuming default size");
-                                        font_size = 0;
-                                        g_error_free(error);
-                                        error = NULL;
-                                }
+			/* only do icons and labels / graphs if needed */
+			display_mode = g_settings_get_int(sensors_applet->settings,
+					DISPLAY_MODE);
 
-                                g_object_unref(client);
-                        }
-                        /* do icon if needed */
-                        if (display_mode == DISPLAY_ICON ||
+			/* most users wont have a font size set */
+			font_size = g_settings_get_int(sensors_applet->settings, FONT_SIZE);
+
+			/* do icon if needed */
+			if (display_mode == DISPLAY_ICON ||
                             display_mode == DISPLAY_ICON_WITH_VALUE) {
                                 /* update icon if icon range has changed if no
                                  * update has been done before */
@@ -727,9 +705,9 @@ void active_sensor_update(ActiveSensor *active_sensor,
                                                 active_sensor_alarm_on(active_sensor, HIGH_ALARM);
                                         }
 
-                                        if (sensor_value <= sensor_low_value) {
-                                                active_sensor_alarm_on(active_sensor, LOW_ALARM);
-                                        }
+					if (sensor_value <= sensor_low_value) {
+						active_sensor_alarm_on(active_sensor, LOW_ALARM);
+					}
 
                                 } else {
                                         /* make sure alarms are off */
@@ -772,24 +750,24 @@ void active_sensor_update(ActiveSensor *active_sensor,
                                 gtk_widget_set_tooltip_text(active_sensor->label,
                                                             tooltip);
 
-                        }
+			}
 
-                        g_free(tooltip);
+			g_free(tooltip);
 		} else {
-                        g_debug("no get_sensor_value function yet installed for interface %s.", sensor_interface);
+			g_debug("no get_sensor_value function yet installed for interface %s.", sensor_interface);
 		}
 		g_free(sensor_path);
 		g_free(sensor_id);
 		g_free(sensor_label);
-        	g_free(sensor_interface);
-	        g_free(graph_color);
+		g_free(sensor_interface);
+		g_free(graph_color);
 		g_object_unref(icon_pixbuf);
 
 	} else {
 		g_debug("Error getting iter when updating sensor...");
 
 	}
-        active_sensor->updated = TRUE;
+	active_sensor->updated = TRUE;
 
 }
 
diff --git a/sensors-applet/active-sensor.h b/sensors-applet/active-sensor.h
index 98c04fb..e166bf1 100644
--- a/sensors-applet/active-sensor.h
+++ b/sensors-applet/active-sensor.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef ACTIVE_SENSOR_H
diff --git a/sensors-applet/main.c b/sensors-applet/main.c
index 6af2187..17fd938 100644
--- a/sensors-applet/main.c
+++ b/sensors-applet/main.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
@@ -30,7 +30,7 @@ static gboolean sensors_applet_fill(PanelApplet *applet,
 	SensorsApplet *sensors_applet;
 	gboolean retval = FALSE;
 
-        if (strcmp(iid, "SensorsApplet") == 0) {
+	if (strcmp(iid, "SensorsApplet") == 0) {
 		sensors_applet = g_new0(SensorsApplet, 1);
 		sensors_applet->applet = applet;
 		sensors_applet_init(sensors_applet);
diff --git a/sensors-applet/org.gnome.sensors-applet.gschema.xml.in.in b/sensors-applet/org.gnome.sensors-applet.gschema.xml.in.in
new file mode 100644
index 0000000..aeae777
--- /dev/null
+++ b/sensors-applet/org.gnome.sensors-applet.gschema.xml.in.in
@@ -0,0 +1,139 @@
+<schemalist>
+  <schema id="org.gnome.sensors-applet">
+    <key name="setup" type="b">
+      <default>false</default>
+      <summary>Configuration in-place and active</summary>
+      <description>A flag indicating program has been configured.</description>
+    </key>
+    <key name="hide-units" type="b">
+      <default>false</default>
+      <summary>Hide temperature units</summary>
+      <description>Hide temperature units.</description>
+    </key>
+    <key name="font-size" type="i">
+      <default>10</default>
+      <summary>Size of the sensors text</summary>
+      <description>Sensors font size.</description>
+    </key>
+    <key name="timeout-delay" type="i">
+      <default>0</default>
+      <summary>Sensors info refresh time</summary>
+      <description>How often sensors info is retreived.</description>
+    </key>
+    <key name="display-mode" type="i">
+      <default>0</default>
+      <summary>Sensors display mode </summary>
+      <description>Icon/label sensors display.</description>
+    </key>
+    <key name="display-notifications" type="b">
+      <default>false</default>
+      <summary>Print sensors notifications</summary>
+      <description>Prints out notifications about sensors status or alerts.</description>
+    </key>
+    <key name="layout-mode" type="i">
+      <default>0</default>
+      <summary>Sensors layout mode</summary>
+      <description>Orientation of sensors label in regard to icons.</description>
+    </key>
+    <key name="temperature-scale" type="i">
+      <default>0</default>
+      <summary>Temperature scale</summary>
+      <description>For temperature related sensors sets the displaying of temperature.</description>
+    </key>
+    <key name="graph-size" type="d">
+      <default>0</default>
+      <summary>Graph width</summary>
+      <description>Width of the senors graph.</description>
+    </key>
+    <key name="libsensors" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="hddtemp" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="i8k" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="nvidia" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="pmu-sys" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="sonypi" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="udisks" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="eee" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="aticonfig" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="acpi" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="i2c-sys" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="ibm-acpi" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="omnibook" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="mbmon" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="smu-sys" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="i2c-proc" type="b">
+      <default>false</default>
+      <summary></summary>
+      <description></description>
+    </key>
+    <key name="sensors-applet-version" type="s">
+      <default>""</default>
+      <summary>Version of the configuration</summary>
+      <description>Binds the config settings to the program version.</description>
+    </key>
+    <key name="slist" type="a(ssssbddbssuuddus)">
+      <default>[]</default>
+      <summary>Array holding sensors data</summary>
+      <description>Serialized data of the sensors info.</description>
+    </key>
+  </schema>
+</schemalist>
diff --git a/sensors-applet/prefs-dialog.c b/sensors-applet/prefs-dialog.c
index c97f441..4887989 100644
--- a/sensors-applet/prefs-dialog.c
+++ b/sensors-applet/prefs-dialog.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
@@ -21,7 +21,7 @@
 #endif /* HAVE_CONFIG_H */
 
 #include <glib/gi18n.h>
-#include "sensors-applet-gconf.h"
+#include "sensors-applet-conf.h"
 #include "prefs-dialog.h"
 #include "sensor-config-dialog.h"
 
@@ -29,14 +29,14 @@
 #define NEW_TEMP_SCALE 1
 
 /* when a user closes the prefs-dialog we assume that applet is now
-   setup, so store all values in gconf */
+   setup, so store all values in confg backend */
 void prefs_dialog_close(SensorsApplet *sensors_applet) {
 
-        if (sensors_applet->sensors != NULL) {
-                if (sensors_applet_gconf_save_sensors(sensors_applet))
-                        panel_applet_gconf_set_bool(sensors_applet->applet,
-                                                    IS_SETUP, TRUE, NULL);
-        }
+	if (sensors_applet->sensors != NULL) {
+		if (sensors_applet_conf_save_sensors(sensors_applet))
+			g_settings_set_boolean(sensors_applet->settings,
+					IS_SETUP, TRUE);
+	}
         if (sensors_applet->prefs_dialog) {
                 gtk_widget_destroy(GTK_WIDGET(sensors_applet->prefs_dialog->dialog));
                 g_free(sensors_applet->prefs_dialog);
@@ -44,7 +44,9 @@ void prefs_dialog_close(SensorsApplet *sensors_applet) {
 
         }
         if (sensors_applet->timeout_id == 0) {
-                sensors_applet->timeout_id = g_timeout_add_seconds(panel_applet_gconf_get_int(sensors_applet->applet, TIMEOUT, NULL) / 1000, (GSourceFunc)sensors_applet_update_active_sensors, sensors_applet);
+                sensors_applet->timeout_id = g_timeout_add_seconds(
+						g_settings_get_int(sensors_applet->settings, TIMEOUT) / 1000,
+						(GSourceFunc)sensors_applet_update_active_sensors, sensors_applet);
         }
 
 
@@ -65,7 +67,7 @@ void prefs_dialog_response(GtkDialog *prefs_dialog,
         case GTK_RESPONSE_HELP:
                 g_debug("loading help in prefs");
                 current_page = gtk_notebook_get_current_page(sensors_applet->prefs_dialog->notebook);
-		uri = g_strdup_printf("ghelp:sensors-applet?%s",
+		uri = g_strdup_printf("help:sensors-applet?%s",
 				      ((current_page == 0) ?
 				       "sensors-applet-general-options" :
 				       ((current_page == 1) ?
@@ -125,7 +127,7 @@ static void prefs_dialog_timeout_changed(GtkSpinButton *button,
                                          PrefsDialog *prefs_dialog) {
         gint value;
         value = (gint)(gtk_spin_button_get_value(button) * 1000);
-        panel_applet_gconf_set_int(prefs_dialog->sensors_applet->applet, TIMEOUT, value, NULL);
+        g_settings_set_int(prefs_dialog->sensors_applet->settings, TIMEOUT, value);
 }
 
 static void prefs_dialog_display_mode_changed(GtkComboBox *display_mode_combo_box,
@@ -149,10 +151,9 @@ static void prefs_dialog_display_mode_changed(GtkComboBox *display_mode_combo_bo
         gtk_widget_set_sensitive(GTK_WIDGET(prefs_dialog->graph_size_spinbutton),
                                  (display_mode == DISPLAY_GRAPH));
 
-        panel_applet_gconf_set_int(prefs_dialog->sensors_applet->applet,
+        g_settings_set_int(prefs_dialog->sensors_applet->settings,
                                    DISPLAY_MODE,
-                                   gtk_combo_box_get_active(display_mode_combo_box),
-                                   NULL);
+                                   gtk_combo_box_get_active(display_mode_combo_box));
 
         sensors_applet_display_layout_changed(prefs_dialog->sensors_applet);
 }
@@ -160,10 +161,9 @@ static void prefs_dialog_display_mode_changed(GtkComboBox *display_mode_combo_bo
 static void prefs_dialog_layout_mode_changed(GtkComboBox *layout_mode_combo_box,
                                              PrefsDialog *prefs_dialog) {
 
-        panel_applet_gconf_set_int(prefs_dialog->sensors_applet->applet,
+        g_settings_set_int(prefs_dialog->sensors_applet->settings,
                                    LAYOUT_MODE,
-                                   gtk_combo_box_get_active(layout_mode_combo_box),
-                                   NULL);
+                                   gtk_combo_box_get_active(layout_mode_combo_box));
 
         sensors_applet_display_layout_changed(prefs_dialog->sensors_applet);
 }
@@ -175,16 +175,14 @@ static void prefs_dialog_temperature_scale_changed(GtkComboBox *temperature_scal
         TemperatureScale scales[2];
         GtkTreeModel *model;
 
-        scales[OLD_TEMP_SCALE] = (TemperatureScale)panel_applet_gconf_get_int(prefs_dialog->sensors_applet->applet,
-                                                                              TEMPERATURE_SCALE,
-                                                                              NULL);
+        scales[OLD_TEMP_SCALE] = (TemperatureScale)g_settings_get_int(prefs_dialog->sensors_applet->settings,
+                                                                              TEMPERATURE_SCALE);
 
         scales[NEW_TEMP_SCALE] = (TemperatureScale)gtk_combo_box_get_active(temperature_scale_combo_box);
 
-        panel_applet_gconf_set_int(prefs_dialog->sensors_applet->applet,
+        g_settings_set_int(prefs_dialog->sensors_applet->settings,
                                    TEMPERATURE_SCALE,
-                                   scales[NEW_TEMP_SCALE],
-                                   NULL);
+                                   scales[NEW_TEMP_SCALE]);
 
         /* now go thru and convert all low and high sensor values in
          * the tree to either celcius or Fahrenheit */
@@ -205,10 +203,9 @@ static void prefs_dialog_display_notifications_toggled(GtkCheckButton *display_n
         gboolean notify;
 
         notify = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(display_notifications));
-        panel_applet_gconf_set_bool(prefs_dialog->sensors_applet->applet,
+        g_settings_set_boolean(prefs_dialog->sensors_applet->settings,
                                     DISPLAY_NOTIFICATIONS,
-                                    notify,
-                                    NULL);
+                                    notify);
 
         if (notify) {
                 sensors_applet_update_active_sensors(prefs_dialog->sensors_applet);
@@ -222,7 +219,7 @@ static void prefs_dialog_graph_size_changed(GtkSpinButton *button,
                                             PrefsDialog *prefs_dialog) {
         gint value;
         value = (gint)(gtk_spin_button_get_value(button));
-        panel_applet_gconf_set_int(prefs_dialog->sensors_applet->applet, GRAPH_SIZE, value, NULL);
+        g_settings_set_double(prefs_dialog->sensors_applet->settings, GRAPH_SIZE, value);
 
         /* notify change of number of samples */
         sensors_applet_graph_size_changed(prefs_dialog->sensors_applet);
@@ -337,7 +334,7 @@ static void prefs_dialog_sensor_down_button_clicked(GtkButton *button, PrefsDial
 
 
 static void prefs_dialog_sensor_config_button_clicked(GtkButton *button, PrefsDialog *prefs_dialog) {
-        sensor_config_dialog_create(prefs_dialog->sensors_applet);
+	sensor_config_dialog_create(prefs_dialog->sensors_applet);
 }
 
 
@@ -413,20 +410,20 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
 
         prefs_dialog->sensors_applet = sensors_applet;
 
-        prefs_dialog->dialog = GTK_DIALOG(gtk_dialog_new_with_buttons(_("Sensors Applet Preferences"),
-                                                                      NULL, 0,
-                                                                      GTK_STOCK_HELP,
-                                                                      GTK_RESPONSE_HELP,
-                                                                      GTK_STOCK_CLOSE,
-                                                                      GTK_RESPONSE_CLOSE,
-                                                                      NULL));
-        gtk_window_set_icon_name(GTK_WINDOW(prefs_dialog->dialog),
-                                 "sensors-applet");
-        g_object_set(prefs_dialog->dialog,
-                     "border-width", 12,
-                     "default-width", 480,
-                     "default-height", 350,
-                     NULL);
+	prefs_dialog->dialog = GTK_DIALOG(gtk_dialog_new_with_buttons(_("Sensors Applet Preferences"),
+						NULL, 0,
+						_("_Help"),
+						GTK_RESPONSE_HELP,
+						_("_Close"),
+						GTK_RESPONSE_CLOSE,
+						NULL));
+	gtk_window_set_icon_name(GTK_WINDOW(prefs_dialog->dialog),
+		"sensors-applet");
+	g_object_set(prefs_dialog->dialog,
+		"border-width", 12,
+		"default-width", 480,
+		"default-height", 350,
+		NULL);
 
 	content_area = gtk_dialog_get_content_area (prefs_dialog->dialog);
         gtk_box_set_homogeneous(GTK_BOX(content_area), FALSE);
@@ -483,7 +480,7 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
 		GTK_COMBO_BOX_TEXT(prefs_dialog->display_mode_combo_box), _("graph only"));
 
 
-        display_mode = panel_applet_gconf_get_int(sensors_applet->applet, DISPLAY_MODE, NULL);
+        display_mode = g_settings_get_int(sensors_applet->settings, DISPLAY_MODE);
         gtk_combo_box_set_active(prefs_dialog->display_mode_combo_box, display_mode);
 
         g_signal_connect(prefs_dialog->display_mode_combo_box,
@@ -516,7 +513,8 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
         gtk_combo_box_text_append_text(
 		GTK_COMBO_BOX_TEXT(prefs_dialog->layout_mode_combo_box), _("below labels / icons"));
 
-        gtk_combo_box_set_active(prefs_dialog->layout_mode_combo_box, panel_applet_gconf_get_int(sensors_applet->applet, LAYOUT_MODE, NULL));
+        gtk_combo_box_set_active(prefs_dialog->layout_mode_combo_box,
+			g_settings_get_int(sensors_applet->settings, LAYOUT_MODE));
 
         g_signal_connect(prefs_dialog->layout_mode_combo_box,
                          "changed",
@@ -546,7 +544,7 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
 
         gtk_combo_box_set_active(
 		prefs_dialog->temperature_scale_combo_box,
-		panel_applet_gconf_get_int(sensors_applet->applet, TEMPERATURE_SCALE, NULL));
+		g_settings_get_int(sensors_applet->settings, TEMPERATURE_SCALE));
 
         g_signal_connect(prefs_dialog->temperature_scale_combo_box,
                          "changed",
@@ -560,26 +558,23 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
                                                              "xalign", 0.0,
                                                              NULL);
 
-        prefs_dialog->graph_size_adjust = g_object_new(GTK_TYPE_ADJUSTMENT,
-                                                       "value", (gdouble)panel_applet_gconf_get_int(sensors_applet->applet,
-                                                                                                    GRAPH_SIZE,
-                                                                                                    NULL),
-                                                       "lower", 1.0,
-                                                       "upper", 100.0,
-                                                       "step-increment", 1.0,
-                                                       "page-increment", 10.0,
-                                                       "page-size", 0.0,
-                                                       NULL);
-
-        prefs_dialog->graph_size_spinbutton = g_object_new(GTK_TYPE_SPIN_BUTTON,
-                                                           "adjustment", prefs_dialog->graph_size_adjust,
-                                                           "climb-rate", 1.0,
-                                                           "digits", 0,
-                                                           "value", (gdouble)panel_applet_gconf_get_int(sensors_applet->applet,
-                                                                                                        GRAPH_SIZE,
-                                                                                                        NULL),
-                                                           "width-chars", 4,
-                                                           NULL);
+	prefs_dialog->graph_size_adjust = g_object_new(GTK_TYPE_ADJUSTMENT,
+						"value", g_settings_get_double(sensors_applet->settings,GRAPH_SIZE),
+						"lower", 1.0,
+						"upper", 100.0,
+						"step-increment", 1.0,
+						"page-increment", 10.0,
+						"page-size", 0.0,
+						NULL);
+
+	prefs_dialog->graph_size_spinbutton = g_object_new(GTK_TYPE_SPIN_BUTTON,
+						"adjustment", prefs_dialog->graph_size_adjust,
+						"climb-rate", 1.0,
+						"digits", 0,
+						"value", g_settings_get_double(sensors_applet->settings,
+									GRAPH_SIZE),
+						"width-chars", 4,
+						NULL);
 
         gtk_widget_set_sensitive(GTK_WIDGET(prefs_dialog->graph_size_spinbutton),
                                  (display_mode == DISPLAY_GRAPH));
@@ -622,7 +617,7 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
                                                         "adjustment", prefs_dialog->timeout_adjust,
                                                         "climb-rate", 0.5,
                                                         "digits", 1,
-                                                        "value", (gdouble) panel_applet_gconf_get_int(sensors_applet->applet, TIMEOUT, NULL) / 1000.0,
+                                                        "value", g_settings_get_int(sensors_applet->settings, TIMEOUT) / 1000.0,
                                                         "width-chars", 4,
                                                         NULL);
 
@@ -653,9 +648,8 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
                                                            "label", _("Display _notifications"),
                                                            NULL);
         gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(prefs_dialog->display_notifications),
-                                    panel_applet_gconf_get_bool(sensors_applet->applet,
-                                                                DISPLAY_NOTIFICATIONS,
-                                                                NULL));
+                                    g_settings_get_boolean(sensors_applet->settings,
+                                                                DISPLAY_NOTIFICATIONS));
         g_signal_connect(prefs_dialog->display_notifications,
                          "toggled",
                          G_CALLBACK(prefs_dialog_display_notifications_toggled),
@@ -680,147 +674,140 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
 
         g_object_unref(prefs_dialog->size_group);
 
-        prefs_dialog->globals_table = g_object_new(GTK_TYPE_TABLE,
-                                                   "homogeneous", FALSE,
-                                                   "n-columns", 3,
-#ifdef HAVE_LIBNOTIFY
-                                                   "n-rows", 9,
-#else
-                                                   "n-rows", 7,
-#endif
+        prefs_dialog->globals_table = g_object_new(GTK_TYPE_GRID,
                                                    "row-spacing", 6,
                                                    "column-spacing", 12,
                                                    NULL);
 
 
-        gtk_table_attach(prefs_dialog->globals_table,
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->display_header),
-                         0, 2,
-                         0, 1,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-
-        gtk_table_attach(prefs_dialog->globals_table,
+                         0, 0,
+                         2, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->display_mode_label),
-                         1, 2,
-                         1, 2,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-
-        gtk_table_attach(prefs_dialog->globals_table,
+                         1, 1,
+			 1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_mode_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->display_mode_combo_box),
-                         2, 3,
-                         1, 2,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
+                         2, 1,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_mode_combo_box),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
 
 
-        gtk_table_attach(prefs_dialog->globals_table,
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->layout_mode_label),
                          1, 2,
-                         2, 3,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-        gtk_table_attach(prefs_dialog->globals_table,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->layout_mode_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->layout_mode_combo_box),
-                         2, 3,
-                         2, 3,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
+                         2, 2,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->layout_mode_combo_box),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
 
 
 
-        gtk_table_attach(prefs_dialog->globals_table,
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->graph_size_label),
-                         1, 2,
-                         3, 4,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-
-        gtk_table_attach(prefs_dialog->globals_table,
+                         1, 3,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->graph_size_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->graph_size_spinbutton),
                          2, 3,
-                         3, 4,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
 
-        gtk_table_attach(prefs_dialog->globals_table,
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->temperature_scale_label),
-                         1, 2,
-                         4, 5,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-        gtk_table_attach(prefs_dialog->globals_table,
+                         1, 4,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->temperature_scale_combo_box),
-                         2, 3,
-                         4, 5,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-
-        gtk_table_attach(prefs_dialog->globals_table,
+                         2, 4,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->update_header),
-                         0, 2,
-                         5, 6,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-
-        gtk_table_attach(prefs_dialog->globals_table,
+                         0, 5,
+                         2, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->timeout_label),
-                         1, 2,
-                         6, 7,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-
-        gtk_table_attach(prefs_dialog->globals_table,
+                         1, 6,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->timeout_spinbutton),
-                         2, 3,
-                         6, 7,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
+                         2, 6,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
 
 
 #ifdef HAVE_LIBNOTIFY
-        gtk_table_attach(prefs_dialog->globals_table,
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->notifications_header),
-                         0, 2,
-                         7, 8,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
-
-        gtk_table_attach(prefs_dialog->globals_table,
+                         0, 7,
+                         2, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
+
+        gtk_grid_attach(prefs_dialog->globals_table,
                          GTK_WIDGET(prefs_dialog->display_notifications),
-                         1, 2,
-                         8, 9,
-                         GTK_FILL,
-                         GTK_FILL,
-                         0,
-                         0);
+                         1, 8,
+                         1, 1);
+	g_object_set (G_OBJECT (prefs_dialog->display_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+			NULL);
 #endif
 
 
@@ -912,14 +899,18 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
            activated */
 
         /* Create buttons for user to interact with sensors tree */
-        prefs_dialog->sensor_up_button = GTK_BUTTON(gtk_button_new_from_stock(GTK_STOCK_GO_UP));
+        prefs_dialog->sensor_up_button = GTK_BUTTON(gtk_button_new_with_label(_("Up")));
+	gtk_button_set_image(GTK_BUTTON(prefs_dialog->sensor_up_button),
+			gtk_image_new_from_icon_name("go-up", GTK_ICON_SIZE_BUTTON));
         gtk_widget_set_sensitive(GTK_WIDGET(prefs_dialog->sensor_up_button), FALSE);
 
         g_signal_connect(prefs_dialog->sensor_up_button, "clicked",
                          G_CALLBACK(prefs_dialog_sensor_up_button_clicked),
                          prefs_dialog);
 
-        prefs_dialog->sensor_down_button = GTK_BUTTON(gtk_button_new_from_stock(GTK_STOCK_GO_DOWN));
+        prefs_dialog->sensor_down_button = GTK_BUTTON(gtk_button_new_with_label(_("Down")));
+	gtk_button_set_image(GTK_BUTTON(prefs_dialog->sensor_down_button),
+			gtk_image_new_from_icon_name("go-down", GTK_ICON_SIZE_BUTTON));
         gtk_widget_set_sensitive(GTK_WIDGET(prefs_dialog->sensor_down_button), FALSE);
 
         g_signal_connect(prefs_dialog->sensor_down_button, "clicked",
@@ -948,86 +939,87 @@ void prefs_dialog_open(SensorsApplet *sensors_applet) {
                            TRUE, TRUE, 0); /* make sure window takes
                                             * up most of room */
 
-        gtk_box_pack_start(prefs_dialog->sensors_hbox,
-                           GTK_WIDGET(prefs_dialog->buttons_box),
-                           FALSE, FALSE, 0);
+	gtk_box_pack_start(prefs_dialog->sensors_hbox,
+		GTK_WIDGET(prefs_dialog->buttons_box),
+		FALSE, FALSE, 0);
 
 
-        /* Sensor Config button */
-        /* initially make button insensitive until user selects a row
+	/* Sensor Config button */
+	/* initially make button insensitive until user selects a row
            from the sensors tree */
-        prefs_dialog->sensor_config_button = GTK_BUTTON(gtk_button_new_from_stock(GTK_STOCK_PROPERTIES));
-        g_object_set(prefs_dialog->sensor_config_button,
-                     "sensitive", FALSE,
-                     NULL);
+	prefs_dialog->sensor_config_button = GTK_BUTTON(gtk_button_new_with_label(_("Properties")));
+	gtk_button_set_image(GTK_BUTTON(prefs_dialog->sensor_config_button),
+			gtk_image_new_from_icon_name("document-properties", GTK_ICON_SIZE_BUTTON));
+	g_object_set(prefs_dialog->sensor_config_button,
+		"sensitive", FALSE,
+		NULL);
 
 
-        g_signal_connect(sensors_applet->selection,
-                         "changed",
-                         G_CALLBACK(prefs_dialog_selection_changed),
-                         prefs_dialog);
+	g_signal_connect(sensors_applet->selection,
+		"changed",
+		G_CALLBACK(prefs_dialog_selection_changed),
+		prefs_dialog);
 
-        /* pass selection to signal handler so we can give user a
+	/* pass selection to signal handler so we can give user a
            sensors_applet->prefs_dialog with the selected rows alarm
            value and enable */
-        g_signal_connect(prefs_dialog->sensor_config_button, "clicked",
-                         G_CALLBACK(prefs_dialog_sensor_config_button_clicked),
-                         prefs_dialog);
-
-        prefs_dialog->sensor_config_hbox = g_object_new(GTK_TYPE_BOX,
-							"orientation", GTK_ORIENTATION_HORIZONTAL,
-                                                        "border-width", 5,
-                                                        "homogeneous", FALSE,
-                                                        "spacing", 0,
-                                                        NULL);
-        gtk_box_pack_end(prefs_dialog->sensor_config_hbox,
-                         GTK_WIDGET(prefs_dialog->sensor_config_button),
-                         FALSE, FALSE, 0);
-
-        /* pack sensors_vbox */
-        prefs_dialog->sensors_vbox = g_object_new(GTK_TYPE_BOX,
-						  "orientation", GTK_ORIENTATION_VERTICAL,
-                                                  "border-width", 5,
-                                                  "homogeneous", FALSE,
-                                                  "spacing", 0,
-                                                  NULL);
-
-        gtk_box_pack_start(prefs_dialog->sensors_vbox,
-                           GTK_WIDGET(prefs_dialog->sensors_hbox),
-                           TRUE, TRUE, 0);
-        gtk_box_pack_start(prefs_dialog->sensors_vbox,
-                           GTK_WIDGET(prefs_dialog->sensor_config_hbox),
-                           FALSE, FALSE, 0);
-
-        prefs_dialog->globals_alignment = g_object_new(GTK_TYPE_ALIGNMENT,
-                                                       "xalign", 0.5,
-                                                       "yalign", 0.0,
-                                                       "top-padding", 12,
-                                                       "left-padding", 12,
-                                                       "bottom-padding", 12,
-                                                       "right-padding", 12,
-                                                       NULL);
-        gtk_container_add(GTK_CONTAINER(prefs_dialog->globals_alignment),
-                          GTK_WIDGET(prefs_dialog->globals_table));
-
-        prefs_dialog->notebook = g_object_new(GTK_TYPE_NOTEBOOK,
-                                              NULL);
-
-        gtk_notebook_append_page(prefs_dialog->notebook,
-                                 GTK_WIDGET(prefs_dialog->globals_alignment),
-                                 gtk_label_new(_("General Options")));
-
-        gtk_notebook_append_page(prefs_dialog->notebook,
-                                 GTK_WIDGET(prefs_dialog->sensors_vbox),
-                                 gtk_label_new(_("Sensors")));
+	g_signal_connect(prefs_dialog->sensor_config_button, "clicked",
+		G_CALLBACK(prefs_dialog_sensor_config_button_clicked),
+		prefs_dialog);
+
+	prefs_dialog->sensor_config_hbox = g_object_new(GTK_TYPE_BOX,
+						"orientation", GTK_ORIENTATION_HORIZONTAL,
+						"border-width", 5,
+						"homogeneous", FALSE,
+						"spacing", 0,
+						NULL);
+	gtk_box_pack_end(prefs_dialog->sensor_config_hbox,
+		GTK_WIDGET(prefs_dialog->sensor_config_button),
+		FALSE, FALSE, 0);
+
+	/* pack sensors_vbox */
+	prefs_dialog->sensors_vbox = g_object_new(GTK_TYPE_BOX,
+					"orientation", GTK_ORIENTATION_VERTICAL,
+					"border-width", 5,
+					"homogeneous", FALSE,
+					"spacing", 0,
+					NULL);
+
+	gtk_box_pack_start(prefs_dialog->sensors_vbox,
+		GTK_WIDGET(prefs_dialog->sensors_hbox),
+		TRUE, TRUE, 0);
+	gtk_box_pack_start(prefs_dialog->sensors_vbox,
+		GTK_WIDGET(prefs_dialog->sensor_config_hbox),
+		FALSE, FALSE, 0);
+
+	prefs_dialog->globals_box = g_object_new(GTK_TYPE_BOX,
+						"xalign", 0.5,
+						"yalign", 0.0,
+						"top-padding", 12,
+						"left-padding", 12,
+						"bottom-padding", 12,
+						"right-padding", 12,
+						NULL);
+	gtk_container_add(GTK_CONTAINER(prefs_dialog->globals_box),
+		GTK_WIDGET(prefs_dialog->globals_table));
+
+	prefs_dialog->notebook = g_object_new(GTK_TYPE_NOTEBOOK, NULL);
+
+	gtk_notebook_append_page(prefs_dialog->notebook,
+		GTK_WIDGET(prefs_dialog->globals_box),
+		gtk_label_new(_("General Options")));
+
+	gtk_notebook_append_page(prefs_dialog->notebook,
+		GTK_WIDGET(prefs_dialog->sensors_vbox),
+		gtk_label_new(_("Sensors")));
 
 	content_area = gtk_dialog_get_content_area (prefs_dialog->dialog);
-        /* pack notebook into prefs_dialog */
-        gtk_box_pack_start(GTK_BOX(content_area),
-                                    GTK_WIDGET(prefs_dialog->notebook),
-				    FALSE, FALSE,
-				    0);
+	/* pack notebook into prefs_dialog */
+	gtk_box_pack_start(GTK_BOX(content_area),
+		GTK_WIDGET(prefs_dialog->notebook),
+		FALSE, FALSE,
+		0);
 
 
-        gtk_widget_show_all(GTK_WIDGET(prefs_dialog->dialog));
+	gtk_widget_show_all(GTK_WIDGET(prefs_dialog->dialog));
 }
diff --git a/sensors-applet/prefs-dialog.h b/sensors-applet/prefs-dialog.h
index c8fe205..a768383 100644
--- a/sensors-applet/prefs-dialog.h
+++ b/sensors-applet/prefs-dialog.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef PREFS_DIALOG_H
@@ -24,6 +24,7 @@
 #endif
 
 #include "sensors-applet.h"
+#include <gtk/gtk.h>
 
 typedef struct {
         SensorsApplet *sensors_applet;
@@ -32,7 +33,7 @@ typedef struct {
 
         /* widgets for global prefs */
         GtkSpinButton *timeout_spinbutton, *graph_size_spinbutton;
-        GtkTable *globals_table;
+        GtkGrid *globals_table;
         GtkSeparator *globals_separator;
         GtkComboBox *display_mode_combo_box, *layout_mode_combo_box, *temperature_scale_combo_box;
         GtkLabel *timeout_label, *display_mode_label, *layout_mode_label, *temperature_scale_label, *graph_size_label, *update_header, *display_header;
@@ -52,7 +53,7 @@ typedef struct {
         GtkButtonBox *buttons_box; /* holds sensor reorder buttons */
         GtkBox *sensors_hbox; /* holds scrolled window and
                                * buttons_vbox */
-        GtkAlignment *globals_alignment;
+	GtkBox *globals_box;
         GtkBox *sensors_vbox; /* holds sensors_hbox and sensor_config_hbox */
         GtkBox *sensor_config_hbox; /* holds config button */
         GtkSizeGroup *size_group; /* so comboboxes all
diff --git a/sensors-applet/sensor-config-dialog.c b/sensors-applet/sensor-config-dialog.c
index 6e2d4d9..d1d6f92 100644
--- a/sensors-applet/sensor-config-dialog.c
+++ b/sensors-applet/sensor-config-dialog.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
@@ -34,34 +34,28 @@ typedef struct {
         /* icon widgets */
         GtkLabel *icon_header, *icon_type_label;
         GtkComboBox *icon_type_combo_box;
-        GtkAlignment *icon_type_combo_box_aligner;
         GtkCellRenderer *icon_renderer;
 
         /* Graph Color chooser */
         GtkColorButton *graph_color_button;
-        GtkAlignment *graph_color_button_aligner;
         GtkLabel *graph_color_label, *graph_header;
 
         /* multiplier and offset widgets */
 	GtkLabel *scale_header, *multiplier_label, *offset_label;
-	GtkAlignment *multiplier_spinbutton_aligner, *offset_spinbutton_aligner;
 	GtkAdjustment *multiplier_adjust, *offset_adjust;
 	GtkSpinButton *multiplier_spinbutton, *offset_spinbutton;
 
         GtkLabel *limits_header;
         GtkLabel *low_value_label, *high_value_label;
-	GtkAlignment *low_value_spinbutton_aligner, *high_value_spinbutton_aligner;
 	GtkAdjustment *low_value_adjust, *high_value_adjust;
 	GtkSpinButton *low_value_spinbutton, *high_value_spinbutton;
 
 	/* alarm widgets */
         GtkLabel *alarm_header;
 	GtkLabel *low_alarm_command_label, *high_alarm_command_label, *alarm_timeout_label;
-	GtkAlignment *alarm_timeout_spinbutton_aligner;
 	GtkAdjustment *alarm_timeout_adjust;
 	GtkSpinButton *alarm_timeout_spinbutton;
-	GtkTable *table;
-	GtkAlignment *alarm_enable_aligner;
+	GtkGrid *table;
 	GtkCheckButton *alarm_enable_checkbutton;
 	GtkEntry *low_alarm_command_entry, *high_alarm_command_entry;
 
@@ -80,7 +74,7 @@ static void sensor_config_dialog_response(GtkDialog *dialog,
         case GTK_RESPONSE_HELP:
                 g_debug("loading help in config dialog");
                 gtk_show_uri(NULL,
-			     "ghelp:sensors-applet?sensors-applet-sensors",
+			     "help:sensors-applet?sensors-applet-sensors",
 			     gtk_get_current_event_time(),
 			     &error);
                 
@@ -318,19 +312,21 @@ static void sensor_config_dialog_icon_type_changed(GtkComboBox *icon_type_combo_
         }
 }
 
+
 static void sensor_config_dialog_graph_color_set(GtkColorButton *color_button,
                                                  SensorConfigDialog *config_dialog) {
 	GtkTreeModel *model;
 	GtkTreePath *path;
 	GtkTreeIter iter;
-	GdkColor color;
+	GdkRGBA color;
         gchar *color_string;
 
-        gtk_color_button_get_color(color_button,
+        gtk_color_chooser_get_rgba(GTK_COLOR_CHOOSER(color_button),
                                    &color);
 
-        color_string = g_strdup_printf("#%02X%02X%02X", color.red / 256, 
-                                       color.green / 256, color.blue / 256);
+	color_string = g_strdup_printf ("#%02X%02X%02X", (int)(0.5 + CLAMP (color.red, 0., 1.) * 255.),
+					(int)(0.5 + CLAMP (color.green, 0., 1.) * 255.),
+					(int)(0.5 + CLAMP (color.blue, 0., 1.) * 255.));
 
         gtk_tree_selection_get_selected(config_dialog->sensors_applet->selection,
 					&model,
@@ -360,7 +356,7 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
         IconType count;
         GdkPixbuf *pixbuf;
 
-        GdkColor graph_color;        
+        GdkRGBA graph_color;
         gchar *sensor_label;
         gchar *header_text;
         
@@ -395,18 +391,18 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
         header_text = g_strdup_printf("%s - %s", _("Sensor Properties"), sensor_label);
 
 	config_dialog->dialog = gtk_dialog_new_with_buttons(header_text,
-                                                            GTK_WINDOW(sensors_applet->prefs_dialog->dialog),
-                                                            GTK_DIALOG_DESTROY_WITH_PARENT,
-                                                            GTK_STOCK_HELP,
-                                                            GTK_RESPONSE_HELP,
-                                                            GTK_STOCK_CLOSE,
-                                                            GTK_RESPONSE_CLOSE,
-                                                            NULL);
-        gtk_window_set_icon_name(GTK_WINDOW(config_dialog->dialog),
-                                 "sensors-applet");
-        
-        g_free(header_text);
-        g_free(sensor_label);
+					GTK_WINDOW(sensors_applet->prefs_dialog->dialog),
+					GTK_DIALOG_DESTROY_WITH_PARENT,
+					_("_Help"),
+					GTK_RESPONSE_HELP,
+					_("_Close"),
+					GTK_RESPONSE_CLOSE,
+					NULL);
+	gtk_window_set_icon_name(GTK_WINDOW(config_dialog->dialog), 
+		"sensors-applet");
+
+	g_free(header_text);
+	g_free(sensor_label);
 
 	g_object_set(config_dialog->dialog,
 		     "border-width", 12,
@@ -421,27 +417,21 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
         /* graph stuff */
         header_text = g_markup_printf_escaped("<b>%s</b>", _("Graph"));
         config_dialog->graph_header = g_object_new(GTK_TYPE_LABEL,
-                                   "use-markup", TRUE,
-                                   "label", header_text,
-                                   "xalign", 0.0,
-                                   NULL);
-        g_free(header_text);
+					"use-markup", TRUE,
+					"label", header_text,
+					"xalign", 0.0,
+					NULL);
+	g_free(header_text);
 
 
-        gdk_color_parse(graph_color_string,
-                        &graph_color);
+        gdk_rgba_parse(&graph_color, graph_color_string);
         
-        config_dialog->graph_color_button = GTK_COLOR_BUTTON(gtk_color_button_new_with_color(&graph_color));
-	config_dialog->graph_color_button_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-                                                  "child", config_dialog->graph_color_button,
-                                                   "xalign", 0.0,
-                                                   "xscale", 0.0,
-                                                   NULL);
+        config_dialog->graph_color_button = GTK_COLOR_BUTTON(gtk_color_button_new_with_rgba(&graph_color));
 
         gtk_color_button_set_title(config_dialog->graph_color_button, _("Graph Color"));
         
         config_dialog->graph_color_label = g_object_new(GTK_TYPE_LABEL,
-                                         "label", _("Graph _color"),
+					"label", _("Graph _color"),
 					"mnemonic-widget", config_dialog->graph_color_button,
 					"use-underline", TRUE,
 					"xalign", 0.0,
@@ -478,12 +468,6 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
         
         config_dialog->icon_type_combo_box = GTK_COMBO_BOX(gtk_combo_box_new_with_model(GTK_TREE_MODEL(icon_store)));
 
-	config_dialog->icon_type_combo_box_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-                                                   "child", config_dialog->icon_type_combo_box,
-                                                   "xalign", 0.0,
-                                                   "xscale", 0.0,
-                                                   NULL);
-
         config_dialog->icon_renderer = gtk_cell_renderer_pixbuf_new();
         gtk_cell_layout_pack_start(GTK_CELL_LAYOUT(config_dialog->icon_type_combo_box),
                                    GTK_CELL_RENDERER(config_dialog->icon_renderer),
@@ -501,7 +485,7 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
                          config_dialog);
 
 
-        
+
         config_dialog->icon_type_label = g_object_new(GTK_TYPE_LABEL,
  					"label", _("Sensor _icon"),
 					"mnemonic-widget", config_dialog->icon_type_combo_box,
@@ -527,7 +511,7 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
 			      "page-size", 1.0,
 			      NULL);
 
-	
+
 	config_dialog->multiplier_spinbutton = g_object_new(GTK_TYPE_SPIN_BUTTON,
 					     "adjustment", config_dialog->multiplier_adjust,
 					     "digits", VALUE_DECIMAL_PLACES,
@@ -535,12 +519,6 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
 					     "width-chars", SPINBUTTON_WIDTH_CHARS,
 					     NULL);
 
-	config_dialog->multiplier_spinbutton_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-						     "child", config_dialog->multiplier_spinbutton,
-						     "xalign", 0.0,
-						     "xscale", 0.0,
-						     NULL);
-
 	config_dialog->multiplier_label = g_object_new(GTK_TYPE_LABEL,
                                                        "label", _("Sensor value _multiplier"),
                                                        "mnemonic-widget", config_dialog->multiplier_spinbutton,
@@ -550,7 +528,7 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
 	
 	
 	g_signal_connect(config_dialog->multiplier_spinbutton, "value-changed", G_CALLBACK(sensor_config_dialog_multiplier_changed), config_dialog);
-	
+
 
 	config_dialog->offset_adjust = g_object_new(GTK_TYPE_ADJUSTMENT,
 				     "value", 0.0,
@@ -567,12 +545,6 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
 					 "value", (gdouble)offset,
 					 "width-chars", SPINBUTTON_WIDTH_CHARS,
 					 NULL);
-	
-	config_dialog->offset_spinbutton_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-						 "child", config_dialog->offset_spinbutton,
-						 "xalign", 0.0,
-						 "xscale", 0.0,
-						 NULL);
 
 	config_dialog->offset_label = g_object_new(GTK_TYPE_LABEL,
 				    "label", _("Sensor value _offset"),
@@ -602,30 +574,22 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
                                         "page-size", 100.0,
                                         NULL);
 
-	
+
 	config_dialog->low_value_spinbutton = g_object_new(GTK_TYPE_SPIN_BUTTON,
                                                            "adjustment", config_dialog->low_value_adjust,
                                                            "digits", VALUE_DECIMAL_PLACES,
                                                            "value", low_value,
                                                            "width-chars", SPINBUTTON_WIDTH_CHARS,
-
 					      NULL);
-	
-	config_dialog->low_value_spinbutton_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-					  "child", config_dialog->low_value_spinbutton,
-					  "xalign", 0.0,
-					  "xscale", 0.0,
-					  NULL);
 
 	config_dialog->low_value_label = g_object_new(GTK_TYPE_LABEL,
                                                       "label", _("Sensor _low value"),
                                                       "mnemonic-widget", config_dialog->low_value_spinbutton,
                                                       "use-underline", TRUE,
                                                       "xalign", 0.0,
-
 					 NULL);
 
-	
+
 	g_signal_connect(config_dialog->low_value_spinbutton, "value-changed", G_CALLBACK(sensor_config_dialog_low_value_changed), config_dialog);
 
 	config_dialog->high_value_adjust = g_object_new(GTK_TYPE_ADJUSTMENT,
@@ -637,21 +601,13 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
 			      "page-size", 100.0,
 			      NULL);
 
-	
 	config_dialog->high_value_spinbutton = g_object_new(GTK_TYPE_SPIN_BUTTON,
                                                             "adjustment", config_dialog->high_value_adjust,
                                                             "digits", VALUE_DECIMAL_PLACES,
                                                             "value", high_value,
                                                             "width-chars", SPINBUTTON_WIDTH_CHARS,
-
                                                             NULL);
-	
-	config_dialog->high_value_spinbutton_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-                                                                    "child", config_dialog->high_value_spinbutton,
-                                                                    "xalign", 0.0,
-                                                                    "xscale", 0.0,
-                                                                    NULL);
-        
+
 	config_dialog->high_value_label = g_object_new(GTK_TYPE_LABEL,
                                                        "label", _("Sensor _high value"),
                                                        "mnemonic-widget", config_dialog->high_value_spinbutton,
@@ -687,14 +643,8 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
                                                                "value", (gdouble)alarm_timeout,
                                                                "width-chars", SPINBUTTON_WIDTH_CHARS,
                                                                "sensitive", alarm_enable,
-
 						NULL);
-	config_dialog->alarm_timeout_spinbutton_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-							"child", config_dialog->alarm_timeout_spinbutton,
-							"xalign", 0.0,
-							"xscale", 0.0,
-							NULL);
-	
+
 	config_dialog->alarm_timeout_label = g_object_new(GTK_TYPE_LABEL,
                                                           "label", _("Alarm _repeat interval (secs)"),
                                                           "mnemonic-widget", config_dialog->alarm_timeout_spinbutton,
@@ -756,15 +706,9 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
 						"active", alarm_enable,
 						"xalign", 0.0,
 						NULL);
-	
-	config_dialog->alarm_enable_aligner = g_object_new(GTK_TYPE_ALIGNMENT,
-					    "child", config_dialog->alarm_enable_checkbutton,
-					    "xalign", 0.0,
-					    "xscale", 0.0,
-					    NULL);
 
 	g_signal_connect(config_dialog->alarm_enable_checkbutton, "toggled", G_CALLBACK(sensor_config_dialog_alarm_toggled), config_dialog);
-	
+
 
 
         config_dialog->size_group = gtk_size_group_new(GTK_SIZE_GROUP_HORIZONTAL);
@@ -784,140 +728,214 @@ void sensor_config_dialog_create(SensorsApplet *sensors_applet) {
                                   GTK_WIDGET(config_dialog->graph_color_button));
         g_object_unref(config_dialog->size_group);
 
-	config_dialog->table = g_object_new(GTK_TYPE_TABLE,
+	config_dialog->table = g_object_new(GTK_TYPE_GRID,
 			     "column-spacing", 5,
-			     "homogeneous", FALSE,
-			     "n-columns", 3,
-			     "n-rows", 15,
                              "row-spacing", 6,
-                             "column-spacing", 12,
 			     NULL);
 
 
-        gtk_table_attach_defaults(config_dialog->table,
+        gtk_grid_attach(config_dialog->table,
                                   GTK_WIDGET(config_dialog->scale_header),
-                                  0, 2,
-                                  0, 1);
-
-	gtk_table_attach_defaults(config_dialog->table,
+                                  0, 0,
+				  2, 1);
+	g_object_set (G_OBJECT (config_dialog->scale_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->multiplier_label),
-				  1, 2,
-				  1, 2);
-	
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->multiplier_spinbutton_aligner),
-				  2, 3,
-				  1, 2);
-	
-	gtk_table_attach_defaults(config_dialog->table,
+				  1, 1,
+				  1, 1);
+	g_object_set (G_OBJECT (config_dialog->multiplier_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+	
+	gtk_grid_attach(config_dialog->table,
+				  GTK_WIDGET(config_dialog->multiplier_spinbutton),
+				  2, 1,
+				  1, 1);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->offset_label),
 				  1, 2,
-				  2, 3);
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->offset_spinbutton_aligner),
-				  2, 3,
-				  2, 3);
-	
-	gtk_table_attach_defaults(config_dialog->table,
+				  1, 1);
+	g_object_set (G_OBJECT (config_dialog->offset_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->offset_spinbutton),
+		2, 2,
+		1, 1);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->limits_header),
-				  0, 2,
-				  3, 4);
+				  0, 3,
+				  2, 1);
+	g_object_set (G_OBJECT (config_dialog->limits_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
 
 	/* now pack alarm widgets */
-        gtk_table_attach_defaults(config_dialog->table,
+        gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->low_value_label),
-				  1, 2,
-				  4, 5);
-	
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->low_value_spinbutton_aligner),
-				  2, 3,
-				  4, 5);
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->high_value_label),
-				  1, 2,
-				  5, 6);
-	
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->high_value_spinbutton_aligner),
-				  2, 3,
-				  5, 6);
-	
-	gtk_table_attach_defaults(config_dialog->table,
+				  1, 4,
+				  1, 1);
+	g_object_set (G_OBJECT (config_dialog->low_value_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+	
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->low_value_spinbutton),
+		2, 4,
+		1, 1);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->high_value_label),
+		1, 5,
+		1, 1);
+	g_object_set (G_OBJECT (config_dialog->high_value_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+	
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->high_value_spinbutton),
+		2, 5,
+		1, 1);
+	g_object_set (G_OBJECT (config_dialog->high_value_spinbutton),
+		"halign", GTK_ALIGN_FILL,
+		"valign", GTK_ALIGN_FILL,
+		"vexpand", TRUE,
+		"hexpand", TRUE,
+		NULL);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->alarm_header),
-				  0, 2,
-				  6, 7);
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->alarm_enable_aligner),
-				  1, 2,
-				  7, 8);	
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->alarm_timeout_label),
-				  1, 2,
-				  8, 9);
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->alarm_timeout_spinbutton_aligner),
-				  2, 3,
-				  8, 9);
-	
-	gtk_table_attach_defaults(config_dialog->table,
+				  0, 6,
+				  2, 1);
+	g_object_set (G_OBJECT (config_dialog->alarm_header),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->alarm_enable_checkbutton),
+		1, 7,
+		1, 1);
+	g_object_set (G_OBJECT (config_dialog->alarm_enable_checkbutton),
+		"halign", GTK_ALIGN_FILL,
+		"valign", GTK_ALIGN_FILL,
+		"vexpand", TRUE,
+		"hexpand", TRUE,
+		NULL);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->alarm_timeout_label),
+		1, 8,
+		1, 1);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->alarm_timeout_spinbutton),
+		2, 8,
+		1, 1);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->low_alarm_command_label),
-				  1, 2,
-				  9, 10);
-
-	gtk_table_attach_defaults(config_dialog->table,
+				  1, 9,
+				  1, 1);
+	g_object_set (G_OBJECT (config_dialog->low_alarm_command_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->low_alarm_command_entry),
-				  2, 3,
-				  9, 10);
-
-	gtk_table_attach_defaults(config_dialog->table,
+				  2, 9,
+				  1, 1);
+	g_object_set (G_OBJECT (config_dialog->low_alarm_command_entry),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->high_alarm_command_label),
-				  1, 2,
-				  10, 11);
-
-	gtk_table_attach_defaults(config_dialog->table,
+				  1, 10,
+				  1, 1);
+	g_object_set (G_OBJECT (config_dialog->high_alarm_command_label),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+
+	gtk_grid_attach(config_dialog->table,
 				  GTK_WIDGET(config_dialog->high_alarm_command_entry),
-				  2, 3,
-				  10, 11);
-
-        gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->icon_header),
-				  0, 2,
-				  11, 12);
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->icon_type_label),
-				  1, 2,
-				  12, 13);
-	
-        gtk_table_attach_defaults(config_dialog->table,
-                                  GTK_WIDGET(config_dialog->icon_type_combo_box_aligner),
-                                  2, 3,
-                                  12, 13);
-        
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->graph_header),
-				  0, 2,
-				  13, 14);
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->graph_color_label),
-				  1, 2,
-				  14, 15);
-
-	gtk_table_attach_defaults(config_dialog->table,
-				  GTK_WIDGET(config_dialog->graph_color_button_aligner),
-				  2, 3,
-				  14, 15);
+				  2, 10,
+				  1, 1);
+	g_object_set (G_OBJECT (config_dialog->high_alarm_command_entry),
+                       "halign", GTK_ALIGN_FILL,
+                       "valign", GTK_ALIGN_FILL,
+		       "vexpand", TRUE,
+		       "hexpand", TRUE,
+                       NULL);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->icon_header),
+		0, 11,
+		2, 1);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->icon_type_label),
+		1, 12,
+		1, 1);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->icon_type_combo_box),
+		2, 12,
+		1, 1);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->graph_header),
+		0, 13,
+		2, 1);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->graph_color_label),
+		1, 14,
+		1, 1);
+
+	gtk_grid_attach(config_dialog->table,
+		GTK_WIDGET(config_dialog->graph_color_button),
+		2, 14,
+		1, 1);
 
 	content_area = gtk_dialog_get_content_area (GTK_DIALOG(config_dialog->dialog));
 	gtk_box_pack_start(GTK_BOX(content_area), GTK_WIDGET(config_dialog->table),
 		FALSE, FALSE, 0);
 	gtk_widget_show_all(config_dialog->dialog);
 
-}		
+}
diff --git a/sensors-applet/sensor-config-dialog.h b/sensors-applet/sensor-config-dialog.h
index 53929f6..8d991e8 100644
--- a/sensors-applet/sensor-config-dialog.h
+++ b/sensors-applet/sensor-config-dialog.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SENSOR_CONFIG_DIALOG_H
diff --git a/sensors-applet/sensors-applet-conf.c b/sensors-applet/sensors-applet-conf.c
new file mode 100644
index 0000000..e806868
--- /dev/null
+++ b/sensors-applet/sensors-applet-conf.c
@@ -0,0 +1,301 @@
+/*
+ * Copyright (C) 2005-2009 Alex Murray <murray.alex@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
+#include <glib/gi18n.h>
+
+#include "sensors-applet.h"
+#include "sensors-applet-conf.h"
+
+#define DEFAULT_TIMEOUT 2000
+#define DEFAULT_GRAPH_SIZE 42
+
+static const gchar * const compatible_versions[] = {
+        PACKAGE_VERSION, /* always list current version */
+	"3.0.0",
+        "2.2.7",
+        "2.2.6",
+        "2.2.5",
+	"2.2.4",
+        "2.2.3",
+	"2.2.2",
+};
+
+#define NUM_COMPATIBLE_VERSIONS G_N_ELEMENTS(compatible_versions)
+
+typedef enum {
+        SENSORS_APPLET_GCONF_ERROR = 0,
+        SENSORS_APPLET_VERSION_ERROR,
+} SensorsAppletGConfError;
+
+static const gchar * const error_titles[] = {
+        N_("An error occurred loading the stored sensors data"),
+        N_("Incompatible sensors configuration found")
+};
+
+static const gchar * const error_messages[] = {
+        N_("An error has occurred when loading the stored sensors data. "
+           "The default values will be used to recover from this error."),
+
+        N_("Unfortunately the previous configuration for GNOME Sensors Applet "
+           "is not compatible with this version. The existing sensors data "
+           "will be overwritten with the default values for this new version.")
+};
+
+
+static void sensors_applet_conf_set_defaults(SensorsApplet *sensors_applet) {
+	g_settings_set_int(sensors_applet->settings, DISPLAY_MODE, DISPLAY_ICON_WITH_VALUE);
+	g_settings_set_int(sensors_applet->settings, LAYOUT_MODE, VALUE_BESIDE_LABEL);
+	g_settings_set_int(sensors_applet->settings, TEMPERATURE_SCALE, CELSIUS);
+	g_settings_set_int(sensors_applet->settings, TIMEOUT, DEFAULT_TIMEOUT);
+	g_settings_set_double(sensors_applet->settings, GRAPH_SIZE, DEFAULT_GRAPH_SIZE);
+#ifdef HAVE_LIBNOTIFY
+	g_settings_set_boolean(sensors_applet->settings, DISPLAY_NOTIFICATIONS, TRUE);
+#endif
+	g_settings_set_boolean(sensors_applet->settings, IS_SETUP, FALSE);
+
+}
+
+/**
+ * Returns TRUE is old_version is one of the compatible versions
+ */
+static gboolean sensors_applet_conf_is_compatible(const gchar *old_version) {
+	guint i;
+	for (i = 0; i < NUM_COMPATIBLE_VERSIONS; i++) {
+		if (g_ascii_strcasecmp(old_version, compatible_versions[i]) == 0) {
+			return TRUE;
+		}
+	}
+	return FALSE;
+}
+
+
+void sensors_applet_conf_setup(SensorsApplet *sensors_applet) {
+	gboolean setup = FALSE;
+	gchar *old_version;
+	GError *error = NULL;
+
+	setup = g_settings_get_boolean(sensors_applet->settings, IS_SETUP);
+
+	if (setup) {
+		/* see if setup version matches */
+		old_version = g_settings_get_string(sensors_applet->settings,
+				SENSORS_APPLET_VERSION);
+		/* if versions don't match or there is no saved
+                 * version string then need to overwrite old config */
+
+		if (old_version) {
+			if (sensors_applet_conf_is_compatible(old_version)) {
+				/* previously setup and versions match so use
+                                 * old values */
+				g_debug("Config data is compatible. Trying to set up sensors from config data");
+
+				if (sensors_applet_conf_setup_sensors(sensors_applet)) {
+					g_debug("done setting up from config backend");
+				} else {
+					g_debug("Setting conf defaults only");
+					sensors_applet_conf_set_defaults(sensors_applet);
+				}
+				g_free(old_version);
+
+				return;
+
+
+			}
+			g_free(old_version);
+		}
+		sensors_applet_notify(sensors_applet, GCONF_READ_ERROR);
+
+
+	}
+
+	/* use defaults */
+	g_debug("Setting config defaults only");
+	sensors_applet_conf_set_defaults(sensors_applet);
+}
+
+
+enum {
+        PATHS_INDEX = 0,
+        IDS_INDEX,
+        LABELS_INDEX,
+        INTERFACES_INDEX,
+        SENSOR_TYPES_INDEX,
+        ENABLES_INDEX,
+        LOW_VALUES_INDEX,
+        HIGH_VALUES_INDEX,
+        ALARM_ENABLES_INDEX,
+        LOW_ALARM_COMMANDS_INDEX,
+        HIGH_ALARM_COMMANDS_INDEX,
+        ALARM_TIMEOUTS_INDEX,
+        MULTIPLIERS_INDEX,
+        OFFSETS_INDEX,
+        ICON_TYPES_INDEX,
+        GRAPH_COLORS_INDEX,
+        NUM_KEYS
+};
+
+const gchar * const keys[NUM_KEYS] = {
+	PATHS,
+	IDS,
+	LABELS,
+	INTERFACES,
+	SENSOR_TYPES,
+	ENABLES,
+	LOW_VALUES,
+	HIGH_VALUES,
+	ALARM_ENABLES,
+	LOW_ALARM_COMMANDS,
+	HIGH_ALARM_COMMANDS,
+	ALARM_TIMEOUTS,
+	MULTIPLIERS,
+	OFFSETS,
+	ICON_TYPES,
+	GRAPH_COLORS,
+};
+
+/* gets called if are already setup so we don't have to manually go
+   through and find sensors etc again */
+gboolean sensors_applet_conf_setup_sensors(SensorsApplet *sensors_applet) {
+	/* everything gets stored except alarm timeout indexes, which
+	   we set to -1, and visible which we set to false for all
+	   parent nodes and true for all child nodes */
+
+	GVariantIter *iter;
+
+	gchar *current_path, *current_id, *current_label, *current_interface,
+		*current_low_alarm_command, *current_high_alarm_command,
+		*current_graph_color;
+	gboolean current_enable, current_alarm_enable;
+	gdouble current_low_value, current_high_value, current_multiplier,
+		current_offset;
+	guint32 current_sensor_type, current_alarm_timeout,
+		current_icon_type;
+
+	g_settings_get (sensors_applet->settings, "slist", "a(ssssbddbssuuddus)", &iter);
+
+	while (g_variant_iter_loop (iter, "(ssssbddbssuuddus)", &current_path, &current_id, &current_label,
+		&current_interface, &current_enable, &current_low_value, &current_high_value, &current_alarm_enable,
+		&current_low_alarm_command, &current_high_alarm_command, &current_alarm_timeout, &current_sensor_type,
+		&current_multiplier, &current_offset, &current_icon_type, &current_graph_color)) {
+
+		sensors_applet_add_sensor(sensors_applet,
+			current_path, current_id, current_label, current_interface,
+			current_sensor_type,
+			current_enable,
+			current_low_value / 1000.0,
+			current_high_value / 1000.0,
+			current_alarm_enable,
+			current_low_alarm_command,
+			current_high_alarm_command,
+			current_alarm_timeout,
+			current_multiplier / 1000.0,
+			current_offset / 1000.0,
+			current_icon_type, current_graph_color);
+
+	}
+
+	return TRUE;
+}
+
+
+gboolean sensors_applet_conf_save_sensors(SensorsApplet *sensors_applet) {
+	/* write everything to conf backend except VISIBLE and
+	   ALARM_TIMEOUT_INDEX */
+	/* for stepping through GtkTreeStore data structure */
+	GtkTreeIter interfaces_iter, sensors_iter;
+	gboolean not_end_of_interfaces = TRUE, not_end_of_sensors = TRUE;
+
+	gchar *current_path, *current_id, *current_label, *current_interface,
+		*current_low_alarm_command, *current_high_alarm_command,
+		*current_graph_color;
+	gboolean current_enable, current_alarm_enable;
+	gdouble current_low_value, current_high_value, current_multiplier,
+		current_offset;
+	guint32 current_sensor_type, current_icon_type, current_alarm_timeout;
+	GVariant *vval;
+
+	GVariantBuilder builder;
+
+	g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(ssssbddbssuuddus)"));
+
+	/* now step through the GtkTreeStore sensors to
+	   find which sensors are enabled */
+	for (gtk_tree_model_get_iter_first(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter);
+			not_end_of_interfaces;
+			not_end_of_interfaces = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter)) {
+		// store a settings key for this interface
+		gtk_tree_model_get(GTK_TREE_MODEL(sensors_applet->sensors),
+			&interfaces_iter,
+			ID_COLUMN, &current_id,
+			-1);
+
+		g_settings_set_boolean(sensors_applet->settings, current_id, TRUE);
+		g_free(current_id);
+
+		/* reset sensors sentinel */
+		not_end_of_sensors = TRUE;
+
+		for (gtk_tree_model_iter_children(GTK_TREE_MODEL(sensors_applet->sensors), &sensors_iter, &interfaces_iter);
+				not_end_of_sensors;
+				not_end_of_sensors = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), &sensors_iter)) {
+			gtk_tree_model_get(GTK_TREE_MODEL(sensors_applet->sensors),
+				&sensors_iter,
+				PATH_COLUMN, &current_path,
+				ID_COLUMN, &current_id,
+				LABEL_COLUMN, &current_label,
+				INTERFACE_COLUMN, &current_interface,
+				SENSOR_TYPE_COLUMN, &current_sensor_type,
+				ENABLE_COLUMN, &current_enable,
+				LOW_VALUE_COLUMN, &current_low_value,
+				HIGH_VALUE_COLUMN, &current_high_value,
+				ALARM_ENABLE_COLUMN, &current_alarm_enable,
+				LOW_ALARM_COMMAND_COLUMN, &current_low_alarm_command,
+				HIGH_ALARM_COMMAND_COLUMN, &current_high_alarm_command,
+				ALARM_TIMEOUT_COLUMN, &current_alarm_timeout,
+				MULTIPLIER_COLUMN, &current_multiplier,
+				OFFSET_COLUMN, &current_offset,
+				ICON_TYPE_COLUMN, &current_icon_type,
+				GRAPH_COLOR_COLUMN, &current_graph_color,
+				-1);
+
+			vval = g_variant_new("(ssssbddbssuuddus)", g_strdup(current_path),
+				g_strdup(current_id), g_strdup(current_label), g_strdup(current_interface),
+				current_enable, current_low_value * 1000,
+				current_high_value * 1000, current_alarm_enable,
+				current_low_alarm_command, current_high_alarm_command,
+				current_alarm_timeout, current_sensor_type,
+				current_multiplier * 1000, current_offset * 1000,
+				current_icon_type, g_strdup(current_graph_color));
+			g_variant_builder_add_value(&builder, vval);
+		}
+	}
+
+	g_settings_set_value (sensors_applet->settings, "slist",
+		g_variant_builder_end (&builder));
+
+	/* store current version to identify config data */
+	g_settings_set_string(sensors_applet->settings,
+		SENSORS_APPLET_VERSION,
+		PACKAGE_VERSION);
+
+	return TRUE;
+}
diff --git a/sensors-applet/sensors-applet-conf.h b/sensors-applet/sensors-applet-conf.h
new file mode 100644
index 0000000..9267bd8
--- /dev/null
+++ b/sensors-applet/sensors-applet-conf.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2005-2009 Alex Murray <murray.alex@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef SENSORS_APPLET_GCONF_H
+#define SENSORS_APPLET_GCONF_H
+
+#include "sensors-applet.h"
+
+#define SENSORS_APPLET_SCHEMA "org.gnome.sensors-applet"
+
+#define FONT_SIZE "font-size" /* hidden gconf option specifying font
+                               * size in points */
+
+#define HIDE_UNITS "hide-units" /* hidden gconf option specifying not to
+                                 * show sensor units */
+
+#define IS_SETUP "setup"  /* have we actually set up this instance of
+			   * the applet (gets set to true after
+			   * closing prefences dialog) */
+
+#define DISPLAY_MODE "display-mode" /* display icons or text labels?*/
+
+#define LAYOUT_MODE "layout-mode" /* value beside or below label */
+#define TEMPERATURE_SCALE "temperature-scale" /* Kelvin,
+                                                 Celsius or
+                                                 Fahrenheit */
+#define DISPLAY_NOTIFICATIONS "display-notifications" /* whether to
+                                                       * display
+                                                       * notifications */
+#define TIMEOUT "timeout-delay" /* delay (in ms) between refreshes */
+#define GRAPH_SIZE "graph-size" /* the size of the graph in pixels -
+                                 * either width if horizontal, or
+                                 * height if vertical */
+#define PATHS "paths" /* full paths to filenames */
+#define IDS "ids" /* a list of the sensor device ids */
+#define INTERFACES "interfaces" /* a list of the sensor device
+				 * interface for each sensor */
+#define LABELS "labels"  /* user defined labels for each sensor */
+#define ENABLES "sensor_enables" /* list of booleans corresponding to
+				  * the filenames of whether a sensor
+				  * is enabled or not */
+#define LOW_VALUES "low_values" /* stored as ints (1000 * double
+				     * value) for accuracy, since can
+				     * only do ints easily */
+#define HIGH_VALUES "high_values" /* stored as ints (1000 * double
+				     * value) for accuracy, since can
+				     * only do ints easily */
+#define ALARM_ENABLES "alarm_enables" /* list of whether each sensor
+				       * has its alarm enabled */
+#define LOW_ALARM_COMMANDS "low_alarm_commands" /* list of commands to execute
+                                                 * when each alarm is
+                                                 * activated */
+#define HIGH_ALARM_COMMANDS "high_alarm_commands" /* list of commands to execute
+                                                 * when each alarm is
+                                                 * activated */
+
+#define ALARM_TIMEOUTS "alarm_timeouts" /* list of how often each
+					   alarm should be sounded (in
+					   seconds) */
+
+#define SENSOR_TYPES "sensor_types" /* used to identify a sensor in a
+				       list */
+
+#define MULTIPLIERS "multipliers"
+#define OFFSETS "offsets"
+#define ICON_TYPES "icon_types"
+#define GRAPH_COLORS "graph_colors"
+
+#define SENSORS_APPLET_VERSION "sensors-applet-version" /* version of
+                                                         * config
+                                                         * data */
+
+gboolean sensors_applet_gconf_save_sensors(SensorsApplet *sensors_applet);
+gboolean sensors_applet_gconf_setup_sensors(SensorsApplet *sensors_applet);
+void sensors_applet_conf_setup(SensorsApplet *sensors_applet);
+
+#endif /* SENSORS_APPLET_GCONF_H*/
diff --git a/sensors-applet/sensors-applet-gconf.c b/sensors-applet/sensors-applet-gconf.c
deleted file mode 100644
index a6e9f55..0000000
--- a/sensors-applet/sensors-applet-gconf.c
+++ /dev/null
@@ -1,494 +0,0 @@
-/*
- * Copyright (C) 2005-2009 Alex Murray <murray.alex@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif /* HAVE_CONFIG_H */
-
-#include <glib/gi18n.h>
-
-#include "sensors-applet.h"
-#include "sensors-applet-gconf.h"
-
-#define DEFAULT_TIMEOUT 2000
-#define DEFAULT_GRAPH_SIZE 42
-
-static const gchar * const compatible_versions[] = {
-        PACKAGE_VERSION, /* always list current version */
-        "2.2.7",
-        "2.2.6",
-        "2.2.5",
-	"2.2.4",
-        "2.2.3",
-	"2.2.2",
-};
-
-#define NUM_COMPATIBLE_VERSIONS G_N_ELEMENTS(compatible_versions)
-
-typedef enum {
-        SENSORS_APPLET_GCONF_ERROR = 0,
-        SENSORS_APPLET_VERSION_ERROR,
-} SensorsAppletGConfError;
-
-static const gchar * const error_titles[] = {
-        N_("An error occurred loading the stored sensors data"),
-        N_("Incompatible sensors configuration found")
-};
-
-static const gchar * const error_messages[] = {
-        N_("An error has occurred when loading the stored sensors data. "
-           "The default values will be used to recover from this error."),
-
-        N_("Unfortunately the previous configuration for GNOME Sensors Applet "
-           "is not compatible with this version. The existing sensors data "
-           "will be overwritten with the default values for this new version.")
-};
-
-/* function to be called if an error occurs
-   when loading values from gconf */
-static void sensors_applet_gconf_error_occurred(SensorsAppletGConfError error) {
-	GtkWidget *dialog;
-        gchar *markup;
-
-        g_debug("Error occurred: %s", error_titles[error]);
-        markup = g_markup_printf_escaped("<span size=\"large\" weight=\"bold\">%s</span>\n\n%s", _(error_titles[error]), _(error_messages[error]));
-
-	dialog = gtk_message_dialog_new_with_markup(NULL, /* no parent window */
-                                                    GTK_DIALOG_MODAL,
-                                                    GTK_MESSAGE_WARNING,
-                                                    GTK_BUTTONS_OK,
-                                                    "%s", markup);
-
-        g_free(markup);
-
-        /* runs dialog as modal and doesn't return until user clicks
-         * button */
-        gtk_dialog_run(GTK_DIALOG(dialog));
-        gtk_widget_destroy(GTK_WIDGET(dialog));
-}
-
-
-static void sensors_applet_gconf_set_defaults(SensorsApplet *sensors_applet) {
-	panel_applet_gconf_set_int(sensors_applet->applet, DISPLAY_MODE, DISPLAY_ICON_WITH_VALUE, NULL);
-	panel_applet_gconf_set_int(sensors_applet->applet, LAYOUT_MODE, VALUE_BESIDE_LABEL, NULL);
-	panel_applet_gconf_set_int(sensors_applet->applet, TEMPERATURE_SCALE, CELSIUS, NULL);
-	panel_applet_gconf_set_int(sensors_applet->applet, TIMEOUT, DEFAULT_TIMEOUT, NULL);
-	panel_applet_gconf_set_int(sensors_applet->applet, GRAPH_SIZE, DEFAULT_GRAPH_SIZE, NULL);
-#ifdef HAVE_LIBNOTIFY
-	panel_applet_gconf_set_bool(sensors_applet->applet, DISPLAY_NOTIFICATIONS, TRUE, NULL);
-#endif
-	panel_applet_gconf_set_bool(sensors_applet->applet, IS_SETUP, FALSE, NULL);
-
-}
-
-/**
- * Returns TRUE is old_version is one of the compatible versions
- */
-static gboolean sensors_applet_gconf_is_compatible(const gchar *old_version) {
-        guint i;
-        for (i = 0; i < NUM_COMPATIBLE_VERSIONS; i++) {
-                if (g_ascii_strcasecmp(old_version, compatible_versions[i]) == 0) {
-                        return TRUE;
-                }
-        }
-        return FALSE;
-}
-
-
-void sensors_applet_gconf_setup(SensorsApplet *sensors_applet) {
-        gboolean setup = FALSE;
-        gchar *old_version;
-        GError *error = NULL;
-
-        /* need to convert old num_samples value to new GRAPH_SIZE
-         * parameter */
-        gint num_samples;
-        if ((num_samples = panel_applet_gconf_get_int(sensors_applet->applet,
-                                                      "num_samples",
-                                                      NULL))) {
-                g_debug("Convering old num_samples value %d into graph_size", num_samples);
-                panel_applet_gconf_set_int(sensors_applet->applet,
-                                           GRAPH_SIZE,
-                                           (num_samples + GRAPH_FRAME_EXTRA_WIDTH),
-                                           NULL);
-                /* reset num_samples to zero */
-                panel_applet_gconf_set_int(sensors_applet->applet,
-                                           "num_samples",
-                                           0,
-                                           NULL);
-
-        }
-
-        /* convert old alarm_commands to high and low if exist */
-        GSList *alarm_commands;
-        if ((alarm_commands = panel_applet_gconf_get_list(sensors_applet->applet,
-                                                          "alarm_commands",
-                                                          GCONF_VALUE_STRING,
-                                                          NULL))) {
-
-                g_debug("Converting old alarm commands to new high and low commands");
-
-                panel_applet_gconf_set_list(sensors_applet->applet,
-                                            LOW_ALARM_COMMANDS,
-                                            GCONF_VALUE_STRING,
-                                            alarm_commands,
-                                            NULL);
-                panel_applet_gconf_set_list(sensors_applet->applet,
-                                            HIGH_ALARM_COMMANDS,
-                                            GCONF_VALUE_STRING,
-                                            alarm_commands,
-                                            NULL);
-                /* reset old list to null */
-                panel_applet_gconf_set_list(sensors_applet->applet,
-                                            "alarm_commands",
-                                            GCONF_VALUE_STRING,
-                                            NULL,
-                                            NULL);
-                g_slist_foreach(alarm_commands, (GFunc)g_free, NULL);
-                g_slist_free(alarm_commands);
-
-        }
-
-        setup = panel_applet_gconf_get_bool(sensors_applet->applet,
-                                            IS_SETUP, &error);
-        if (error) {
-                g_debug("Previous configuration not found: %s, setting up manually", error->message);
-                g_error_free(error);
-                error = NULL;
-                setup = FALSE;
-        }
-
-	if (setup) {
-                /* see if setup version matches */
-                old_version = panel_applet_gconf_get_string(sensors_applet->applet,
-                                                            SENSORS_APPLET_VERSION,
-                                                            &error);
-                /* if versions don't match or there is no saved
-                 * version string then need to overwrite old config */
-                if (error) {
-                        g_debug("Error getting old version string: %s", error->message);
-                        g_error_free(error);
-                        error = NULL;
-                        old_version = NULL;
-                }
-
-                if (old_version) {
-                        if (sensors_applet_gconf_is_compatible(old_version)) {
-                                /* previously setup and versions match so use
-                                 * old values */
-                                g_debug("GConf data is compatible. Trying to set up sensors from gconf data");
-
-                                if (sensors_applet_gconf_setup_sensors(sensors_applet)) {
-                                        g_debug("done setting up from gconf");
-                                } else {
-                                        g_debug("Setting gconf defaults only");
-                                        sensors_applet_gconf_set_defaults(sensors_applet);
-                                }
-                                g_free(old_version);
-
-                                return;
-
-
-                        }
-                        g_free(old_version);
-
-                }
-                sensors_applet_notify(sensors_applet, GCONF_READ_ERROR);
-
-
-                sensors_applet_gconf_error_occurred(SENSORS_APPLET_VERSION_ERROR);
-        }
-
-        /* use defaults */
-        g_debug("Setting gconf defaults only");
-        sensors_applet_gconf_set_defaults(sensors_applet);
-}
-
-enum {
-        PATHS_INDEX = 0,
-        IDS_INDEX,
-        LABELS_INDEX,
-        INTERFACES_INDEX,
-        SENSOR_TYPES_INDEX,
-        ENABLES_INDEX,
-        LOW_VALUES_INDEX,
-        HIGH_VALUES_INDEX,
-        ALARM_ENABLES_INDEX,
-        LOW_ALARM_COMMANDS_INDEX,
-        HIGH_ALARM_COMMANDS_INDEX,
-        ALARM_TIMEOUTS_INDEX,
-        MULTIPLIERS_INDEX,
-        OFFSETS_INDEX,
-        ICON_TYPES_INDEX,
-        GRAPH_COLORS_INDEX,
-        NUM_KEYS
-};
-
-const gchar * const keys[NUM_KEYS] = {
-        PATHS,
-        IDS,
-        LABELS,
-        INTERFACES,
-        SENSOR_TYPES,
-        ENABLES,
-        LOW_VALUES,
-        HIGH_VALUES,
-        ALARM_ENABLES,
-        LOW_ALARM_COMMANDS,
-        HIGH_ALARM_COMMANDS,
-        ALARM_TIMEOUTS,
-        MULTIPLIERS,
-        OFFSETS,
-        ICON_TYPES,
-        GRAPH_COLORS,
-};
-
-/* MUST CORRESPOND TO ABOVE KEYS */
-const GConfValueType key_types[NUM_KEYS] = {
-        GCONF_VALUE_STRING, /* PATHS */
-        GCONF_VALUE_STRING, /* IDS, */
-        GCONF_VALUE_STRING, /* LABELS */
-        GCONF_VALUE_STRING, /* INTERFACES, */
-        GCONF_VALUE_INT, /* SENSOR_TYPES, */
-        GCONF_VALUE_BOOL, /* ENABLES, */
-        GCONF_VALUE_INT, /* LOW_VALUES, */
-        GCONF_VALUE_INT, /* HIGH_VALUES, */
-        GCONF_VALUE_BOOL, /* ALARM_ENABLES, */
-        GCONF_VALUE_STRING, /* LOW_ALARM_COMMANDS, */
-        GCONF_VALUE_STRING, /* HIGH_ALARM_COMMANDS, */
-        GCONF_VALUE_INT, /* ALARM_TIMEOUTS, */
-        GCONF_VALUE_INT, /* MULTIPLIERS, */
-        GCONF_VALUE_INT, /* OFFSETS, */
-        GCONF_VALUE_INT, /* ICON_TYPES, */
-        GCONF_VALUE_STRING /* GRAPH_COLORS, */
-};
-
-void sensors_applet_gconf_set_current_to_lists(GSList *current[],
-                                               GSList *lists[],
-                                               int len) {
-        for (len--; len >= 0; len--) {
-                current[len] = lists[len];
-        }
-}
-
-int sensors_applet_gconf_current_not_null(GSList *current[],
-                                          int len) {
-        for (len--; len >= 0; len--) {
-                if (NULL == current[len]) {
-                        return FALSE;
-                }
-        }
-        return TRUE;
-}
-void sensors_applet_gconf_current_get_next(GSList *current[],
-                                           int len) {
-        for (len--; len >= 0; len--) {
-                current[len] = g_slist_next(current[len]);
-        }
-}
-
-void sensors_applet_gconf_free_lists(GSList *lists[],
-                                     int len) {
-        for (len--; len >= 0; len--) {
-                if (key_types[len] == GCONF_VALUE_STRING) {
-                        g_slist_foreach(lists[len], (GFunc)g_free, NULL);
-                }
-                g_slist_free(lists[len]);
-        }
-
-}
-
-/* gets called if are already setup so we don't have to manually go
-   through and find sensors etc again */
-gboolean sensors_applet_gconf_setup_sensors(SensorsApplet *sensors_applet) {
-	/* everything gets stored except alarm timeout indexes, which
-	   we set to -1, and visible which we set to false for all
-	   parent nodes and true for all child nodes */
-        int i;
-        GSList *lists[NUM_KEYS] = {NULL};
-
-	GSList *current[NUM_KEYS] = {NULL};
-
-	GError *error = NULL;
-
-        for (i = 0; i < NUM_KEYS; i++) {
-                lists[i] = panel_applet_gconf_get_list(sensors_applet->applet,
-                                                       keys[i],
-                                                       key_types[i],
-                                                       &error);
-                if (error || NULL == lists[i]) {
-                        sensors_applet_notify(sensors_applet, GCONF_READ_ERROR);
-
-                        sensors_applet_gconf_error_occurred(SENSORS_APPLET_GCONF_ERROR);
-                        if (error) {
-                                g_error_free(error);
-                        }
-                        return FALSE;
-                }
-        }
-
-	for (sensors_applet_gconf_set_current_to_lists(current,
-                                                       lists,
-                                                       NUM_KEYS);
-             sensors_applet_gconf_current_not_null(current,
-                                                   NUM_KEYS);
-             sensors_applet_gconf_current_get_next(current,
-                                                   NUM_KEYS)) {
-
-
-		g_debug("trying to add sensor from gconf data: %s\n", (gchar *)(current[IDS_INDEX]->data));
-                /* need to ensure correct order */
-		sensors_applet_add_sensor(sensors_applet,
-                                          (gchar *)(current[PATHS_INDEX]->data),
-                                          (gchar *)(current[IDS_INDEX]->data),
-                                          (gchar *)(current[LABELS_INDEX]->data),
-                                          (gchar *)(current[INTERFACES_INDEX]->data),
-                                          GPOINTER_TO_UINT(current[SENSOR_TYPES_INDEX]->data),
-                                          GPOINTER_TO_INT(current[ENABLES_INDEX]->data),
-                                          (gdouble)(GPOINTER_TO_INT(current[LOW_VALUES_INDEX]->data) / 1000.0),
-                                          (gdouble)(GPOINTER_TO_INT(current[HIGH_VALUES_INDEX]->data) / 1000.0),
-                                          GPOINTER_TO_INT(current[ALARM_ENABLES_INDEX]->data),
-                                          (gchar *)(current[LOW_ALARM_COMMANDS_INDEX]->data),
-                                          (gchar *)(current[HIGH_ALARM_COMMANDS_INDEX]->data),
-                                          GPOINTER_TO_INT(current[ALARM_TIMEOUTS_INDEX]->data),
-                                          (gdouble)(GPOINTER_TO_INT(current[MULTIPLIERS_INDEX]->data) / 1000.0),
-                                          (gdouble)(GPOINTER_TO_INT(current[OFFSETS_INDEX]->data) / 1000.0),
-                                          (SensorType)GPOINTER_TO_UINT(current[ICON_TYPES_INDEX]->data),
-                                          (gchar *)(current[GRAPH_COLORS_INDEX]->data)
-
-                        );
-
-	}
-        sensors_applet_gconf_free_lists(lists,
-                                        NUM_KEYS);
-
-	return TRUE;
-}
-
-
-gboolean sensors_applet_gconf_save_sensors(SensorsApplet *sensors_applet) {
-	/* write everything to gconf except VISIBLE and
-	   ALARM_TIMEOUT_INDEX */
-	/* for stepping through GtkTreeStore data structure */
-	GtkTreeIter interfaces_iter, sensors_iter;
-	gboolean not_end_of_interfaces = TRUE, not_end_of_sensors = TRUE;
-
-        /* make sure all are initialized to null - since list of
-         * intializers is horter than number of element, rest get set
-         * to 0 (ie NULL) */
-        GSList *lists[NUM_KEYS] = {NULL};
-        int i;
-        gchar *current_path, *current_id, *current_label, *current_interface,
-                *current_low_alarm_command, *current_high_alarm_command,
-                *current_graph_color;
-        gboolean current_enable, current_alarm_enable;
-	gdouble current_low_value, current_high_value, current_multiplier,
-                current_offset;
-	guint current_alarm_timeout, current_sensor_type,
-                current_icon_type;
-
-	GError *error = NULL;
-
-	/* now step through the GtkTreeStore sensors to
-	   find which sensors are enabled */
-	for (gtk_tree_model_get_iter_first(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter); not_end_of_interfaces; not_end_of_interfaces = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter)) {
-		// store a gconf key for this interface
-		gtk_tree_model_get(GTK_TREE_MODEL(sensors_applet->sensors),
-				   &interfaces_iter,
-				   ID_COLUMN, &current_id,
-				   -1);
-
-		panel_applet_gconf_set_bool(sensors_applet->applet, current_id, TRUE, NULL);
-		g_free(current_id);
-
-		/* reset sensors sentinel */
-		not_end_of_sensors = TRUE;
-
-		for (gtk_tree_model_iter_children(GTK_TREE_MODEL(sensors_applet->sensors), &sensors_iter, &interfaces_iter); not_end_of_sensors; not_end_of_sensors = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), &sensors_iter)) {
-			gtk_tree_model_get(GTK_TREE_MODEL(sensors_applet->sensors),
-					   &sensors_iter,
-					   PATH_COLUMN, &current_path,
-					   ID_COLUMN, &current_id,
-					   LABEL_COLUMN, &current_label,
-					   INTERFACE_COLUMN, &current_interface,
-					   SENSOR_TYPE_COLUMN, &current_sensor_type,
-					   ENABLE_COLUMN, &current_enable,
-					   LOW_VALUE_COLUMN, &current_low_value,
-					   HIGH_VALUE_COLUMN, &current_high_value,
-					   ALARM_ENABLE_COLUMN, &current_alarm_enable,
-					   LOW_ALARM_COMMAND_COLUMN, &current_low_alarm_command,
-					   HIGH_ALARM_COMMAND_COLUMN, &current_high_alarm_command,
-					   ALARM_TIMEOUT_COLUMN, &current_alarm_timeout,
-					   MULTIPLIER_COLUMN, &current_multiplier,
-					   OFFSET_COLUMN, &current_offset,
-					   ICON_TYPE_COLUMN, &current_icon_type,
-                                           GRAPH_COLOR_COLUMN, &current_graph_color,
-					   -1);
-
-			/* prepend values as this is faster then just
-			   reverse list when finished */
-                        lists[PATHS_INDEX] = g_slist_prepend(lists[PATHS_INDEX], current_path);
-			lists[IDS_INDEX] = g_slist_prepend(lists[IDS_INDEX], current_id);
-			lists[LABELS_INDEX] = g_slist_prepend(lists[LABELS_INDEX], current_label);
-			lists[INTERFACES_INDEX] = g_slist_prepend(lists[INTERFACES_INDEX], current_interface);
-			lists[ENABLES_INDEX] = g_slist_prepend(lists[ENABLES_INDEX], GINT_TO_POINTER(current_enable));
-			lists[LOW_VALUES_INDEX] = g_slist_prepend(lists[LOW_VALUES_INDEX], GINT_TO_POINTER((gint)(current_low_value * 1000)));
-			lists[HIGH_VALUES_INDEX] = g_slist_prepend(lists[HIGH_VALUES_INDEX], GINT_TO_POINTER((gint)(current_high_value * 1000)));
-			lists[ALARM_ENABLES_INDEX] = g_slist_prepend(lists[ALARM_ENABLES_INDEX], GINT_TO_POINTER(current_alarm_enable));
-			lists[LOW_ALARM_COMMANDS_INDEX] = g_slist_prepend(lists[LOW_ALARM_COMMANDS_INDEX], current_low_alarm_command);
-			lists[HIGH_ALARM_COMMANDS_INDEX] = g_slist_prepend(lists[HIGH_ALARM_COMMANDS_INDEX], current_high_alarm_command);
-			lists[ALARM_TIMEOUTS_INDEX] = g_slist_prepend(lists[ALARM_TIMEOUTS_INDEX], GINT_TO_POINTER(current_alarm_timeout));
-			lists[SENSOR_TYPES_INDEX] = g_slist_prepend(lists[SENSOR_TYPES_INDEX], GUINT_TO_POINTER(current_sensor_type));
-			lists[MULTIPLIERS_INDEX] = g_slist_prepend(lists[MULTIPLIERS_INDEX], GINT_TO_POINTER((gint)(current_multiplier * 1000)));
-			lists[OFFSETS_INDEX] = g_slist_prepend(lists[OFFSETS_INDEX], GINT_TO_POINTER((gint)(current_offset * 1000)));
-			lists[ICON_TYPES_INDEX] = g_slist_prepend(lists[ICON_TYPES_INDEX], GUINT_TO_POINTER(current_icon_type));
-			lists[GRAPH_COLORS_INDEX] = g_slist_prepend(lists[GRAPH_COLORS_INDEX], current_graph_color);
-		}
-	}
-
-	/* keep lists in original order */
-        for (i = 0; i < NUM_KEYS; i++) {
-                if (lists[i] != NULL) {
-                        lists[i] = g_slist_reverse(lists[i]);
-
-                        panel_applet_gconf_set_list(sensors_applet->applet,
-                                                    keys[i],
-                                                    key_types[i],
-                                                    lists[i], &error);
-                        if (error) {
-                                sensors_applet_notify(sensors_applet, GCONF_WRITE_ERROR);
-
-                                g_error_free(error);
-                                return FALSE;
-                        }
-                } else {
-                        g_debug("list %s is NULL", keys[i]);
-                }
-
-        }
-
-	sensors_applet_gconf_free_lists(lists,
-                                        NUM_KEYS);
-
-        /* store current version to identify config data */
-        panel_applet_gconf_set_string(sensors_applet->applet,
-                                      SENSORS_APPLET_VERSION,
-                                      PACKAGE_VERSION, &error);
-
-	return TRUE;
-}
diff --git a/sensors-applet/sensors-applet-gconf.h b/sensors-applet/sensors-applet-gconf.h
deleted file mode 100644
index 527e364..0000000
--- a/sensors-applet/sensors-applet-gconf.h
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2005-2009 Alex Murray <murray.alex@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#ifndef SENSORS_APPLET_GCONF_H
-#define SENSORS_APPLET_GCONF_H
-
-#include "sensors-applet.h"
-#include <panel-applet-gconf.h>
-
-#define FONT_SIZE "font-size" /* hidden gconf option specifying font
-                               * size in points */
-
-#define HIDE_UNITS "hide-units" /* hidden gconf option specifying not to
-                                 * show sensor units */
-
-#define IS_SETUP "setup"  /* have we actually set up this instance of
-			   * the applet (gets set to true after
-			   * closing prefences dialog) */
-
-#define DISPLAY_MODE "display_mode" /* display icons or text labels?*/
-
-#define LAYOUT_MODE "layout_mode" /* value beside or below label */
-#define TEMPERATURE_SCALE "temperature_scale" /* Kelvin,
-                                                 Celsius or
-                                                 Fahrenheit */
-#define DISPLAY_NOTIFICATIONS "display_notifications" /* whether to
-                                                       * display
-                                                       * notifications */
-#define TIMEOUT "timeout_delay" /* delay (in ms) between refreshes */
-#define GRAPH_SIZE "graph_size" /* the size of the graph in pixels -
-                                 * either width if horizontal, or
-                                 * height if vertical */
-#define PATHS "paths" /* full paths to filenames */
-#define IDS "ids" /* a list of the sensor device ids */
-#define INTERFACES "interfaces" /* a list of the sensor device
-				 * interface for each sensor */
-#define LABELS "labels"  /* user defined labels for each sensor */
-#define ENABLES "sensor_enables" /* list of booleans corresponding to
-				  * the filenames of whether a sensor
-				  * is enabled or not */
-#define LOW_VALUES "low_values" /* stored as ints (1000 * double
-				     * value) for accuracy, since can
-				     * only do ints easily */
-#define HIGH_VALUES "high_values" /* stored as ints (1000 * double
-				     * value) for accuracy, since can
-				     * only do ints easily */
-#define ALARM_ENABLES "alarm_enables" /* list of whether each sensor
-				       * has its alarm enabled */
-#define LOW_ALARM_COMMANDS "low_alarm_commands" /* list of commands to execute
-                                                 * when each alarm is
-                                                 * activated */
-#define HIGH_ALARM_COMMANDS "high_alarm_commands" /* list of commands to execute
-                                                 * when each alarm is
-                                                 * activated */
-
-#define ALARM_TIMEOUTS "alarm_timeouts" /* list of how often each
-					   alarm should be sounded (in
-					   seconds) */
-
-#define SENSOR_TYPES "sensor_types" /* used to identify a sensor in a
-				       list */
-
-#define MULTIPLIERS "multipliers"
-#define OFFSETS "offsets"
-#define ICON_TYPES "icon_types"
-#define GRAPH_COLORS "graph_colors"
-
-#define SENSORS_APPLET_VERSION "sensors_applet_version" /* version of
-                                                         * config
-                                                         * data */
-
-gboolean sensors_applet_gconf_save_sensors(SensorsApplet *sensors_applet);
-gboolean sensors_applet_gconf_setup_sensors(SensorsApplet *sensors_applet);
-void sensors_applet_gconf_setup(SensorsApplet *sensors_applet);
-
-#endif /* SENSORS_APPLET_GCONF_H*/
diff --git a/sensors-applet/sensors-applet-plugin.h b/sensors-applet/sensors-applet-plugin.h
index 9c664b5..61cf54c 100644
--- a/sensors-applet/sensors-applet-plugin.h
+++ b/sensors-applet/sensors-applet-plugin.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SENSORS_APPLET_PLUGIN_H
diff --git a/sensors-applet/sensors-applet-plugins.c b/sensors-applet/sensors-applet-plugins.c
index 7f3e95f..ce4b89b 100644
--- a/sensors-applet/sensors-applet-plugins.c
+++ b/sensors-applet/sensors-applet-plugins.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifdef HAVE_CONFIG_H
@@ -67,36 +67,36 @@ static void load_all_plugins(SensorsApplet *sensors_applet,
                                                              sensor != NULL;
                                                              sensor = g_list_next(sensor)) {
                                                                 SensorsAppletSensorInfo *sensor_info = (SensorsAppletSensorInfo *)sensor->data;
-                                                                sensors_applet_add_sensor(sensors_applet,
-                                                                                          sensor_info->path,
-                                                                                          sensor_info->id, 
-                                                                                          sensor_info->label,
-                                                                                          name_fn(),
-                                                                                          sensor_info->type,
-                                                                                          sensor_info->enable,
-                                                                                          sensor_info->low_value,
-                                                                                          sensor_info->high_value,
-                                                                                          FALSE, // ALARM OFF
-                                                                                          "", // no alarm commands
-                                                                                          "", // no alarm commands
-                                                                                          0, // alarm_timeout
-                                                                                          sensor_info->multiplier,
-                                                                                          sensor_info->offset,
-                                                                                          sensor_info->icon,
-                                                                                          sensor_info->graph_color);
-                                                                
-                                                                g_free(sensor_info->path);
-                                                                g_free(sensor_info->id);
-                                                                g_free(sensor_info->label);
-                                                                g_free(sensor_info->graph_color);
-                                                                g_free(sensor_info);
-                                                        }
-                                                        g_list_free(sensors);
-                                                } else {
-                                                        g_debug("plugin %s could not find any sensors", name_fn());
-                                                        if (g_hash_table_lookup(sensors_applet->required_plugins,
+								sensors_applet_add_sensor(sensors_applet,
+									sensor_info->path,
+									sensor_info->id, 
+									sensor_info->label,
+									name_fn(),
+									sensor_info->type,
+									sensor_info->enable,
+									sensor_info->low_value,
+									sensor_info->high_value,
+									FALSE, // ALARM OFF
+									"", // no alarm commands
+									"", // no alarm commands
+									0, // alarm_timeout
+									sensor_info->multiplier,
+									sensor_info->offset,
+									sensor_info->icon,
+									sensor_info->graph_color);
+
+								g_free(sensor_info->path);
+								g_free(sensor_info->id);
+								g_free(sensor_info->label);
+								g_free(sensor_info->graph_color);
+								g_free(sensor_info);
+							}
+							g_list_free(sensors);
+						} else {
+							g_debug("plugin %s could not find any sensors", name_fn());
+							if (g_hash_table_lookup(sensors_applet->required_plugins,
                                                                                 name_fn()))
-                                                        {
+							{
                                                                 g_debug("plugin %s required - registering even though no sensors detected", name_fn());
                                                                 g_hash_table_insert(sensors_applet->plugins,
                                                                                     g_strdup(name_fn()),
@@ -122,30 +122,27 @@ static void load_all_plugins(SensorsApplet *sensors_applet,
         }
 }
 
-void sensors_applet_plugins_load_all(SensorsApplet *sensors_applet) 
+void sensors_applet_plugins_load_all(SensorsApplet *sensors_applet)
 {
-        const gchar *home;
-        
-        if ((home = g_get_home_dir()) != NULL) {
-                gchar *path;
-                path = g_build_filename(home,
-                                        SENSORS_APPLET_USER_PLUGIN_DIR,
-                                        NULL);
-                load_all_plugins(sensors_applet, path);
-                g_free(path);
-        } else {
-                g_warning("could not get home dir of user");
-        }
-        
-        
-        load_all_plugins(sensors_applet, SENSORS_APPLET_PLUGIN_DIR);
+	const gchar *home;
+
+	if ((home = g_get_home_dir()) != NULL) {
+		gchar *path;
+		path = g_build_filename(home,
+				SENSORS_APPLET_USER_PLUGIN_DIR, NULL);
+		load_all_plugins(sensors_applet, path);
+		g_free(path);
+	} else {
+		g_warning("could not get home dir of user");
+	}
+
+	load_all_plugins(sensors_applet, SENSORS_APPLET_PLUGIN_DIR);
 }
 
 SensorsAppletPluginGetSensorValue sensors_applet_plugins_get_sensor_value_func(SensorsApplet *sensors_applet,
                                                                                const gchar *plugin) 
 {
-        return g_hash_table_lookup(sensors_applet->plugins,
-                                   plugin);
+	return g_hash_table_lookup(sensors_applet->plugins, plugin);
 }
 
-                                                  
+
diff --git a/sensors-applet/sensors-applet-plugins.h b/sensors-applet/sensors-applet-plugins.h
index 2f6dd3d..599ad89 100644
--- a/sensors-applet/sensors-applet-plugins.h
+++ b/sensors-applet/sensors-applet-plugins.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SENSORS_APPLET_PLUGINS_H
diff --git a/sensors-applet/sensors-applet-sensor.h b/sensors-applet/sensors-applet-sensor.h
index 2314a52..7d6573c 100644
--- a/sensors-applet/sensors-applet-sensor.h
+++ b/sensors-applet/sensors-applet-sensor.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SENSORS_APPLET_SENSOR_H
diff --git a/sensors-applet/sensors-applet.c b/sensors-applet/sensors-applet.c
index 4cadd06..a493ec9 100644
--- a/sensors-applet/sensors-applet.c
+++ b/sensors-applet/sensors-applet.c
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 /** Contain the functions for operating on the SensorsApplet structure
@@ -33,7 +33,7 @@
 #include <glib/gprintf.h>
 #include "sensors-applet.h"
 #include "active-sensor.h"
-#include "sensors-applet-gconf.h"
+#include "sensors-applet-conf.h"
 #include "sensors-applet-plugins.h"
 
 #ifdef HAVE_LIBNOTIFY
@@ -49,15 +49,15 @@
                                 * sensors_applet->size to ensure a
                                 * real value is stored */
 #define COLUMN_SPACING 2
-#define ROW_SPACING 0
+#define ROW_SPACING 1
 
 /* callbacks for panel menu */
-static void prefs_cb(GtkAction *action,
-		     gpointer *data,
-		     const gchar       *verbname) {
+static void prefs_cb(GSimpleAction *action,
+			GVariant *parameter,
+			gpointer data) {
 
-        SensorsApplet *sensors_applet;
-        sensors_applet = (SensorsApplet *)data;
+	SensorsApplet *sensors_applet;
+	sensors_applet = (SensorsApplet *)data;
 
 	if (sensors_applet->prefs_dialog) {
 		gtk_window_present(GTK_WINDOW(sensors_applet->prefs_dialog->dialog));
@@ -66,29 +66,28 @@ static void prefs_cb(GtkAction *action,
 	prefs_dialog_open(sensors_applet);
 }
 
-static void about_cb(GtkAction *action,
-		     gpointer data,
-		     const gchar       *verbname) {
-        SensorsApplet *sensors_applet;
-        sensors_applet = (SensorsApplet *)data;
+static void about_cb(GSimpleAction *action,
+			GVariant *parameter,
+			gpointer data) {
+	SensorsApplet *sensors_applet;
+	sensors_applet = (SensorsApplet *)data;
 
 	about_dialog_open(sensors_applet);
 }
 
-static void help_cb(GtkAction *action,
-                    gpointer data,
-                    const gchar *verbname) {
+static void help_cb(GSimpleAction *action,
+			GVariant *parameter,
+			gpointer data) {
+	GError *error = NULL;
 
-        GError *error = NULL;
-        
-        gtk_show_uri(NULL, "ghelp:sensors-applet",
-		     gtk_get_current_event_time(),
-		     &error);
-        
-        if (error) {
-                g_debug("Could not open help document: %s ",error->message);
-                g_error_free(error);
-        }
+	gtk_show_uri(NULL, "help:sensors-applet",
+		gtk_get_current_event_time(),
+		&error);
+
+	if (error) {
+		g_debug("Could not open help document: %s ",error->message);
+		g_error_free(error);
+	}
 }
 
 static void destroy_cb(GtkWidget *widget, gpointer data) {
@@ -121,70 +120,6 @@ static void destroy_cb(GtkWidget *widget, gpointer data) {
 	return;
 }
 
-static gboolean
-matrix_is_identity (cairo_matrix_t *matrix)
-{
-	return matrix->xx == 1.0 && matrix->yy == 1.0 &&
-		matrix->yx == 0.0 && matrix->xy == 0.0 &&
-		matrix->x0 == 0.0 && matrix->y0 == 0.0;
-}
-
-
-static void change_background_cb(PanelApplet *applet,
-				cairo_pattern_t *pattern,
-				gpointer *data) {
-	GtkRcStyle *rc_style;
-	GtkStyle *style;
-
-	/* reset style */
-	gtk_widget_set_style(GTK_WIDGET(applet), NULL);
-	rc_style = gtk_rc_style_new();
-	gtk_widget_modify_style(GTK_WIDGET(applet), rc_style);
-	g_object_unref(rc_style);
-
-	if (pattern == NULL) {
-		return;
-	}
-
-	switch (cairo_pattern_get_type (pattern)) {
-		case CAIRO_PATTERN_TYPE_SOLID: {
-			double r, b, g, a;
-			GdkColor color;
-
-			cairo_pattern_get_rgba (pattern, &r, &g, &b, &a);
-			color.pixel = 0;
-			color.red = r * 65535.;
-			color.green = g * 65535.;
-			color.blue = b * 65535.;
-			gtk_widget_modify_bg (GTK_WIDGET(applet), GTK_STATE_NORMAL, &color);
-			break;
-		}
-		case CAIRO_PATTERN_TYPE_SURFACE: {
-			cairo_surface_t *surface;
-			cairo_matrix_t matrix;
-			GdkWindow *window;
-
-			window = gtk_widget_get_window (GTK_WIDGET(applet));
-			cairo_pattern_get_matrix (pattern, &matrix);
-			if (cairo_pattern_get_surface (pattern, &surface) == CAIRO_STATUS_SUCCESS &&
-				matrix_is_identity (&matrix) &&
-				cairo_surface_get_type (surface) == CAIRO_SURFACE_TYPE_XLIB &&
-				cairo_xlib_surface_get_visual (surface) == GDK_VISUAL_XVISUAL (gdk_window_get_visual ((window))) &&
-				cairo_xlib_surface_get_display (surface) == GDK_WINDOW_XDISPLAY (window)) {
-				style = gtk_style_copy (gtk_widget_get_style (GTK_WIDGET(applet)));
-				if (style->background[GTK_STATE_NORMAL])
-				cairo_pattern_destroy (style->background[GTK_STATE_NORMAL]);
-				style->background[GTK_STATE_NORMAL] = cairo_pattern_reference (pattern);
-				gtk_widget_set_style (GTK_WIDGET(applet), style);
-				g_object_unref (style);
-			}
-			break;
-		}
-	default:
-		break;
-	}
-}
-
 static void change_orient_cb (PanelApplet *applet, 
                               PanelAppletOrient orient, 
                               gpointer data) {
@@ -235,9 +170,7 @@ static void style_set_cb(GtkWidget *widget,
 
         sensors_applet = (SensorsApplet *)data;
 
-        display_mode = panel_applet_gconf_get_int(sensors_applet->applet,
-                                                  DISPLAY_MODE,
-                                                  NULL);
+        display_mode = g_settings_get_int(sensors_applet->settings, DISPLAY_MODE);
         if (sensors_applet->sensors) {
                 for (gtk_tree_model_get_iter_first(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter); not_end_of_interfaces; not_end_of_interfaces = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter)) {
                         
@@ -278,16 +211,10 @@ static void style_set_cb(GtkWidget *widget,
             
 }
 
-static const GtkActionEntry sensors_applet_menu_actions[] = {
-	{ "Preferences", GTK_STOCK_PROPERTIES, N_("_Preferences"),
-		NULL, NULL,
-		G_CALLBACK(prefs_cb) },
-	{ "Help", GTK_STOCK_HELP, N_("_Help"),
-		NULL, NULL,
-		G_CALLBACK(help_cb) },
-	{ "About", GTK_STOCK_ABOUT, N_("_About"),
-		NULL, NULL,
-		G_CALLBACK(about_cb) }
+static const GActionEntry sensors_applet_menu_actions[] = {
+	{ "preferences", prefs_cb, NULL, NULL, NULL },
+	{ "help", help_cb, NULL, NULL, NULL },
+	{ "about", about_cb, NULL, NULL, NULL }
 };
 
 #ifdef HAVE_LIBNOTIFY
@@ -334,7 +261,7 @@ void sensors_applet_notify(SensorsApplet *sensors_applet,
         
         sensors_applet->notification = notify_notification_new(summary,
                                                                message,
-                                                               GTK_STOCK_DIALOG_WARNING);
+                                                               "dialog-warning");
         g_free(summary);
         g_free(message);
         
@@ -374,15 +301,14 @@ void sensors_applet_notify_active_sensor(ActiveSensor *active_sensor, NotifType
         
         sensors_applet = active_sensor->sensors_applet;
 
-        if (!panel_applet_gconf_get_bool(sensors_applet->applet,
-                                         DISPLAY_NOTIFICATIONS,
-                                         NULL)) {
+        if (!g_settings_get_boolean(sensors_applet->settings,
+                                         DISPLAY_NOTIFICATIONS)) {
                 g_debug("Wanted to display notification, but user has disabled them");
                 return;
         }
-                                    
+
         table_children = gtk_container_get_children(GTK_CONTAINER(sensors_applet->table));
-        
+
         if (g_list_find(table_children, active_sensor->icon)) {
                 attach = GTK_WIDGET(active_sensor->icon);
         } else if (g_list_find(table_children, active_sensor->label)) {
@@ -396,7 +322,7 @@ void sensors_applet_notify_active_sensor(ActiveSensor *active_sensor, NotifType
                 return;
         }
         g_list_free(table_children);
-        
+
         path = gtk_tree_row_reference_get_path(active_sensor->sensor_row);
         if (gtk_tree_model_get_iter(GTK_TREE_MODEL(sensors_applet->sensors), 
                                     &iter, path)) {
@@ -411,7 +337,7 @@ void sensors_applet_notify_active_sensor(ActiveSensor *active_sensor, NotifType
                 return;
         }
         gtk_tree_path_free(path);
-        
+
         // do different stuff for different notif types
         switch (notif_type) {
         case LOW_ALARM: // fall thru
@@ -438,9 +364,8 @@ void sensors_applet_notify_active_sensor(ActiveSensor *active_sensor, NotifType
                 case TEMP_SENSOR:
                         unit_type_title = _("Temperature");
                         unit_type = _("temperature");
-                        temp_scale = (TemperatureScale)panel_applet_gconf_get_int(active_sensor->sensors_applet->applet,
-                                                                                  TEMPERATURE_SCALE,
-                                                                                  NULL);
+                        temp_scale = (TemperatureScale)g_settings_get_int(active_sensor->sensors_applet->settings,
+                                                                                  TEMPERATURE_SCALE);
                         
                         switch (temp_scale) {
                         case CELSIUS:
@@ -484,9 +409,8 @@ void sensors_applet_notify_active_sensor(ActiveSensor *active_sensor, NotifType
         case SENSOR_INTERFACE_ERROR:
                 summary = g_strdup_printf(_("Error updating sensor %s"), sensor_label);
                 message = g_strdup_printf(_("An error occurred while trying to update the value of the sensor %s located at %s."), sensor_label, sensor_path);
-                timeout_msecs = panel_applet_gconf_get_int(active_sensor->sensors_applet->applet,
-                                                           TIMEOUT,
-                                                           NULL);
+                timeout_msecs = g_settings_get_int(active_sensor->sensors_applet->settings,
+                                                           TIMEOUT);
                 
                 break;
                 
@@ -498,7 +422,7 @@ void sensors_applet_notify_active_sensor(ActiveSensor *active_sensor, NotifType
                                        notif_type,
                                        summary,
                                        message,
-				       GTK_STOCK_DIALOG_WARNING,
+				       "dialog-warning",
                                        timeout_msecs);
         
         g_free(sensor_path);
@@ -595,9 +519,9 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 
                 if (sensors_applet->table == NULL) {
                         /* only need 1 row and 1 col */
-                        sensors_applet->table = gtk_table_new(1, 1, FALSE);
-                        gtk_table_set_col_spacings(GTK_TABLE(sensors_applet->table), COLUMN_SPACING);
-                        gtk_table_set_row_spacings(GTK_TABLE(sensors_applet->table), ROW_SPACING);
+                        sensors_applet->table = gtk_grid_new();
+                        gtk_grid_set_column_spacing(GTK_GRID(sensors_applet->table), COLUMN_SPACING);
+                        gtk_grid_set_row_spacing(GTK_GRID(sensors_applet->table), ROW_SPACING);
                         /* add table to applet */
                         gtk_container_add(GTK_CONTAINER(sensors_applet->applet), sensors_applet->table);
                         
@@ -609,15 +533,18 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
                         gtk_container_foreach(GTK_CONTAINER(sensors_applet->table),
                                               (GtkCallback)gtk_widget_destroy,
                                               NULL);
-                        /* make sure only 1x1 table */
-                        gtk_table_resize(GTK_TABLE(sensors_applet->table),
-                                         1, 1);
                 }
                 g_debug("packing no sensors enabled label");
-                gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+                gtk_grid_attach(GTK_GRID(sensors_applet->table),
                                           GTK_WIDGET(no_sensors_enabled_label),
-                                          0, 1,
-                                          0, 1);
+                                          0, 0,
+                                          1, 1);
+		g_object_set (G_OBJECT (sensors_applet->table),
+				"halign", GTK_ALIGN_FILL,
+				"valign", GTK_ALIGN_FILL,
+				"vexpand", TRUE,
+				"hexpand", TRUE,
+				NULL);
                 gtk_widget_show_all(GTK_WIDGET(sensors_applet->applet));
                 return;
                 
@@ -625,10 +552,10 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
         /* otherwise can acess active_sensors without any worries */
 	num_active_sensors = g_list_length(sensors_applet->active_sensors);
 
-	display_mode = (DisplayMode)panel_applet_gconf_get_int(sensors_applet->applet, 
-                                                               DISPLAY_MODE, NULL);
-	layout_mode = (LayoutMode)panel_applet_gconf_get_int(sensors_applet->applet, 
-                                                             LAYOUT_MODE, NULL);
+	display_mode = (DisplayMode)g_settings_get_int(sensors_applet->settings, 
+                                                               DISPLAY_MODE);
+	layout_mode = (LayoutMode)g_settings_get_int(sensors_applet->settings, 
+                                                             LAYOUT_MODE);
 
 
         horizontal = (((panel_applet_get_orient(sensors_applet->applet) == PANEL_APPLET_ORIENT_UP) || 
@@ -640,11 +567,10 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 
         /* get the first active sensor */
         first_sensor = (ActiveSensor *)sensors_applet->active_sensors->data;
-
         switch (display_mode) {
         case DISPLAY_VALUE:
-                gtk_widget_size_request(GTK_WIDGET(first_sensor->value),
-                                        &req);
+                gtk_widget_get_preferred_size(GTK_WIDGET(first_sensor->value),
+                                        &req, NULL);
                 value_width = req.width + COLUMN_SPACING;
                 value_height = req.height + ROW_SPACING;
 
@@ -657,8 +583,8 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
                         return;
                 }
 
-                num_sensors_per_group = (sensors_applet->size / 
-                                         (horizontal ? value_height : 
+                num_sensors_per_group = (sensors_applet->size /
+                                         (horizontal ? value_height :
                                           value_width));
                 break;
 
@@ -666,13 +592,13 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
                 /* even though we end up packing the event boxes into the
                  * panel, these dont give back request sizes, so need to ask
                  * widgets directly */
-                gtk_widget_size_request(GTK_WIDGET(first_sensor->value),
-                                        &req);
+                gtk_widget_get_preferred_size(GTK_WIDGET(first_sensor->value),
+                                        &req, NULL);
                 value_width = req.width + COLUMN_SPACING;
                 value_height = req.height + ROW_SPACING;
 
-                gtk_widget_size_request(GTK_WIDGET(first_sensor->label),
-                                        &req);
+                gtk_widget_get_preferred_size(GTK_WIDGET(first_sensor->label),
+                                        &req, NULL);
                 label_width = req.width + COLUMN_SPACING;
                 label_height = req.height + ROW_SPACING;
         
@@ -703,13 +629,13 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
                 break;
 
         case DISPLAY_ICON_WITH_VALUE:
-                gtk_widget_size_request(GTK_WIDGET(first_sensor->value),
-                                        &req);
+                gtk_widget_get_preferred_size(GTK_WIDGET(first_sensor->value),
+                                        &req, NULL);
                 value_width = req.width + COLUMN_SPACING;
                 value_height = req.height + ROW_SPACING;
 
-                gtk_widget_size_request(GTK_WIDGET(first_sensor->icon),
-                                        &req);
+                gtk_widget_get_preferred_size(GTK_WIDGET(first_sensor->icon),
+                                        &req, NULL);
                 icon_width = req.width + COLUMN_SPACING;
                 icon_height = req.height + ROW_SPACING;
                 
@@ -723,12 +649,12 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
                 
                 switch (layout_mode) {
                 case VALUE_BESIDE_LABEL:
-                        num_sensors_per_group = (sensors_applet->size / 
+                        num_sensors_per_group = (sensors_applet->size /
                                                  (horizontal ? MAX(icon_height, value_height) : 
                                                   (icon_width + value_width)));
                         break;
                 case VALUE_BELOW_LABEL:
-                        num_sensors_per_group = (sensors_applet->size / 
+                        num_sensors_per_group = (sensors_applet->size /
                                                  (horizontal ? (icon_height + value_height) : 
                                                   MAX(icon_width, value_width)));
 
@@ -738,8 +664,8 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
                 break;
 
         case DISPLAY_ICON:
-                gtk_widget_size_request(GTK_WIDGET(first_sensor->icon),
-                                        &req);
+                gtk_widget_get_preferred_size(GTK_WIDGET(first_sensor->icon),
+                                        &req, NULL);
                 icon_width = req.width + COLUMN_SPACING;
                 icon_height = req.height + ROW_SPACING;
                 if (!(icon_width && icon_height)) {
@@ -807,9 +733,9 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 
 	if (sensors_applet->table == NULL) {
 		/* create table and add to applet */
-		sensors_applet->table = gtk_table_new(rows, cols, FALSE);
-		gtk_table_set_col_spacings(GTK_TABLE(sensors_applet->table), COLUMN_SPACING);
-		gtk_table_set_row_spacings(GTK_TABLE(sensors_applet->table), ROW_SPACING);
+		sensors_applet->table = gtk_grid_new();
+		gtk_grid_set_column_spacing(GTK_GRID(sensors_applet->table), COLUMN_SPACING);
+		gtk_grid_set_row_spacing(GTK_GRID(sensors_applet->table), ROW_SPACING);
 		gtk_container_add(GTK_CONTAINER(sensors_applet->applet), sensors_applet->table);
 	} else {
 		/* remove all children if table already exists so we can start
@@ -820,9 +746,6 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 		gtk_container_foreach(GTK_CONTAINER(sensors_applet->table),
 				      sensors_applet_pack_display_empty_table_cb,
 				      sensors_applet->table);
-
-		/* then resize table */
-		gtk_table_resize(GTK_TABLE(sensors_applet->table), rows, cols);
 	}
               
               /* pack icons / labels and values into table */
@@ -840,17 +763,29 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 				/* attach label / icon at this point */
 				if (display_mode == DISPLAY_ICON_WITH_VALUE) {
 					if (((ActiveSensor *)(current_sensor->data))->icon) {
-						gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+						gtk_grid_attach(GTK_GRID(sensors_applet->table),
                                                                           ((ActiveSensor *)(current_sensor->data))->icon,
-									  i, i + 1,
-									  j, j + 1);
+									  i, j,
+									  1, 1);
+						g_object_set (G_OBJECT (sensors_applet->table),
+							"halign", GTK_ALIGN_FILL,
+							"valign", GTK_ALIGN_FILL,
+							"vexpand", TRUE,
+							"hexpand", TRUE,
+							NULL);
 					}
 				} else {
 					if (((ActiveSensor *)(current_sensor->data))->label) {
-						gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+						gtk_grid_attach(GTK_GRID(sensors_applet->table),
 									  ((ActiveSensor *)(current_sensor->data))->label,
-                                                                          i, i + 1,
-									  j, j + 1);
+                                                                          i, j,
+									  1, 1);
+						g_object_set (G_OBJECT (sensors_applet->table),
+							"halign", GTK_ALIGN_FILL,
+							"valign", GTK_ALIGN_FILL,
+							"vexpand", TRUE,
+							"hexpand", TRUE,
+							NULL);
 					}				
 				}
 				/* now attach sensor value to either
@@ -870,14 +805,21 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 
 					 /* place value next to label */
 					if (((ActiveSensor *)(current_sensor->data))->value) {
-						gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+						gtk_grid_attach(GTK_GRID(sensors_applet->table),
 									  ((ActiveSensor *)(current_sensor->data))->value,
-									  i + 1, i + 2,
-									  j, j + 1);
+									  i + 1, j,
+									  1,
+									  1);
+						g_object_set (G_OBJECT (sensors_applet->table),
+							"halign", GTK_ALIGN_FILL,
+							"valign", GTK_ALIGN_FILL,
+							"vexpand", TRUE,
+							"hexpand", TRUE,
+							NULL);
 					}
 					j++;
 				} else { /* place value below label */
-					/* center align labels */ 	 
+					/* center align labels */
 					if (((ActiveSensor *)(current_sensor->data))->icon) {
 						gtk_misc_set_alignment(GTK_MISC(((ActiveSensor *)(current_sensor->data))->icon), 0.5, 0.5);
 					}
@@ -889,10 +831,16 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 					}
  
 					if (((ActiveSensor *)(current_sensor->data))->value) {
-						gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+						gtk_grid_attach(GTK_GRID(sensors_applet->table),
 									  ((ActiveSensor *)(current_sensor->data))->value,
-									  i, i + 1,
-									  j + 1, j + 2);
+									  i, j + 1,
+									  1, 1);
+						g_object_set (G_OBJECT (sensors_applet->table),
+							"halign", GTK_ALIGN_FILL,
+							"valign", GTK_ALIGN_FILL,
+							"vexpand", TRUE,
+							"hexpand", TRUE,
+							NULL);
 					}
 					j += 2;
 				}
@@ -905,11 +853,9 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 			} else {
 				i++;
 			}
-			
-			
 		} /* end column loop	*/
 
-		
+
 	} else { /* not showing labels and icons with values, so just
                   * pack either only icons or values */
 		for (i = 0; current_sensor != NULL && i < cols; ++i) {
@@ -917,24 +863,42 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
                                 if (display_mode == DISPLAY_VALUE) {
                                         
                                         if (((ActiveSensor *)(current_sensor->data))->value) {
-                                                gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+                                                gtk_grid_attach(GTK_GRID(sensors_applet->table),
                                                                           ((ActiveSensor *)(current_sensor->data))->value,
-                                                                          i, i + 1,
-                                                                          j, j + 1);
+                                                                          i, j,
+									  1, 1);
+						g_object_set (G_OBJECT (sensors_applet->table),
+							"halign", GTK_ALIGN_FILL,
+							"valign", GTK_ALIGN_FILL,
+							"vexpand", TRUE,
+							"hexpand", TRUE,
+							NULL);
                                         }
                                 } else if (display_mode == DISPLAY_ICON) {
                                         if (((ActiveSensor *)(current_sensor->data))->value) {
-                                                gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+                                                gtk_grid_attach(GTK_GRID(sensors_applet->table),
                                                                           ((ActiveSensor *)(current_sensor->data))->icon,
-                                                                          i, i + 1,
-                                                                          j, j + 1);
+                                                                          i, j,
+									  1, 1);
+						g_object_set (G_OBJECT (sensors_applet->table),
+							"halign", GTK_ALIGN_FILL,
+							"valign", GTK_ALIGN_FILL,
+							"vexpand", TRUE,
+							"hexpand", TRUE,
+							NULL);
                                         }
                                 } else if (display_mode == DISPLAY_GRAPH) {
                                         if (((ActiveSensor *)(current_sensor->data))->graph) {
-                                                gtk_table_attach_defaults(GTK_TABLE(sensors_applet->table),
+                                                gtk_grid_attach(GTK_GRID(sensors_applet->table),
                                                                           ((ActiveSensor *)(current_sensor->data))->graph_frame,
-                                                                          i, i + 1,
-                                                                          j, j + 1);
+                                                                          i, j,
+									  1, 1);
+						g_object_set (G_OBJECT (sensors_applet->table),
+							"halign", GTK_ALIGN_FILL,
+							"valign", GTK_ALIGN_FILL,
+							"vexpand", TRUE,
+							"hexpand", TRUE,
+							NULL);
                                         }
                                 }
 
@@ -942,7 +906,7 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 				current_sensor = g_list_next(current_sensor);
 			}
 		}
-		
+
 	}
 	if (old_table_children != NULL) {
 		gtk_container_foreach(GTK_CONTAINER(sensors_applet->table),
@@ -952,7 +916,7 @@ static void sensors_applet_pack_display(SensorsApplet *sensors_applet) {
 	}
 	gtk_widget_show_all(GTK_WIDGET(sensors_applet->applet));
 
-} 	    
+}
 
 /* must unref when done with returned pixbuf */
 GdkPixbuf *sensors_applet_load_icon(IconType icon_type) {
@@ -961,7 +925,6 @@ GdkPixbuf *sensors_applet_load_icon(IconType icon_type) {
         GError *error = NULL;
 
 	/* try to load the icon */
-
         /* not allowed to unref or ref icon_theme once we have it */
         icon_theme = gtk_icon_theme_get_default();
         icon = gtk_icon_theme_load_icon(icon_theme,
@@ -976,7 +939,7 @@ GdkPixbuf *sensors_applet_load_icon(IconType icon_type) {
                 
                 /* try again with default icon */
                 icon = gtk_icon_theme_load_icon(icon_theme,
-                                                GTK_STOCK_MISSING_IMAGE,
+                                                "image-missing",
                                                 DEFAULT_ICON_SIZE,
                                                 GTK_ICON_LOOKUP_USE_BUILTIN,
                                                 &error);
@@ -996,11 +959,11 @@ GdkPixbuf *sensors_applet_load_icon(IconType icon_type) {
 }
 
 gboolean sensors_applet_add_sensor(SensorsApplet *sensors_applet,
-                                   const gchar *path, 
-                                   const gchar *id, 
-                                   const gchar *label, 
-                                   const gchar *interface, 
-                                   SensorType type, 
+                                   const gchar *path,
+                                   const gchar *id,
+                                   const gchar *label,
+                                   const gchar *interface,
+                                   SensorType type,
                                    gboolean enable,
                                    gdouble low_value,
                                    gdouble high_value,
@@ -1012,17 +975,15 @@ gboolean sensors_applet_add_sensor(SensorsApplet *sensors_applet,
                                    gdouble offset,
                                    IconType icon_type,
                                    const gchar *graph_color) {
-        
-					       
 	GtkTreeIter interfaces_iter, sensors_iter;
 	gboolean not_empty_tree;
 
-        gchar *node_interface;
+	gchar *node_interface;
 	gboolean not_end_of_interfaces = TRUE, interface_exists = FALSE;
 	gboolean not_end_of_sensors = TRUE;
 	gchar *sensor_id;
-        gchar *sensor_path;
-        SensorType sensor_type;
+	gchar *sensor_path;
+	SensorType sensor_type;
 	GdkPixbuf *icon;
 	GtkTreePath *tree_path;
 
@@ -1034,7 +995,7 @@ gboolean sensors_applet_add_sensor(SensorsApplet *sensors_applet,
 
 	if (NULL == sensors_applet->sensors) {
 
-		sensors_applet->sensors = gtk_tree_store_new(N_COLUMNS, 
+		sensors_applet->sensors = gtk_tree_store_new(N_COLUMNS,
 							     G_TYPE_STRING, /* path */
 							     G_TYPE_STRING, /* id */
 							     G_TYPE_STRING, /* label */
@@ -1046,62 +1007,65 @@ gboolean sensors_applet_add_sensor(SensorsApplet *sensors_applet,
 							     G_TYPE_DOUBLE, /* low value */
 							     G_TYPE_DOUBLE, /* high type */
 							     G_TYPE_BOOLEAN, /* alarm enable */
-							     G_TYPE_STRING, /* low alarm command */ 
-							     G_TYPE_STRING, /* high alarm command */ 
+							     G_TYPE_STRING, /* low alarm command */
+							     G_TYPE_STRING, /* high alarm command */
 							     G_TYPE_UINT, /* alarm timeout */
 							     G_TYPE_DOUBLE, /* multiplier */
 							     G_TYPE_DOUBLE, /* offset */
 							     G_TYPE_UINT, /* icon type */
 							     GDK_TYPE_PIXBUF, /* icon pixbuf */
                                                              G_TYPE_STRING); /* graph color */
-		      
-		 
+
+
 		g_debug("Sensor tree created.");
 
 		/* we know tree is actually empty since we just created it */
 		not_empty_tree = FALSE;
 	}
-	
+
 	/* search sensor tree for the parent interface to place this
 	 * sensor under */
-	for (not_empty_tree = gtk_tree_model_get_iter_first(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter); not_empty_tree && not_end_of_interfaces && !interface_exists; not_end_of_interfaces = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter)) {
+	for (not_empty_tree = gtk_tree_model_get_iter_first(GTK_TREE_MODEL(sensors_applet->sensors),
+					&interfaces_iter);
+			not_empty_tree && not_end_of_interfaces && !interface_exists;
+			not_end_of_interfaces = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), 
+							&interfaces_iter)) {
 		gtk_tree_model_get(GTK_TREE_MODEL(sensors_applet->sensors), &interfaces_iter,
-				   INTERFACE_COLUMN, &node_interface,
-				   -1);
+			INTERFACE_COLUMN, &node_interface, -1);
 		if (g_ascii_strcasecmp(interface, node_interface) == 0) {
 			/* found interface in tree */
 			interface_exists = TRUE;
-                        
+
 			/* now see if this actual sensor already
 			 * exists within this interface - don't want
 			 * to add duplicates */
 			/* see if have children */
 			for (not_end_of_sensors = gtk_tree_model_iter_children(GTK_TREE_MODEL(sensors_applet->sensors), &sensors_iter,  &interfaces_iter); not_end_of_sensors; not_end_of_sensors = gtk_tree_model_iter_next(GTK_TREE_MODEL(sensors_applet->sensors), &sensors_iter)) {
-				gtk_tree_model_get(GTK_TREE_MODEL(sensors_applet->sensors), &sensors_iter,
-						   PATH_COLUMN, &sensor_path,
-						   ID_COLUMN, &sensor_id,
-						   SENSOR_TYPE_COLUMN, &sensor_type,
-						   -1);
+				gtk_tree_model_get(GTK_TREE_MODEL(sensors_applet->sensors),
+					&sensors_iter,
+					PATH_COLUMN, &sensor_path,
+					ID_COLUMN, &sensor_id,
+					SENSOR_TYPE_COLUMN, &sensor_type,-1);
 				if (g_ascii_strcasecmp(sensor_id, id) == 0 &&
-                                    g_ascii_strcasecmp(sensor_path, path) == 0  &&
-                                    sensor_type == type) {
+					g_ascii_strcasecmp(sensor_path, path) == 0  &&
+					sensor_type == type) {
 					/* sensor already exists so
 					 * dont add a second time */
 					g_debug("sensor with path: %s, id: %s already exists in tree, not adding a second time", sensor_path, sensor_id);
 					g_free(sensor_id);
 					g_free(sensor_path);
-                                        g_free(node_interface);
+					g_free(node_interface);
 					return FALSE;
 				}
 				g_free(sensor_id);
-                                g_free(sensor_path);
+				g_free(sensor_path);
 			}
-                        g_free(node_interface);
+			g_free(node_interface);
 			break;
 		}
-                g_free(node_interface);               
-        }
-                
+		g_free(node_interface);
+	}
+
 
 
 	if (!interface_exists) {
@@ -1127,9 +1091,9 @@ gboolean sensors_applet_add_sensor(SensorsApplet *sensors_applet,
                 g_debug("Added sensor interface %s to tree", interface);
 	}
 
-        icon = sensors_applet_load_icon(icon_type);
+	icon = sensors_applet_load_icon(icon_type);
+
 
-	
 	/* then add sensor as a child under interface node - ie assume
 	 * we either found it or created it - the inteface node that
 	 * is */
@@ -1138,7 +1102,7 @@ gboolean sensors_applet_add_sensor(SensorsApplet *sensors_applet,
 	gtk_tree_store_append(sensors_applet->sensors,
 			      &sensors_iter,
 			      &interfaces_iter);
-	
+
 	gtk_tree_store_set(sensors_applet->sensors,
 			   &sensors_iter,
 			   PATH_COLUMN, path,
@@ -1171,31 +1135,31 @@ gboolean sensors_applet_add_sensor(SensorsApplet *sensors_applet,
 		sensors_applet_sensor_enabled(sensors_applet, tree_path);
 		gtk_tree_path_free(tree_path);
 	}
-        return TRUE;
-}	
+	return TRUE;
+}
 
 
 static ActiveSensor *sensors_applet_find_active_sensor(SensorsApplet *sensors_applet,
                                                        GtkTreePath *path) {
 	GtkTreePath *sensor_tree_path;
 	GList *current_sensor;
-	
+
 	for (current_sensor = sensors_applet->active_sensors; current_sensor != NULL; current_sensor = g_list_next(current_sensor)) {
 		sensor_tree_path = gtk_tree_row_reference_get_path(((ActiveSensor *)(current_sensor->data))->sensor_row);
 
 		if (gtk_tree_path_compare(path, sensor_tree_path) == 0) {
-                        gtk_tree_path_free(sensor_tree_path);
+			gtk_tree_path_free(sensor_tree_path);
 			return ((ActiveSensor *)(current_sensor->data));
 		}
-                gtk_tree_path_free(sensor_tree_path);
+		gtk_tree_path_free(sensor_tree_path);
 	}
 	return NULL;
 }
-	
-	
+
+
 /* path should be the full path to a file representing the sensor (eg
  * /dev/hda or /sys/devices/platform/i2c-0/0-0290/temp1_input) */
-	
+
 void sensors_applet_display_layout_changed(SensorsApplet *sensors_applet) {
         /* update sensors since will need to update icons / graphs etc
          * if weren't displayed before */
@@ -1220,7 +1184,7 @@ void sensors_applet_alarm_off(SensorsApplet *sensors_applet,
 		active_sensor_alarm_off(active_sensor, notif_type);
 	}
 }
-				
+
 void sensors_applet_all_alarms_off(SensorsApplet *sensors_applet,
                                    GtkTreePath *path) {
         sensors_applet_alarm_off(sensors_applet, path, LOW_ALARM);
@@ -1235,25 +1199,25 @@ void sensors_applet_sensor_enabled(SensorsApplet *sensors_applet,
 	g_assert(sensors_applet);
 	g_assert(path);
 
-        active_sensor = active_sensor_new(sensors_applet,
-                                          gtk_tree_row_reference_new(GTK_TREE_MODEL(sensors_applet->sensors), path));
-        
-        active_sensor_update(active_sensor, sensors_applet);
-                                                                     
-        /* keep list sorted */
+	active_sensor = active_sensor_new(sensors_applet,
+				gtk_tree_row_reference_new(GTK_TREE_MODEL(sensors_applet->sensors), path));
+
+	active_sensor_update(active_sensor, sensors_applet);
+
+	/* keep list sorted */
 	sensors_applet->active_sensors = g_list_insert_sorted(sensors_applet->active_sensors, 
-                                                              active_sensor, 
-                                                              (GCompareFunc)active_sensor_compare);
-	
-        sensors_applet_pack_display(sensors_applet);
+						active_sensor, 
+						(GCompareFunc)active_sensor_compare);
+
+	sensors_applet_pack_display(sensors_applet);
 }
 
 void sensors_applet_reorder_sensors(SensorsApplet *sensors_applet) {
-        sensors_applet->active_sensors = g_list_sort(sensors_applet->active_sensors, (GCompareFunc)active_sensor_compare);
+	sensors_applet->active_sensors = g_list_sort(sensors_applet->active_sensors, (GCompareFunc)active_sensor_compare);
 
 	sensors_applet_pack_display(sensors_applet);
 }
-                                                     
+
 void sensors_applet_sensor_disabled(SensorsApplet *sensors_applet,
                                     GtkTreePath *path) {
 
@@ -1265,14 +1229,14 @@ void sensors_applet_sensor_disabled(SensorsApplet *sensors_applet,
 	if ((active_sensor = sensors_applet_find_active_sensor(sensors_applet,
                                                                path)) != NULL) {
 		g_debug("Destroying active sensor...");
-		
+
 		g_debug("-- removing from list...");
 		sensors_applet->active_sensors = g_list_remove(sensors_applet->active_sensors,
 			      active_sensor);
 		g_debug("-- repacking display....");
 		sensors_applet_pack_display(sensors_applet);
-                
-                active_sensor_destroy(active_sensor);
+
+		active_sensor_destroy(active_sensor);
 	}
 }
 
@@ -1286,22 +1250,20 @@ void sensors_applet_update_sensor(SensorsApplet *sensors_applet,
 
 	if ((active_sensor = sensors_applet_find_active_sensor(sensors_applet,
                                                                path)) != NULL) {
-		active_sensor_update(active_sensor, 
-				     sensors_applet);
+		active_sensor_update(active_sensor, sensors_applet);
 	}
 }
  
 void sensors_applet_icon_changed(SensorsApplet *sensors_applet,
                                  GtkTreePath *path) {
 	ActiveSensor *active_sensor;
-	
+
 	g_assert(sensors_applet);
 	g_assert(path);
-	
+
 	if ((active_sensor = sensors_applet_find_active_sensor(sensors_applet,
                                                                path)) != NULL) {
-		active_sensor_icon_changed(active_sensor,
-					   sensors_applet);
+		active_sensor_icon_changed(active_sensor, sensors_applet);
 	}
 }
 
@@ -1310,14 +1272,14 @@ void sensors_applet_icon_changed(SensorsApplet *sensors_applet,
  */
 gboolean sensors_applet_update_active_sensors(SensorsApplet *sensors_applet) {
 	g_assert(sensors_applet);
-        
-        if (sensors_applet->active_sensors) {
-                g_list_foreach(sensors_applet->active_sensors,
-                               (GFunc)active_sensor_update,
-                               sensors_applet);
-                return TRUE;
-        }
-        return FALSE;
+
+	if (sensors_applet->active_sensors) {
+		g_list_foreach(sensors_applet->active_sensors,
+			(GFunc)active_sensor_update,
+			sensors_applet);
+		return TRUE;
+	}
+	return FALSE;
 }
 
 /**
@@ -1330,12 +1292,11 @@ void sensors_applet_graph_size_changed(SensorsApplet *sensors_applet) {
 
         if (sensors_applet->active_sensors) {
                 
-                graph_size = panel_applet_gconf_get_int(sensors_applet->applet,
-                                                        GRAPH_SIZE,
-                                                        NULL);
-                if (panel_applet_get_orient(sensors_applet->applet) == 
+                graph_size = g_settings_get_int(sensors_applet->settings,
+                                                        GRAPH_SIZE);
+                if (panel_applet_get_orient(sensors_applet->applet) ==
                     PANEL_APPLET_ORIENT_UP ||
-                    panel_applet_get_orient(sensors_applet->applet) == 
+                    panel_applet_get_orient(sensors_applet->applet) ==
                     PANEL_APPLET_ORIENT_DOWN) {
                         /* is horizontal so set graph_size as width */
                         dimensions[0] = graph_size;
@@ -1352,8 +1313,8 @@ void sensors_applet_graph_size_changed(SensorsApplet *sensors_applet) {
         
 }
 
-gdouble sensors_applet_convert_temperature(gdouble value, 
-                                           TemperatureScale old, 
+gdouble sensors_applet_convert_temperature(gdouble value,
+                                           TemperatureScale old,
                                            TemperatureScale new) {
 
         switch (old) {
@@ -1400,87 +1361,87 @@ gdouble sensors_applet_convert_temperature(gdouble value,
 
 void sensors_applet_init(SensorsApplet *sensors_applet) {
 
-	GtkActionGroup *action_group;
+	GActionGroup *action_group;
 	gchar *ui_path;
-	
-        g_assert(sensors_applet);
+
+	g_assert(sensors_applet);
 	g_assert(sensors_applet->applet);
 
-        /* plugin functions are stored as name -> get_value_function pairs so
+	sensors_applet->settings = panel_applet_settings_new (sensors_applet->applet, SENSORS_APPLET_SCHEMA);
+
+	/* Have our background automatically painted. */
+	panel_applet_set_background_widget(PANEL_APPLET(sensors_applet->applet),
+		GTK_WIDGET(sensors_applet->applet));
+
+	/* plugin functions are stored as name -> get_value_function pairs so
          * use standard string functions on hash table */
-        sensors_applet->plugins = g_hash_table_new(g_str_hash,
-                                                      g_str_equal);
+	sensors_applet->plugins = g_hash_table_new(g_str_hash, g_str_equal);
 
-        sensors_applet->required_plugins = g_hash_table_new_full(g_str_hash,
-                                                                 g_str_equal,
-                                                                 g_free,
-                                                                 NULL);
-        
-        /* initialise size */
-        sensors_applet->size = DEFAULT_APPLET_SIZE;
+	sensors_applet->required_plugins = g_hash_table_new_full(g_str_hash,
+						g_str_equal, g_free, NULL);
+
+	/* initialise size */
+	sensors_applet->size = DEFAULT_APPLET_SIZE;
 
-        panel_applet_set_flags(sensors_applet->applet, 
-                               PANEL_APPLET_EXPAND_MINOR);
+	panel_applet_set_flags(sensors_applet->applet,
+		PANEL_APPLET_EXPAND_MINOR);
 
 	g_signal_connect(sensors_applet->applet, "destroy",
-			 G_CALLBACK(destroy_cb),
-			 sensors_applet);
+		G_CALLBACK(destroy_cb), sensors_applet);
 
 
-        /* if not setup, write defaults to gconf */
-        sensors_applet_gconf_setup(sensors_applet);
+	/* if not setup, write defaults to configuration backend */
+	sensors_applet_conf_setup(sensors_applet);
 
 	/* now do any setup needed manually */
-        sensors_applet_plugins_load_all(sensors_applet);        
+	sensors_applet_plugins_load_all(sensors_applet);
 
-        /* should have created sensors tree above, but if have
+	/* should have created sensors tree above, but if have
 	   not was because we couldn't find any sensors */
 	if (NULL == sensors_applet->sensors) {
-		GtkWidget *label;	
+		GtkWidget *label;
 		label = gtk_label_new(_("No sensors found!"));
 		gtk_container_add(GTK_CONTAINER(sensors_applet->applet), label);
 		gtk_widget_show_all(GTK_WIDGET(sensors_applet->applet));
 		return;
 	}
-	
-        /* only do menu and signal connections if sensors are found */
-	action_group = gtk_action_group_new ("Sensors Applet Actions");
-	gtk_action_group_set_translation_domain (action_group, GETTEXT_PACKAGE);
-	gtk_action_group_add_actions (action_group,
+
+	/* only do menu and signal connections if sensors are found */
+	action_group = g_simple_action_group_new ();
+	g_action_map_add_action_entries (G_ACTION_MAP (action_group),
 		sensors_applet_menu_actions,
 		G_N_ELEMENTS (sensors_applet_menu_actions),
 		sensors_applet);
 	ui_path = g_build_filename (UIDIR, SENSORS_APPLET_MENU_FILE, NULL);
-	panel_applet_setup_menu_from_file (sensors_applet->applet, ui_path, action_group);
+	panel_applet_setup_menu_from_file (sensors_applet->applet, ui_path, action_group,
+		GETTEXT_PACKAGE);
 	g_free (ui_path);
-	g_object_unref (action_group);
 
-	g_signal_connect(sensors_applet->applet, "style-set",
-			 G_CALLBACK(style_set_cb),
-			 sensors_applet);
+	gtk_widget_insert_action_group (GTK_WIDGET (sensors_applet->applet), "sensorsapplet",
+		G_ACTION_GROUP (action_group));
 
-	g_signal_connect(sensors_applet->applet, "change_background",
-			 G_CALLBACK(change_background_cb), 
-			 sensors_applet);
+//       action = g_action_map_lookup_action (G_ACTION_MAP (action_group), "dialog");
+  //     g_object_bind_property (applet, "locked-down", action, "enabled",
+//			+                            G_BINDING_DEFAULT|G_BINDING_INVERT_BOOLEAN|G_BINDING_SYNC_CREATE);
 
-        g_signal_connect(G_OBJECT(sensors_applet->applet), "change_orient",
-                          G_CALLBACK(change_orient_cb), 
-                          sensors_applet);
+	g_object_unref (action_group);
 
-        g_signal_connect(G_OBJECT(sensors_applet->applet), "size_allocate",
-                          G_CALLBACK(size_allocate_cb), 
-                          sensors_applet);
+	g_signal_connect(sensors_applet->applet, "style-set",
+		G_CALLBACK(style_set_cb), sensors_applet);
 
+	g_signal_connect(G_OBJECT(sensors_applet->applet), "change_orient",
+		G_CALLBACK(change_orient_cb), sensors_applet);
 
+	g_signal_connect(G_OBJECT(sensors_applet->applet), "size_allocate",
+		G_CALLBACK(size_allocate_cb), sensors_applet);
 
 	sensors_applet_update_active_sensors(sensors_applet);
 	sensors_applet_pack_display(sensors_applet);
 
-	sensors_applet->timeout_id = g_timeout_add_seconds(panel_applet_gconf_get_int(sensors_applet->applet, TIMEOUT, NULL) / 1000, 
-                                                           (GSourceFunc)sensors_applet_update_active_sensors, 
-                                                           sensors_applet);
+	sensors_applet->timeout_id = g_timeout_add_seconds(
+					g_settings_get_int(sensors_applet->settings, TIMEOUT) / 1000,
+					(GSourceFunc)sensors_applet_update_active_sensors,
+					sensors_applet);
 	gtk_widget_show_all(GTK_WIDGET(sensors_applet->applet));
 }
 
-
-
diff --git a/sensors-applet/sensors-applet.h b/sensors-applet/sensors-applet.h
index ac56dc4..404842b 100644
--- a/sensors-applet/sensors-applet.h
+++ b/sensors-applet/sensors-applet.h
@@ -11,9 +11,9 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
 #ifndef SENSORS_APPLET_H
@@ -47,7 +47,7 @@ static const gchar * const stock_icons[NUM_ICONS] = {
         "sensors-applet-chip",
         "sensors-applet-fan",
         "sensors-applet-case"
-};        
+};
 
 #define DEFAULT_ICON_SIZE 22
 
@@ -71,7 +71,7 @@ enum {
 	ENABLE_COLUMN,
 	VISIBLE_COLUMN,
        	LOW_VALUE_COLUMN,
-	HIGH_VALUE_COLUMN, 
+	HIGH_VALUE_COLUMN,
 	ALARM_ENABLE_COLUMN,
 	LOW_ALARM_COMMAND_COLUMN,
         HIGH_ALARM_COMMAND_COLUMN,
@@ -137,6 +137,7 @@ struct _SensorsApplet {
 	 * list of labels and sensor values into this container */
 	GtkWidget *table;
 	GList *active_sensors;
+	GSettings *settings;
 #ifdef HAVE_LIBNOTIFY
         NotifyNotification *notification;
 #endif // HAVE_LIBNOTIFY
