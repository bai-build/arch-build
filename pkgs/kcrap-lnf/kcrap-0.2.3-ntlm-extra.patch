diff -Naur kcrap-0.2.3/lib/kcrap.h kcrap-0.2.3-patched/lib/kcrap.h
--- kcrap-0.2.3/lib/kcrap.h	2010-06-17 01:09:51.000000000 -0400
+++ kcrap-0.2.3-patched/lib/kcrap.h	2012-03-08 18:19:34.829816000 -0500
@@ -37,6 +37,7 @@
     struct kcrap_data response;
     unsigned int error_num;
     struct kcrap_data error_msg;
+    struct kcrap_data extra_data;
 };
 
 struct kcrap_chal_req_data {
@@ -64,5 +65,7 @@
 struct kcrap_context* kcrap_init(char* keytab, char* service);
 void kcrap_free(struct kcrap_context *context);
 const char* kcrap_errmsg();
+const struct kcrap_data kcrap_get_extra_data();
 
 int kcrap_try(struct kcrap_context *context, struct kcrap_auth_req_data *req, int *auth_status);
+
diff -Naur kcrap-0.2.3/lib/kcraplib.c kcrap-0.2.3-patched/lib/kcraplib.c
--- kcrap-0.2.3/lib/kcraplib.c	2010-06-17 01:02:53.000000000 -0400
+++ kcrap-0.2.3-patched/lib/kcraplib.c	2012-03-08 18:19:34.830267000 -0500
@@ -28,11 +28,16 @@
 
 #define ERRBUF 1024
 static char _errmsg[ERRBUF];
+static struct kcrap_data _extra;
 
 const char* kcrap_errmsg() {
     return _errmsg;
 }
 
+const struct kcrap_data kcrap_get_extra_data() {
+    return _extra;
+}
+
 struct kcrap_context* kcrap_init(char* keytab, char* service) {
     struct kcrap_context *context;
     krb5_error_code retval;
@@ -150,6 +155,7 @@
     GETDATA(rep->response, buf, dec_data.length, offset);
     GETINT(rep->error_num, buf, dec_data.length, offset);
     GETDATA(rep->error_msg, buf, dec_data.length, offset);
+    GETDATA(rep->extra_data, buf, dec_data.length, offset);
     
     return 0;
 }
@@ -187,6 +193,11 @@
 	} else {
 	    error_num = 0;
 	    _errmsg[0] = 0;
+	    
+	    printf("Extra data length: %d\n", rep.extra_data.length);
+	    printf("Extra data value: 0x%016llx\n", rep.extra_data.data);
+	    
+	    _extra = rep.extra_data;
 	}
 	*auth_status = rep.auth_reply;
 	return error_num;
@@ -389,10 +400,10 @@
 
     req->pkt_type = KCRAP_PKT_AUTH_REQ;
     if (req->timestamp == 0) {
-	req->timestamp = time(NULL);
-	data.data = (char*)&req->nounce;
-	data.length = sizeof(req->nounce);
-	krb5_c_random_make_octets(context->krb5_context, &data);
+		req->timestamp = time(NULL);
+		data.data = (char*)&req->nounce;
+		data.length = sizeof(req->nounce);
+		krb5_c_random_make_octets(context->krb5_context, &data);
     }
     SETSHORT(req->pkt_type, pktbuf, sizeof(pktbuf), offset);
     SETDATA(req->chal_type, pktbuf, sizeof(pktbuf), offset);
@@ -409,51 +420,56 @@
     data.length = offset;
 
     if ((sock = kcrap_getsock()) < 0) {
-	return errno;
+		return errno;
     }
-    for (trycount = 0; trycount < 10 && !IS_FINAL(ok);) {
-	for (i = 0; context->servers[i] && !IS_FINAL(ok); i++, trycount++) {
-	    char *portstr;
-	    struct hostent *he;
-	    struct sockaddr_in to;
-	    int j;
-	    char host[NI_MAXHOST+1];
-
-	    strncpy(host, context->servers[i], NI_MAXHOST);
-	    host[NI_MAXHOST] = '\0';
-
-	    if ((portstr = strchr(host, ':')) == NULL) continue;
-	    *portstr = '\0';
-	    portstr++;
-	    if (*portstr == '\0') continue;
-	    memset(&to, 0, sizeof(to));
-	    to.sin_family = AF_INET;
-	    to.sin_port = htons(atoi(portstr));
-	    if (to.sin_port <= 0) continue;
-
-	    if (inet_aton(host, &to.sin_addr) == 1) {
-		if (kcrap_send(context, sock, &to, KCRAP_PKT_AUTH_REQ, &data, &keyblock) <= 0) continue;
-		sent++;
-		ok = kcrap_recv_rep(context, sock, 200, keyblock, req, auth_status);
-	    } else if ((he = gethostbyname(host))) {
-		for (j = 0; he->h_addr_list[j] && !IS_FINAL(ok); j++) {
-		    to.sin_addr = *(struct in_addr*)(he->h_addr_list[j]);
-		    if (kcrap_send(context, sock, &to, KCRAP_PKT_AUTH_REQ, &data, &keyblock) <= 0) continue;
-		    sent++;
-		    ok = kcrap_recv_rep(context, sock, 200, keyblock, req, auth_status);
+    for (trycount = 0; trycount < 10 && !IS_FINAL(ok);)
+    {
+		for (i = 0; context->servers[i] && !IS_FINAL(ok); i++, trycount++)
+		{
+			char *portstr;
+			struct hostent *he;
+			struct sockaddr_in to;
+			int j;
+			char host[NI_MAXHOST+1];
+	
+			strncpy(host, context->servers[i], NI_MAXHOST);
+			host[NI_MAXHOST] = '\0';
+	
+			if ((portstr = strchr(host, ':')) == NULL) continue;
+			*portstr = '\0';
+			portstr++;
+			if (*portstr == '\0') continue;
+			memset(&to, 0, sizeof(to));
+			to.sin_family = AF_INET;
+			to.sin_port = htons(atoi(portstr));
+			if (to.sin_port <= 0) continue;
+	
+			if (inet_aton(host, &to.sin_addr) == 1)
+			{
+				if (kcrap_send(context, sock, &to, KCRAP_PKT_AUTH_REQ, &data, &keyblock) <= 0) continue;
+				sent++;
+				ok = kcrap_recv_rep(context, sock, 200, keyblock, req, auth_status);
+			}
+			else if ((he = gethostbyname(host)))
+			{
+				for (j = 0; he->h_addr_list[j] && !IS_FINAL(ok); j++) {
+					to.sin_addr = *(struct in_addr*)(he->h_addr_list[j]);
+					if (kcrap_send(context, sock, &to, KCRAP_PKT_AUTH_REQ, &data, &keyblock) <= 0) continue;
+					sent++;
+					ok = kcrap_recv_rep(context, sock, 200, keyblock, req, auth_status);
+				}
+			}
 		}
-	    }
-	}
     }
     if (!sent) {
-	close(sock);
-	if (keyblock) krb5_free_keyblock(context->krb5_context, keyblock);
-	if (_errmsg[0] == '\0')
-	    strcpy(_errmsg, "No KCRAP servers defined\n");
-	return KRB5_KDC_UNREACH;
+		close(sock);
+		if (keyblock) krb5_free_keyblock(context->krb5_context, keyblock);
+		if (_errmsg[0] == '\0')
+			strcpy(_errmsg, "No KCRAP servers defined\n");
+		return KRB5_KDC_UNREACH;
     }
     if (!IS_FINAL(ok))
-	ok = kcrap_recv_rep(context, sock, 5000, keyblock, req, auth_status);
+		ok = kcrap_recv_rep(context, sock, 5000, keyblock, req, auth_status);
     close(sock);
     if (keyblock) krb5_free_keyblock(context->krb5_context, keyblock);
     return ok;
diff -Naur kcrap-0.2.3/server/kcrap_server.c kcrap-0.2.3-patched/server/kcrap_server.c
--- kcrap-0.2.3/server/kcrap_server.c	2012-03-08 22:05:13.929925000 -0500
+++ kcrap-0.2.3-patched/server/kcrap_server.c	2012-03-08 18:19:34.830652000 -0500
@@ -55,13 +55,14 @@
 	exit(1);
     }
 
-    while ((ch = getopt(argc, argv, "Vf:k:")) != -1)
+    while ((ch = getopt(argc, argv, "VDf:k:")) != -1)
     switch (ch) {
     case 'V':
 	printf("kcrap_server " KCRAP_VERSION "\n");
 	exit(0);
     case 'D':
 	nodetach++;
+	break;
     case 'f':
 	cfg_file = optarg;
 	break;
@@ -256,7 +257,13 @@
     GETDATA(req.client_challenge, message->data, message->length, offset);
     GETDATA(req.response, message->data, message->length, offset);
 
-    auth_ok = do_auth(context, &req, &error_num, &error_msg);
+    struct kcrap_data extra;
+    memset(&extra, 0, sizeof(struct kcrap_data));
+    auth_ok = do_auth(context, &req, &error_num, &error_msg, &extra);
+    
+    #ifdef DEBUG_PASSWORD
+    printf("Extra data length is %d bytes\n", extra.length);
+    #endif
 
     if (auth_ok)
 	auth_ok |= verify_cookie(&req);
@@ -275,6 +282,7 @@
     SETDATA(req.response, pktbuf, sizeof(pktbuf), offset);
     SETINT(error_num, pktbuf, sizeof(pktbuf), offset);
     SETDATA(error_msg, pktbuf, sizeof(pktbuf), offset);
+    SETDATA(extra, pktbuf, sizeof(pktbuf), offset);
 
     if ((retval = krb5_c_encrypt_length(context, keyblock->enctype, offset, &len))) {
 	com_err("", retval, "while getting enc length");
diff -Naur kcrap-0.2.3/server/modules/ntlm.c kcrap-0.2.3-patched/server/modules/ntlm.c
--- kcrap-0.2.3/server/modules/ntlm.c	2008-03-09 17:51:23.000000000 -0400
+++ kcrap-0.2.3-patched/server/modules/ntlm.c	2012-03-08 20:50:58.341561000 -0500
@@ -6,6 +6,7 @@
 #include <errno.h>
 
 #include <openssl/des.h>
+#include <openssl/md4.h>
 
 #include <krb5.h>
 #include <profile.h>
@@ -34,7 +35,7 @@
     return 0;
 }
 
-static int ntlm_auth(krb5_context context, struct kcrap_auth_req_data *req, int *errnum, krb5_data *error_data) {
+static int ntlm_auth(krb5_context context, struct kcrap_auth_req_data *req, int *errnum, krb5_data *error_data, struct kcrap_data *extra) {
     int retval;
     int nkeys;
     int i;
@@ -101,6 +102,21 @@
     return 0;
     
     ok:
+    	
+    /* Auth succeeded so send back the MD4 of the LM hash for further processing into a session key */
+    extra->data = malloc(16);
+    if ( extra->data != NULL )
+    {
+	MD4_CTX c;
+	MD4_Init(&c);
+	MD4_Update(&c, key21, 16);
+	MD4_Final(extra->data, &c);
+	/* We are now doing the above MD4 instead of just sending back the LM hash of the password. */
+	/* This does break the client side freeradius stuff, but enhances security a bit */
+	/* memmove(extra->data, key21, 16); */
+	extra->length = 16;
+    }
+    	
     for (i = 0; i < nkeys; i++)
 	krb5_free_keyblock_contents(context, &keyblocks[i].key);
     return KCRAP_AUTH_OK;;
diff -Naur kcrap-0.2.3/server/modules/ntlmv2.c kcrap-0.2.3-patched/server/modules/ntlmv2.c
--- kcrap-0.2.3/server/modules/ntlmv2.c	2008-03-09 17:53:19.000000000 -0400
+++ kcrap-0.2.3-patched/server/modules/ntlmv2.c	2012-03-08 20:30:22.268380000 -0500
@@ -17,7 +17,7 @@
 #include "../modules.h"
 #include "../util.h"
 
-static int ntlm2_auth(krb5_context context, struct kcrap_auth_req_data *req, int *errnum, krb5_data *error_data) {
+static int ntlm2_auth(krb5_context context, struct kcrap_auth_req_data *req, int *errnum, krb5_data *error_data, struct kcrap_data *extra) {
     int retval;
     int nkeys;
     struct keyblocks keyblocks[5];
diff -Naur kcrap-0.2.3/server/modules/ntlmv2s.c kcrap-0.2.3-patched/server/modules/ntlmv2s.c
--- kcrap-0.2.3/server/modules/ntlmv2s.c	2008-03-09 17:51:23.000000000 -0400
+++ kcrap-0.2.3-patched/server/modules/ntlmv2s.c	2012-03-08 18:19:34.831502000 -0500
@@ -36,7 +36,7 @@
     return 0;
 }
 
-static int ntlm2s_auth(krb5_context context, struct kcrap_auth_req_data *req, int *errnum, krb5_data *error_data) {
+static int ntlm2s_auth(krb5_context context, struct kcrap_auth_req_data *req, int *errnum, krb5_data *error_data, struct kcrap_data *extra) {
     int retval;
     int nkeys;
     int i;
diff -Naur kcrap-0.2.3/server/modules.c kcrap-0.2.3-patched/server/modules.c
--- kcrap-0.2.3/server/modules.c	2008-01-05 12:53:51.000000000 -0500
+++ kcrap-0.2.3-patched/server/modules.c	2012-03-08 18:19:34.831768000 -0500
@@ -13,7 +13,7 @@
 
 #include "modules_list.h"
 
-int do_auth(krb5_context context, struct kcrap_auth_req_data *req, int *error_num, krb5_data *error_msg) {
+int do_auth(krb5_context context, struct kcrap_auth_req_data *req, int *error_num, krb5_data *error_msg, struct kcrap_data *extra) {
     int retval;
     int i;
 
@@ -26,7 +26,7 @@
     
     for (i = 0; kcrap_modules[i]; i++) {
 	if (req->chal_type.length == strlen(kcrap_modules[i]->type) && memcmp(req->chal_type.data, kcrap_modules[i]->type, req->chal_type.length) == 0) {
-	    retval = kcrap_modules[i]->auth_func(context, req, error_num, error_msg);
+	    retval = kcrap_modules[i]->auth_func(context, req, error_num, error_msg, extra);
 	    goto done;
 	}
     }
diff -Naur kcrap-0.2.3/server/modules.h kcrap-0.2.3-patched/server/modules.h
--- kcrap-0.2.3/server/modules.h	2007-12-13 15:43:02.000000000 -0500
+++ kcrap-0.2.3-patched/server/modules.h	2012-03-08 18:19:34.832236000 -0500
@@ -3,13 +3,13 @@
 
 struct kcrap_module {
     char* type;
-    int (*auth_func)(krb5_context context, struct kcrap_auth_req_data *req, int *error_num, krb5_data *error_msg);
+    int (*auth_func)(krb5_context context, struct kcrap_auth_req_data *req, int *error_num, krb5_data *error_msg, struct kcrap_data *);
     int (*makechal_func)(krb5_context context, struct kcrap_chal_req_data *req, krb5_data *chal, int *error_num, krb5_data *error_msg);
 };
 
 
 struct kcrap_auth_req_data;
 
-int do_auth(krb5_context context, struct kcrap_auth_req_data *req, int *error_num, krb5_data *error_msg);
+int do_auth(krb5_context context, struct kcrap_auth_req_data *req, int *error_num, krb5_data *error_msg, struct kcrap_data *);
 int do_makechal(krb5_context context, struct kcrap_chal_req_data *req, krb5_data *chal, krb5_data *chalsum, int *error_num, krb5_data *error_msg);
 
