diff --git a/src/sage/interfaces/primecount.pyx b/src/sage/interfaces/primecount.pyx
index a0f698779e..86dce1c790 100644
--- a/src/sage/interfaces/primecount.pyx
+++ b/src/sage/interfaces/primecount.pyx
@@ -22,7 +22,7 @@ cdef inline int _do_sig(int64_t n):
     "threshold for sig_on/sig_off"
     return n >> 26
 
-cpdef int64_t prime_pi(int64_t n, method=None) except -1:
+cpdef int64_t prime_pi(int64_t n) except -1:
     r"""
     Return the number of prime numbers smaller or equal than ``n``.
 
@@ -30,71 +30,17 @@ cpdef int64_t prime_pi(int64_t n, method=None) except -1:
 
     - ``n`` - an integer
 
-    - ``method`` - ``None`` or a string that determines the primecount
-      function to be called
-
-        - ``"deleglise_rivat"``
-        - ``"legendre"``
-        - ``"lehmer"``
-        - ``"lmo"``
-        - ``"meissel"``
-        - ``"primesieve"``
-
     EXAMPLES::
 
         sage: from sage.interfaces.primecount import prime_pi # optional - primecount
 
         sage: prime_pi(1000) == 168                     # optional - primecount
         True
-        sage: prime_pi(1000, "deleglise_rivat") == 168  # optional - primecount
-        True
-        sage: prime_pi(1000, "legendre") == 168         # optional - primecount
-        True
-        sage: prime_pi(1000, "lehmer") == 168           # optional - primecount
-        True
-        sage: prime_pi(1000, "lmo") == 168              # optional - primecount
-        True
-        sage: prime_pi(1000, "meissel") == 168          # optional - primecount
-        True
-        sage: prime_pi(1000, "primesieve") == 168       # optional - primecount
-        True
-        sage: prime_pi(1000, "youpi")                   # optional - primecount
-        Traceback (most recent call last):
-        ...
-        ValueError: unknown method 'youpi'
     """
     cdef int64_t ans
-    if method is None:
-        if _do_sig(n): sig_on()
-        ans = primecount.pi(n)
-        if _do_sig(n): sig_off()
-    elif method == "deleglise_rivat":
-        if _do_sig(n): sig_on()
-        ans = primecount.pi_deleglise_rivat(n)
-        if _do_sig(n): sig_off()
-    elif method == "legendre":
-        if _do_sig(n): sig_on()
-        ans = primecount.pi_legendre(n)
-        if _do_sig(n): sig_off()
-    elif method == "lehmer":
-        if _do_sig(n): sig_on()
-        ans = primecount.pi_lehmer(n)
-        if _do_sig(n): sig_off()
-    elif method == "lmo":
-        if _do_sig(n): sig_on()
-        ans = primecount.pi_lmo(n)
-        if _do_sig(n): sig_off()
-    elif method == "meissel":
-        if _do_sig(n): sig_on()
-        ans = primecount.pi_meissel(n)
-        if _do_sig(n): sig_off()
-    elif method == "primesieve":
-        if _do_sig(n): sig_on()
-        ans = primecount.pi_primesieve(n)
-        if _do_sig(n): sig_off()
-    else:
-        raise ValueError("unknown method {!r}".format(method))
-
+    if _do_sig(n): sig_on()
+    ans = primecount.pi(n)
+    if _do_sig(n): sig_off()
     return ans
 
 cpdef prime_pi_128(n):

